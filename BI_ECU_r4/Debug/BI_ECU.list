
BI_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3f0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800f6c0  0800f6c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa24  0800fa24  00010a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa2c  0800fa2c  00010a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fa30  0800fa30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000124  24000000  0800fa34  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001154  24000124  0800fb58  00011124  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001278  0800fb58  00011278  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011124  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b969  00000000  00000000  00011152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006348  00000000  00000000  0004cabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002310  00000000  00000000  00052e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bda  00000000  00000000  00055118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cd5e  00000000  00000000  00056cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033a68  00000000  00000000  00093a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fa62  00000000  00000000  000c74b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00246f1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e2c  00000000  00000000  00246f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000045  00000000  00000000  00250d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000124 	.word	0x24000124
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f6a8 	.word	0x0800f6a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000128 	.word	0x24000128
 800030c:	0800f6a8 	.word	0x0800f6a8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b96a 	b.w	80006cc <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	460c      	mov	r4, r1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d14e      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041c:	4694      	mov	ip, r2
 800041e:	458c      	cmp	ip, r1
 8000420:	4686      	mov	lr, r0
 8000422:	fab2 f282 	clz	r2, r2
 8000426:	d962      	bls.n	80004ee <__udivmoddi4+0xde>
 8000428:	b14a      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	4091      	lsls	r1, r2
 8000430:	fa20 f303 	lsr.w	r3, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	4319      	orrs	r1, r3
 800043a:	fa00 fe02 	lsl.w	lr, r0, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f f68c 	uxth.w	r6, ip
 8000446:	fbb1 f4f7 	udiv	r4, r1, r7
 800044a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f104 30ff 	add.w	r0, r4, #4294967295
 8000466:	f080 8112 	bcs.w	800068e <__udivmoddi4+0x27e>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 810f 	bls.w	800068e <__udivmoddi4+0x27e>
 8000470:	3c02      	subs	r4, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1110 	mls	r1, r7, r0, r1
 8000482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000486:	fb00 f606 	mul.w	r6, r0, r6
 800048a:	429e      	cmp	r6, r3
 800048c:	d90a      	bls.n	80004a4 <__udivmoddi4+0x94>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 31ff 	add.w	r1, r0, #4294967295
 8000496:	f080 80fc 	bcs.w	8000692 <__udivmoddi4+0x282>
 800049a:	429e      	cmp	r6, r3
 800049c:	f240 80f9 	bls.w	8000692 <__udivmoddi4+0x282>
 80004a0:	4463      	add	r3, ip
 80004a2:	3802      	subs	r0, #2
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	b11d      	cbz	r5, 80004b6 <__udivmoddi4+0xa6>
 80004ae:	40d3      	lsrs	r3, r2
 80004b0:	2200      	movs	r2, #0
 80004b2:	e9c5 3200 	strd	r3, r2, [r5]
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d905      	bls.n	80004ca <__udivmoddi4+0xba>
 80004be:	b10d      	cbz	r5, 80004c4 <__udivmoddi4+0xb4>
 80004c0:	e9c5 0100 	strd	r0, r1, [r5]
 80004c4:	2100      	movs	r1, #0
 80004c6:	4608      	mov	r0, r1
 80004c8:	e7f5      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ca:	fab3 f183 	clz	r1, r3
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d146      	bne.n	8000560 <__udivmoddi4+0x150>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0xcc>
 80004d6:	4290      	cmp	r0, r2
 80004d8:	f0c0 80f0 	bcc.w	80006bc <__udivmoddi4+0x2ac>
 80004dc:	1a86      	subs	r6, r0, r2
 80004de:	eb64 0303 	sbc.w	r3, r4, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d0e6      	beq.n	80004b6 <__udivmoddi4+0xa6>
 80004e8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ec:	e7e3      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	f040 8090 	bne.w	8000614 <__udivmoddi4+0x204>
 80004f4:	eba1 040c 	sub.w	r4, r1, ip
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa1f f78c 	uxth.w	r7, ip
 8000500:	2101      	movs	r1, #1
 8000502:	fbb4 f6f8 	udiv	r6, r4, r8
 8000506:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800050a:	fb08 4416 	mls	r4, r8, r6, r4
 800050e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000512:	fb07 f006 	mul.w	r0, r7, r6
 8000516:	4298      	cmp	r0, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x11c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x11a>
 8000524:	4298      	cmp	r0, r3
 8000526:	f200 80cd 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 800052a:	4626      	mov	r6, r4
 800052c:	1a1c      	subs	r4, r3, r0
 800052e:	fa1f f38e 	uxth.w	r3, lr
 8000532:	fbb4 f0f8 	udiv	r0, r4, r8
 8000536:	fb08 4410 	mls	r4, r8, r0, r4
 800053a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800053e:	fb00 f707 	mul.w	r7, r0, r7
 8000542:	429f      	cmp	r7, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x148>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 34ff 	add.w	r4, r0, #4294967295
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x146>
 8000550:	429f      	cmp	r7, r3
 8000552:	f200 80b0 	bhi.w	80006b6 <__udivmoddi4+0x2a6>
 8000556:	4620      	mov	r0, r4
 8000558:	1bdb      	subs	r3, r3, r7
 800055a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800055e:	e7a5      	b.n	80004ac <__udivmoddi4+0x9c>
 8000560:	f1c1 0620 	rsb	r6, r1, #32
 8000564:	408b      	lsls	r3, r1
 8000566:	fa22 f706 	lsr.w	r7, r2, r6
 800056a:	431f      	orrs	r7, r3
 800056c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000570:	fa04 f301 	lsl.w	r3, r4, r1
 8000574:	ea43 030c 	orr.w	r3, r3, ip
 8000578:	40f4      	lsrs	r4, r6
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	0c38      	lsrs	r0, r7, #16
 8000580:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000584:	fbb4 fef0 	udiv	lr, r4, r0
 8000588:	fa1f fc87 	uxth.w	ip, r7
 800058c:	fb00 441e 	mls	r4, r0, lr, r4
 8000590:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000594:	fb0e f90c 	mul.w	r9, lr, ip
 8000598:	45a1      	cmp	r9, r4
 800059a:	fa02 f201 	lsl.w	r2, r2, r1
 800059e:	d90a      	bls.n	80005b6 <__udivmoddi4+0x1a6>
 80005a0:	193c      	adds	r4, r7, r4
 80005a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005a6:	f080 8084 	bcs.w	80006b2 <__udivmoddi4+0x2a2>
 80005aa:	45a1      	cmp	r9, r4
 80005ac:	f240 8081 	bls.w	80006b2 <__udivmoddi4+0x2a2>
 80005b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b4:	443c      	add	r4, r7
 80005b6:	eba4 0409 	sub.w	r4, r4, r9
 80005ba:	fa1f f983 	uxth.w	r9, r3
 80005be:	fbb4 f3f0 	udiv	r3, r4, r0
 80005c2:	fb00 4413 	mls	r4, r0, r3, r4
 80005c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ce:	45a4      	cmp	ip, r4
 80005d0:	d907      	bls.n	80005e2 <__udivmoddi4+0x1d2>
 80005d2:	193c      	adds	r4, r7, r4
 80005d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005d8:	d267      	bcs.n	80006aa <__udivmoddi4+0x29a>
 80005da:	45a4      	cmp	ip, r4
 80005dc:	d965      	bls.n	80006aa <__udivmoddi4+0x29a>
 80005de:	3b02      	subs	r3, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005e6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ea:	eba4 040c 	sub.w	r4, r4, ip
 80005ee:	429c      	cmp	r4, r3
 80005f0:	46ce      	mov	lr, r9
 80005f2:	469c      	mov	ip, r3
 80005f4:	d351      	bcc.n	800069a <__udivmoddi4+0x28a>
 80005f6:	d04e      	beq.n	8000696 <__udivmoddi4+0x286>
 80005f8:	b155      	cbz	r5, 8000610 <__udivmoddi4+0x200>
 80005fa:	ebb8 030e 	subs.w	r3, r8, lr
 80005fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000602:	fa04 f606 	lsl.w	r6, r4, r6
 8000606:	40cb      	lsrs	r3, r1
 8000608:	431e      	orrs	r6, r3
 800060a:	40cc      	lsrs	r4, r1
 800060c:	e9c5 6400 	strd	r6, r4, [r5]
 8000610:	2100      	movs	r1, #0
 8000612:	e750      	b.n	80004b6 <__udivmoddi4+0xa6>
 8000614:	f1c2 0320 	rsb	r3, r2, #32
 8000618:	fa20 f103 	lsr.w	r1, r0, r3
 800061c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000620:	fa24 f303 	lsr.w	r3, r4, r3
 8000624:	4094      	lsls	r4, r2
 8000626:	430c      	orrs	r4, r1
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000630:	fa1f f78c 	uxth.w	r7, ip
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3110 	mls	r1, r8, r0, r3
 800063c:	0c23      	lsrs	r3, r4, #16
 800063e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000642:	fb00 f107 	mul.w	r1, r0, r7
 8000646:	4299      	cmp	r1, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x24c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000652:	d22c      	bcs.n	80006ae <__udivmoddi4+0x29e>
 8000654:	4299      	cmp	r1, r3
 8000656:	d92a      	bls.n	80006ae <__udivmoddi4+0x29e>
 8000658:	3802      	subs	r0, #2
 800065a:	4463      	add	r3, ip
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	b2a4      	uxth	r4, r4
 8000660:	fbb3 f1f8 	udiv	r1, r3, r8
 8000664:	fb08 3311 	mls	r3, r8, r1, r3
 8000668:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800066c:	fb01 f307 	mul.w	r3, r1, r7
 8000670:	42a3      	cmp	r3, r4
 8000672:	d908      	bls.n	8000686 <__udivmoddi4+0x276>
 8000674:	eb1c 0404 	adds.w	r4, ip, r4
 8000678:	f101 36ff 	add.w	r6, r1, #4294967295
 800067c:	d213      	bcs.n	80006a6 <__udivmoddi4+0x296>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d911      	bls.n	80006a6 <__udivmoddi4+0x296>
 8000682:	3902      	subs	r1, #2
 8000684:	4464      	add	r4, ip
 8000686:	1ae4      	subs	r4, r4, r3
 8000688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800068c:	e739      	b.n	8000502 <__udivmoddi4+0xf2>
 800068e:	4604      	mov	r4, r0
 8000690:	e6f0      	b.n	8000474 <__udivmoddi4+0x64>
 8000692:	4608      	mov	r0, r1
 8000694:	e706      	b.n	80004a4 <__udivmoddi4+0x94>
 8000696:	45c8      	cmp	r8, r9
 8000698:	d2ae      	bcs.n	80005f8 <__udivmoddi4+0x1e8>
 800069a:	ebb9 0e02 	subs.w	lr, r9, r2
 800069e:	eb63 0c07 	sbc.w	ip, r3, r7
 80006a2:	3801      	subs	r0, #1
 80006a4:	e7a8      	b.n	80005f8 <__udivmoddi4+0x1e8>
 80006a6:	4631      	mov	r1, r6
 80006a8:	e7ed      	b.n	8000686 <__udivmoddi4+0x276>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e799      	b.n	80005e2 <__udivmoddi4+0x1d2>
 80006ae:	4630      	mov	r0, r6
 80006b0:	e7d4      	b.n	800065c <__udivmoddi4+0x24c>
 80006b2:	46d6      	mov	lr, sl
 80006b4:	e77f      	b.n	80005b6 <__udivmoddi4+0x1a6>
 80006b6:	4463      	add	r3, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	e74d      	b.n	8000558 <__udivmoddi4+0x148>
 80006bc:	4606      	mov	r6, r0
 80006be:	4623      	mov	r3, r4
 80006c0:	4608      	mov	r0, r1
 80006c2:	e70f      	b.n	80004e4 <__udivmoddi4+0xd4>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	4463      	add	r3, ip
 80006c8:	e730      	b.n	800052c <__udivmoddi4+0x11c>
 80006ca:	bf00      	nop

080006cc <__aeabi_idiv0>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <CO_error>:

    return;
}

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 80006d0:	b480      	push	{r7}
 80006d2:	b08d      	sub	sp, #52	@ 0x34
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	4611      	mov	r1, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	460b      	mov	r3, r1
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	4613      	mov	r3, r2
 80006e4:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 80a6 	beq.w	800083a <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 0307 	and.w	r3, r3, #7
 80006fc:	2201      	movs	r2, #1
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800070a:	2b09      	cmp	r3, #9
 800070c:	d90a      	bls.n	8000724 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 800070e:	2305      	movs	r3, #5
 8000710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8000714:	2301      	movs	r3, #1
 8000716:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 800071a:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 800071e:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8000724:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 800072e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000736:	4013      	ands	r3, r2
 8000738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 8000742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <CO_error+0x88>
            return;
 800074a:	e079      	b.n	8000840 <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 800074c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000750:	2b00      	cmp	r3, #0
 8000752:	d074      	beq.n	800083e <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000754:	2300      	movs	r3, #0
 8000756:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	061a      	lsls	r2, r3, #24
 800075c:	88bb      	ldrh	r3, [r7, #4]
 800075e:	4313      	orrs	r3, r2
 8000760:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000764:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800076a:	f3ef 8210 	mrs	r2, PRIMASK
 800076e:	617a      	str	r2, [r7, #20]
  return(result);
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
    if (setError) {
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d008      	beq.n	8000790 <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 800077e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000786:	4313      	orrs	r3, r2
 8000788:	b2da      	uxtb	r2, r3
 800078a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e00b      	b.n	80007a8 <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 8000790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b25a      	sxtb	r2, r3
 8000796:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 800079a:	43db      	mvns	r3, r3
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4013      	ands	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a6:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	7f1b      	ldrb	r3, [r3, #28]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d93c      	bls.n	800082a <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	7f5b      	ldrb	r3, [r3, #29]
 80007b4:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 80007b6:	7efb      	ldrb	r3, [r7, #27]
 80007b8:	3301      	adds	r3, #1
 80007ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	7f1b      	ldrb	r3, [r3, #28]
 80007c2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d302      	bcc.n	80007d0 <CO_error+0x100>
            fifoWrPtrNext = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	7f9b      	ldrb	r3, [r3, #30]
 80007d4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80007d8:	429a      	cmp	r2, r3
 80007da:	d103      	bne.n	80007e4 <CO_error+0x114>
            em->fifoOverflow = 1;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2201      	movs	r2, #1
 80007e0:	77da      	strb	r2, [r3, #31]
 80007e2:	e022      	b.n	800082a <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	7efb      	ldrb	r3, [r7, #27]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4413      	add	r3, r2
 80007ee:	6a3a      	ldr	r2, [r7, #32]
 80007f0:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	699a      	ldr	r2, [r3, #24]
 80007f6:	7efb      	ldrb	r3, [r7, #27]
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	4413      	add	r3, r2
 80007fc:	69fa      	ldr	r2, [r7, #28]
 80007fe:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000806:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	7f1b      	ldrb	r3, [r3, #28]
 8000814:	3b01      	subs	r3, #1
 8000816:	429a      	cmp	r2, r3
 8000818:	d207      	bcs.n	800082a <CO_error+0x15a>
                em->fifoCount++;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000820:	3301      	adds	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000830:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	f383 8810 	msr	PRIMASK, r3
}
 8000838:	e002      	b.n	8000840 <CO_error+0x170>
        return;
 800083a:	bf00      	nop
 800083c:	e000      	b.n	8000840 <CO_error+0x170>
            return;
 800083e:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000840:	3734      	adds	r7, #52	@ 0x34
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <CO_RPDO_process>:
void
CO_RPDO_process(CO_RPDO_t* RPDO,
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 800084a:	b590      	push	{r4, r7, lr}
 800084c:	b097      	sub	sp, #92	@ 0x5c
 800084e:	af02      	add	r7, sp, #8
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	603b      	str	r3, [r7, #0]
    (void)syncWas;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    (void)timerNext_us;
#endif

    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (PDO->valid && NMTisOperational
 800085c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 8124 	beq.w	8000aae <CO_RPDO_process+0x264>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 8120 	beq.w	8000aae <CO_RPDO_process+0x264>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (syncWas || !RPDO->synchronous)
 800086e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <CO_RPDO_process+0x36>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 8117 	bne.w	8000aae <CO_RPDO_process+0x264>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8000886:	2b0a      	cmp	r3, #10
 8000888:	d927      	bls.n	80008da <CO_RPDO_process+0x90>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8000890:	2b0b      	cmp	r3, #11
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint16_t code = (RPDO->receiveError == CO_RPDO_RX_SHORT) ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80008a2:	2b0c      	cmp	r3, #12
 80008a4:	d102      	bne.n	80008ac <CO_RPDO_process+0x62>
 80008a6:	f248 2310 	movw	r3, #33296	@ 0x8210
 80008aa:	e001      	b.n	80008b0 <CO_RPDO_process+0x66>
 80008ac:	f248 2320 	movw	r3, #33312	@ 0x8220
 80008b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH, code, PDO->dataLength);
 80008b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b8:	7b1b      	ldrb	r3, [r3, #12]
 80008ba:	461a      	mov	r2, r3
 80008bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80008be:	9200      	str	r2, [sp, #0]
 80008c0:	2204      	movs	r2, #4
 80008c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80008c4:	f7ff ff04 	bl	80006d0 <CO_error>
            RPDO->receiveError = setError ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 80008c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <CO_RPDO_process+0x88>
 80008ce:	2201      	movs	r2, #1
 80008d0:	e000      	b.n	80008d4 <CO_RPDO_process+0x8a>
 80008d2:	2200      	movs	r2, #0
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (RPDO->synchronous && (RPDO->SYNC != NULL) && !RPDO->SYNC->CANrxToggle) {
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00d      	beq.n	8000906 <CO_RPDO_process+0xbc>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d008      	beq.n	8000906 <CO_RPDO_process+0xbc>
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <CO_RPDO_process+0xbc>
            bufNo = 1;
 8000900:	2301      	movs	r3, #1
 8000902:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8000906:	2300      	movs	r3, #0
 8000908:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 800090a:	e07d      	b.n	8000a08 <CO_RPDO_process+0x1be>
            rpdoReceived = true;
 800090c:	2301      	movs	r3, #1
 800090e:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t* dataRPDO = RPDO->CANrxData[bufNo];
 8000910:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000914:	332e      	adds	r3, #46	@ 0x2e
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	647b      	str	r3, [r7, #68]	@ 0x44
            OD_size_t verifyLength = 0U;
 800091e:	2300      	movs	r3, #0
 8000920:	643b      	str	r3, [r7, #64]	@ 0x40

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8000922:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	325a      	adds	r2, #90	@ 0x5a
 800092a:	2100      	movs	r1, #0
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000936:	e04a      	b.n	80009ce <CO_RPDO_process+0x184>
                OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8000938:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800093c:	015b      	lsls	r3, r3, #5
 800093e:	3310      	adds	r3, #16
 8000940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000942:	4413      	add	r3, r2
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24

                /* get mappedLength from temporary storage */
                OD_size_t* dataOffset = &OD_IO->stream.dataOffset;
 8000946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t)(*dataOffset);
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	77fb      	strb	r3, [r7, #31]

                /* additional safety check. */
                verifyLength += (OD_size_t)mappedLength;
 8000952:	7ffb      	ldrb	r3, [r7, #31]
 8000954:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000956:	4413      	add	r3, r2
 8000958:	643b      	str	r3, [r7, #64]	@ 0x40
                if (verifyLength > CO_PDO_MAX_SIZE) {
 800095a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800095c:	2b08      	cmp	r3, #8
 800095e:	d83d      	bhi.n	80009dc <CO_RPDO_process+0x192>
                    break;
                }

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (ODdataLength > CO_PDO_MAX_SIZE) {
 8000966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000968:	2b08      	cmp	r3, #8
 800096a:	d901      	bls.n	8000970 <CO_RPDO_process+0x126>
                    ODdataLength = CO_PDO_MAX_SIZE;
 800096c:	2308      	movs	r3, #8
 800096e:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t* dataOD;
                if (ODdataLength > mappedLength) {
 8000970:	7ffb      	ldrb	r3, [r7, #31]
 8000972:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000974:	429a      	cmp	r2, r3
 8000976:	d911      	bls.n	800099c <CO_RPDO_process+0x152>
                    (void)memset(buf, 0, sizeof(buf));
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2208      	movs	r2, #8
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00e f9ab 	bl	800ecdc <memset>
                    (void)memcpy(buf, dataRPDO, mappedLength);
 8000986:	7ffa      	ldrb	r2, [r7, #31]
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800098e:	4618      	mov	r0, r3
 8000990:	f00e f9fe 	bl	800ed90 <memcpy>
                    dataOD = buf;
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
 800099a:	e001      	b.n	80009a0 <CO_RPDO_process+0x156>
                } else {
                    dataOD = dataRPDO;
 800099c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
                }
#endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD, ODdataLength, &countWritten);
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	69dc      	ldr	r4, [r3, #28]
 80009aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009b4:	47a0      	blx	r4
                *dataOffset = mappedLength;
 80009b6:	7ffa      	ldrb	r2, [r7, #31]
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 80009bc:	7ffb      	ldrb	r3, [r7, #31]
 80009be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80009c0:	4413      	add	r3, r2
 80009c2:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80009c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80009c8:	3301      	adds	r3, #1
 80009ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80009ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d0:	7b5b      	ldrb	r3, [r3, #13]
 80009d2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d3ae      	bcc.n	8000938 <CO_RPDO_process+0xee>
 80009da:	e000      	b.n	80009de <CO_RPDO_process+0x194>
                    break;
 80009dc:	bf00      	nop
            for (uint8_t i = 0; i < PDO->dataLength; i++) {
                *PDO->mapPointer[i] = dataRPDO[i];
            }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

            if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80009de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009e0:	2b08      	cmp	r3, #8
 80009e2:	d805      	bhi.n	80009f0 <CO_RPDO_process+0x1a6>
 80009e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e6:	7b1b      	ldrb	r3, [r3, #12]
 80009e8:	461a      	mov	r2, r3
 80009ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d00b      	beq.n	8000a08 <CO_RPDO_process+0x1be>
                /* bug in software, should not happen */
                CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL,
 80009f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000a00:	222c      	movs	r2, #44	@ 0x2c
 8000a02:	2101      	movs	r1, #1
 8000a04:	f7ff fe64 	bl	80006d0 <CO_error>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8000a08:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	325a      	adds	r2, #90	@ 0x5a
 8000a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f47f af79 	bne.w	800090c <CO_RPDO_process+0xc2>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void)rpdoReceived;
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        if (RPDO->timeoutTime_us > 0U) {
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d058      	beq.n	8000ad6 <CO_RPDO_process+0x28c>
            if (rpdoReceived) {
 8000a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d017      	beq.n	8000a5a <CO_RPDO_process+0x210>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d90a      	bls.n	8000a50 <CO_RPDO_process+0x206>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT, RPDO->timeoutTimer);
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2217      	movs	r2, #23
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f7ff fe40 	bl	80006d0 <CO_error>
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2201      	movs	r2, #1
 8000a54:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    ) {
 8000a58:	e03d      	b.n	8000ad6 <CO_RPDO_process+0x28c>
            } else if ((RPDO->timeoutTimer > 0U) && (RPDO->timeoutTimer < RPDO->timeoutTime_us)) {
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d038      	beq.n	8000ad6 <CO_RPDO_process+0x28c>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d230      	bcs.n	8000ad6 <CO_RPDO_process+0x28c>
                RPDO->timeoutTimer += timeDifference_us;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d920      	bls.n	8000ad6 <CO_RPDO_process+0x28c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT, CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
 8000a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	f248 2350 	movw	r3, #33360	@ 0x8250
 8000aa4:	2217      	movs	r2, #23
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	f7ff fe12 	bl	80006d0 <CO_error>
    ) {
 8000aac:	e013      	b.n	8000ad6 <CO_RPDO_process+0x28c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    }  /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        if (!PDO->valid || !NMTisOperational) {
 8000aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <CO_RPDO_process+0x272>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10d      	bne.n	8000ad8 <CO_RPDO_process+0x28e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
            RPDO->timeoutTimer = 0;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
        RPDO->timeoutTimer = 0;
#endif
#endif
    }
}
 8000ad4:	e000      	b.n	8000ad8 <CO_RPDO_process+0x28e>
    ) {
 8000ad6:	bf00      	nop
}
 8000ad8:	bf00      	nop
 8000ada:	3754      	adds	r7, #84	@ 0x54
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b093      	sub	sp, #76	@ 0x4c
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000af2:	3305      	adds	r3, #5
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t verifyLength = 0U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	@ 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <CO_TPDOsend+0x2e>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000b0a:	2bfd      	cmp	r3, #253	@ 0xfd
 8000b0c:	d901      	bls.n	8000b12 <CO_TPDOsend+0x32>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <CO_TPDOsend+0x34>
 8000b12:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b1c:	e066      	b.n	8000bec <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8000b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000b22:	015b      	lsls	r3, r3, #5
 8000b24:	3310      	adds	r3, #16
 8000b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b28:	4413      	add	r3, r2
 8000b2a:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 8000b36:	7efb      	ldrb	r3, [r7, #27]
 8000b38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b3a:	4413      	add	r3, r2
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8000b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d85a      	bhi.n	8000bfa <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b4c:	2b08      	cmp	r3, #8
 8000b4e:	d901      	bls.n	8000b54 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8000b50:	2308      	movs	r3, #8
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8000b54:	7efb      	ldrb	r3, [r7, #27]
 8000b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d90a      	bls.n	8000b72 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2208      	movs	r2, #8
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00e f8b9 	bl	800ecdc <memset>
            dataTPDOCopy = buf;
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b70:	e001      	b.n	8000b76 <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8000b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	699c      	ldr	r4, [r3, #24]
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b88:	69f8      	ldr	r0, [r7, #28]
 8000b8a:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8000b8c:	7efa      	ldrb	r2, [r7, #27]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8000b92:	7efb      	ldrb	r3, [r7, #27]
 8000b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d906      	bls.n	8000ba8 <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 8000b9a:	7efa      	ldrb	r2, [r7, #27]
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ba4:	f00e f8f4 	bl	800ed90 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8000ba8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	3244      	adds	r2, #68	@ 0x44
 8000bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb4:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00e      	beq.n	8000bda <CO_TPDOsend+0xfa>
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000bcc:	440b      	add	r3, r1
 8000bce:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 8000bda:	7efb      	ldrb	r3, [r7, #27]
 8000bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bde:	4413      	add	r3, r2
 8000be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8000be2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000be6:	3301      	adds	r3, #1
 8000be8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bee:	7b5b      	ldrb	r3, [r3, #13]
 8000bf0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d392      	bcc.n	8000b1e <CO_TPDOsend+0x3e>
 8000bf8:	e000      	b.n	8000bfc <CO_TPDOsend+0x11c>
            break;
 8000bfa:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 8000bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d805      	bhi.n	8000c0e <CO_TPDOsend+0x12e>
 8000c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c04:	7b1b      	ldrb	r3, [r3, #12]
 8000c06:	461a      	mov	r2, r3
 8000c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00e      	beq.n	8000c2c <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 8000c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000c1e:	222c      	movs	r2, #44	@ 0x2c
 8000c20:	2101      	movs	r1, #1
 8000c22:	f7ff fd55 	bl	80006d0 <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 8000c26:	f06f 030c 	mvn.w	r3, #12
 8000c2a:	e019      	b.n	8000c60 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8000c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000c56:	4619      	mov	r1, r3
 8000c58:	4610      	mov	r0, r2
 8000c5a:	f000 fb73 	bl	8001344 <CO_CANsend>
 8000c5e:	4603      	mov	r3, r0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3744      	adds	r7, #68	@ 0x44
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd90      	pop	{r4, r7, pc}

08000c68 <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80dc 	beq.w	8000e3c <CO_TPDO_process+0x1d4>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80d8 	beq.w	8000e3c <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000c9c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000c9e:	d946      	bls.n	8000d2e <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d018      	beq.n	8000cdc <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d205      	bcs.n	8000cc2 <CO_TPDO_process+0x5a>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	e000      	b.n	8000cc4 <CO_TPDO_process+0x5c>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                if (TPDO->eventTimer == 0U) {
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d103      	bne.n	8000cdc <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d123      	bne.n	8000d2e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	77fb      	strb	r3, [r7, #31]
 8000cea:	e01b      	b.n	8000d24 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 8000cec:	7ffa      	ldrb	r2, [r7, #31]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	3244      	adds	r2, #68	@ 0x44
 8000cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf6:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00f      	beq.n	8000d1e <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	7ffb      	ldrb	r3, [r7, #31]
 8000d04:	69b9      	ldr	r1, [r7, #24]
 8000d06:	440b      	add	r3, r1
 8000d08:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
                            break;
 8000d1c:	e007      	b.n	8000d2e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	3301      	adds	r3, #1
 8000d22:	77fb      	strb	r3, [r7, #31]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	7b5b      	ldrb	r3, [r3, #13]
 8000d28:	7ffa      	ldrb	r2, [r7, #31]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3de      	bcc.n	8000cec <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000d34:	2bfd      	cmp	r3, #253	@ 0xfd
 8000d36:	d91d      	bls.n	8000d74 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
                                                                          : 0U;
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d205      	bcs.n	8000d50 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
                                                                          : 0U;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	e000      	b.n	8000d52 <CO_TPDO_process+0xea>
 8000d50:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d07d      	beq.n	8000e5e <CO_TPDO_process+0x1f6>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d178      	bne.n	8000e5e <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff feb7 	bl	8000ae0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000d72:	e074      	b.n	8000e5e <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d06f      	beq.n	8000e5e <CO_TPDO_process+0x1f6>
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d06c      	beq.n	8000e5e <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d108      	bne.n	8000da0 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d062      	beq.n	8000e5e <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fea1 	bl	8000ae0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000d9e:	e05e      	b.n	8000e5e <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8000da6:	2bff      	cmp	r3, #255	@ 0xff
 8000da8:	d119      	bne.n	8000dde <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8000db0:	7c5b      	ldrb	r3, [r3, #17]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d009      	beq.n	8000dca <CO_TPDO_process+0x162>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d004      	beq.n	8000dca <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	22fe      	movs	r2, #254	@ 0xfe
 8000dc4:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8000dc8:	e009      	b.n	8000dde <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000dd0:	085b      	lsrs	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8000de4:	2bfe      	cmp	r3, #254	@ 0xfe
 8000de6:	d112      	bne.n	8000e0e <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8000dee:	7c9a      	ldrb	r2, [r3, #18]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d131      	bne.n	8000e5e <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                        (void)CO_TPDOsend(TPDO);
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff fe6a 	bl	8000ae0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000e0c:	e027      	b.n	8000e5e <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8000e14:	3b01      	subs	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d11a      	bne.n	8000e5e <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    (void)CO_TPDOsend(TPDO);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fe53 	bl	8000ae0 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000e3a:	e010      	b.n	8000e5e <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        TPDO->eventTimer = 0;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	22ff      	movs	r2, #255	@ 0xff
 8000e58:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif
    }
}
 8000e5c:	e000      	b.n	8000e60 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8000e5e:	bf00      	nop
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7c9b      	ldrb	r3, [r3, #18]
 8000e74:	3301      	adds	r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	749a      	strb	r2, [r3, #18]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7c9a      	ldrb	r2, [r3, #18]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7c5b      	ldrb	r3, [r3, #17]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d902      	bls.n	8000e8e <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf0c      	ite	eq
 8000e9c:	2301      	moveq	r3, #1
 8000e9e:	2300      	movne	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	7c92      	ldrb	r2, [r2, #18]
 8000eb0:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	f000 fa41 	bl	8001344 <CO_CANsend>
 8000ec2:	4603      	mov	r3, r0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 8088 	beq.w	8000ff6 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d902      	bls.n	8000f00 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d007      	beq.n	8000f18 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <CO_SYNC_process+0x5c>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	e000      	b.n	8000f2a <CO_SYNC_process+0x5e>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d031      	beq.n	8000f96 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00a      	beq.n	8000f50 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d828      	bhi.n	8000f96 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8000f44:	2301      	movs	r3, #1
 8000f46:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff ff8d 	bl	8000e68 <CO_SYNCsend>
 8000f4e:	e022      	b.n	8000f96 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	7c1b      	ldrb	r3, [r3, #16]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d11e      	bne.n	8000f96 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4413      	add	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d202      	bcs.n	8000f70 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d20d      	bcs.n	8000f96 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000f88:	2218      	movs	r2, #24
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	f7ff fba0 	bl	80006d0 <CO_error>
                        SYNC->timeoutError = 2;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2202      	movs	r2, #2
 8000f94:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d015      	beq.n	8000fca <CO_SYNC_process+0xfe>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d010      	beq.n	8000fca <CO_SYNC_process+0xfe>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d909      	bls.n	8000fca <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	e002      	b.n	8000fd0 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	7a1b      	ldrb	r3, [r3, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d01a      	beq.n	800100e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	7a1b      	ldrb	r3, [r3, #8]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	f248 2340 	movw	r3, #33344	@ 0x8240
 8000fe6:	2219      	movs	r2, #25
 8000fe8:	2101      	movs	r1, #1
 8000fea:	f7ff fb71 	bl	80006d0 <CO_error>
            SYNC->receiveError = 0;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	721a      	strb	r2, [r3, #8]
 8000ff4:	e00b      	b.n	800100e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800100e:	7ffb      	ldrb	r3, [r7, #31]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10f      	bne.n	8001034 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	7c1b      	ldrb	r3, [r3, #16]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d108      	bne.n	800102e <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	2218      	movs	r2, #24
 8001028:	2100      	movs	r1, #0
 800102a:	f7ff fb51 	bl	80006d0 <CO_error>
        }
        SYNC->timeoutError = 1;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8001034:	7ffb      	ldrb	r3, [r7, #31]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <CO_NMT_getInternalState+0x16>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f993 3000 	ldrsb.w	r3, [r3]
 8001052:	e000      	b.n	8001056 <CO_NMT_getInternalState+0x18>
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <CO_process_SYNC>:
    return reset;
}

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b088      	sub	sp, #32
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d131      	bne.n	80010de <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffdd 	bl	800103e <CO_NMT_getInternalState>
 8001084:	4603      	mov	r3, r0
 8001086:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8001088:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800108c:	2b7f      	cmp	r3, #127	@ 0x7f
 800108e:	d003      	beq.n	8001098 <CO_process_SYNC+0x36>
 8001090:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d101      	bne.n	800109c <CO_process_SYNC+0x3a>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <CO_process_SYNC+0x3c>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	6979      	ldr	r1, [r7, #20]
 80010aa:	f7ff ff0f 	bl	8000ecc <CO_SYNC_process>
 80010ae:	4603      	mov	r3, r0
 80010b0:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d009      	beq.n	80010cc <CO_process_SYNC+0x6a>
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	dc0d      	bgt.n	80010d8 <CO_process_SYNC+0x76>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00d      	beq.n	80010dc <CO_process_SYNC+0x7a>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d000      	beq.n	80010c6 <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 80010c4:	e008      	b.n	80010d8 <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e008      	b.n	80010de <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f97a 	bl	80013ca <CO_CANclearPendingSyncPDOs>
 80010d6:	e002      	b.n	80010de <CO_process_SYNC+0x7c>
                break;
 80010d8:	bf00      	nop
 80010da:	e000      	b.n	80010de <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 80010dc:	bf00      	nop
        }
    }

    return syncWas;
 80010de:	69fb      	ldr	r3, [r7, #28]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d124      	bne.n	8001148 <CO_process_RPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff9b 	bl	800103e <CO_NMT_getInternalState>
 8001108:	4603      	mov	r3, r0
 800110a:	2b05      	cmp	r3, #5
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	82fb      	strh	r3, [r7, #22]
 800111a:	e011      	b.n	8001140 <CO_process_RPDO+0x58>
        CO_RPDO_process(&co->RPDO[i],
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001126:	fb01 f303 	mul.w	r3, r1, r3
 800112a:	18d0      	adds	r0, r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	f7ff fb88 	bl	800084a <CO_RPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	3301      	adds	r3, #1
 800113e:	82fb      	strh	r3, [r7, #22]
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d9ea      	bls.n	800111c <CO_process_RPDO+0x34>
 8001146:	e000      	b.n	800114a <CO_process_RPDO+0x62>
        return;
 8001148:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d124      	bne.n	80011b0 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff67 	bl	800103e <CO_NMT_getInternalState>
 8001170:	4603      	mov	r3, r0
 8001172:	2b05      	cmp	r3, #5
 8001174:	bf0c      	ite	eq
 8001176:	2301      	moveq	r3, #1
 8001178:	2300      	movne	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	82fb      	strh	r3, [r7, #22]
 8001182:	e011      	b.n	80011a8 <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001188:	8afb      	ldrh	r3, [r7, #22]
 800118a:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800118e:	fb01 f303 	mul.w	r3, r1, r3
 8001192:	18d0      	adds	r0, r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	f7ff fd63 	bl	8000c68 <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3301      	adds	r3, #1
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afb      	ldrh	r3, [r7, #22]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d9ea      	bls.n	8001184 <CO_process_TPDO+0x34>
 80011ae:	e000      	b.n	80011b2 <CO_process_TPDO+0x62>
        return;
 80011b0:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <canopen_app_interrupt>:
    }
}

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <canopen_app_interrupt+0x80>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011c4:	f3ef 8210 	mrs	r2, PRIMASK
 80011c8:	607a      	str	r2, [r7, #4]
  return(result);
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80011ce:	b672      	cpsid	i
}
 80011d0:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <canopen_app_interrupt+0x80>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d120      	bne.n	800121e <canopen_app_interrupt+0x66>
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <canopen_app_interrupt+0x80>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01a      	beq.n	800121e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80011ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f0:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <canopen_app_interrupt+0x80>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff31 	bl	8001062 <CO_process_SYNC>
 8001200:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8001202:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <canopen_app_interrupt+0x80>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	2300      	movs	r3, #0
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	f7ff ff6c 	bl	80010e8 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <canopen_app_interrupt+0x80>)
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	2300      	movs	r3, #0
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	f7ff ff99 	bl	8001150 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <canopen_app_interrupt+0x80>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001226:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f383 8810 	msr	PRIMASK, r3
}
 800122e:	bf00      	nop
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	24000144 	.word	0x24000144

0800123c <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]

	uint8_t success = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]

	/* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
	static FDCAN_TxHeaderTypeDef tx_hdr;
	if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f005 fbeb 	bl	8006a2c <HAL_FDCAN_GetTxFifoFreeLevel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d06c      	beq.n	8001336 <prv_send_can_message+0xfa>
		/*
		 * RTR flag is part of identifier value
		 * hence it needs to be properly decoded
		 */
		tx_hdr.Identifier = buffer->ident & CANID_MASK;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001264:	4a36      	ldr	r2, [pc, #216]	@ (8001340 <prv_send_can_message+0x104>)
 8001266:	6013      	str	r3, [r2, #0]
		tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	039b      	lsls	r3, r3, #14
 800126e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001272:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <prv_send_can_message+0x104>)
 8001274:	6093      	str	r3, [r2, #8]
		tx_hdr.IdType = FDCAN_STANDARD_ID;
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <prv_send_can_message+0x104>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
		tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <prv_send_can_message+0x104>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
		tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <prv_send_can_message+0x104>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
		tx_hdr.MessageMarker = 0;
 8001288:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <prv_send_can_message+0x104>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
		tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <prv_send_can_message+0x104>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
		tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001294:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <prv_send_can_message+0x104>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]

		switch (buffer->DLC) {
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d838      	bhi.n	8001314 <prv_send_can_message+0xd8>
 80012a2:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <prv_send_can_message+0x6c>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012cd 	.word	0x080012cd
 80012ac:	080012d5 	.word	0x080012d5
 80012b0:	080012dd 	.word	0x080012dd
 80012b4:	080012e5 	.word	0x080012e5
 80012b8:	080012ed 	.word	0x080012ed
 80012bc:	080012f5 	.word	0x080012f5
 80012c0:	080012fd 	.word	0x080012fd
 80012c4:	08001305 	.word	0x08001305
 80012c8:	0800130d 	.word	0x0800130d
		case 0:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <prv_send_can_message+0x104>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
			break;
 80012d2:	e020      	b.n	8001316 <prv_send_can_message+0xda>
		case 1:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <prv_send_can_message+0x104>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	60da      	str	r2, [r3, #12]
			break;
 80012da:	e01c      	b.n	8001316 <prv_send_can_message+0xda>
		case 2:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <prv_send_can_message+0x104>)
 80012de:	2202      	movs	r2, #2
 80012e0:	60da      	str	r2, [r3, #12]
			break;
 80012e2:	e018      	b.n	8001316 <prv_send_can_message+0xda>
		case 3:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <prv_send_can_message+0x104>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	60da      	str	r2, [r3, #12]
			break;
 80012ea:	e014      	b.n	8001316 <prv_send_can_message+0xda>
		case 4:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <prv_send_can_message+0x104>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	60da      	str	r2, [r3, #12]
			break;
 80012f2:	e010      	b.n	8001316 <prv_send_can_message+0xda>
		case 5:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <prv_send_can_message+0x104>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	60da      	str	r2, [r3, #12]
			break;
 80012fa:	e00c      	b.n	8001316 <prv_send_can_message+0xda>
		case 6:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 80012fc:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <prv_send_can_message+0x104>)
 80012fe:	2206      	movs	r2, #6
 8001300:	60da      	str	r2, [r3, #12]
			break;
 8001302:	e008      	b.n	8001316 <prv_send_can_message+0xda>
		case 7:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <prv_send_can_message+0x104>)
 8001306:	2207      	movs	r2, #7
 8001308:	60da      	str	r2, [r3, #12]
			break;
 800130a:	e004      	b.n	8001316 <prv_send_can_message+0xda>
		case 8:
			tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <prv_send_can_message+0x104>)
 800130e:	2208      	movs	r2, #8
 8001310:	60da      	str	r2, [r3, #12]
			break;
 8001312:	e000      	b.n	8001316 <prv_send_can_message+0xda>
		default: /* Hard error... */
			break;
 8001314:	bf00      	nop
		}

		/* Now add message to FIFO. Should not fail */
		success =
				HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6898      	ldr	r0, [r3, #8]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3305      	adds	r3, #5
 8001320:	461a      	mov	r2, r3
 8001322:	4907      	ldr	r1, [pc, #28]	@ (8001340 <prv_send_can_message+0x104>)
 8001324:	f005 f9ba 	bl	800669c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001328:	4603      	mov	r3, r0
				== HAL_OK;
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
		success =
 8001334:	73fb      	strb	r3, [r7, #15]
		success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
				&TxMailboxNum)
                				  == HAL_OK;
	}
#endif
	return success;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2400014c 	.word	0x2400014c

08001344 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	CO_ReturnError_t err = CO_ERROR_NO;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]

	/* Verify overflow */
	if (buffer->bufferFull) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00c      	beq.n	8001374 <CO_CANsend+0x30>
		if (!CANmodule->firstCANtxMessage) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <CO_CANsend+0x2c>
			/* don't set error, if bootup message is still on buffers */
			CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	8a5b      	ldrh	r3, [r3, #18]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	825a      	strh	r2, [r3, #18]
		}
		err = CO_ERROR_TX_OVERFLOW;
 8001370:	23f7      	movs	r3, #247	@ 0xf7
 8001372:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001374:	f3ef 8310 	mrs	r3, PRIMASK
 8001378:	613b      	str	r3, [r7, #16]
  return(result);
 800137a:	693a      	ldr	r2, [r7, #16]
	/*
	 * Send message to CAN network
	 *
	 * Lock interrupts for atomic operation
	 */
	CO_LOCK_CAN_SEND(CANmodule);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
	if (prv_send_can_message(CANmodule, buffer)) {
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff58 	bl	800123c <prv_send_can_message>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <CO_CANsend+0x58>
		CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	61da      	str	r2, [r3, #28]
 800139a:	e009      	b.n	80013b0 <CO_CANsend+0x6c>
	} else {
		buffer->bufferFull = true;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2201      	movs	r2, #1
 80013a0:	611a      	str	r2, [r3, #16]
		CANmodule->CANtxCount++;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	849a      	strh	r2, [r3, #36]	@ 0x24
	}
	CO_UNLOCK_CAN_SEND(CANmodule);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f383 8810 	msr	PRIMASK, r3
}
 80013bc:	bf00      	nop

	return err;
 80013be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 80013ca:	b480      	push	{r7}
 80013cc:	b087      	sub	sp, #28
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	uint32_t tpdoDeleted = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013d6:	f3ef 8310 	mrs	r3, PRIMASK
 80013da:	60fb      	str	r3, [r7, #12]
  return(result);
 80013dc:	68fa      	ldr	r2, [r7, #12]

	CO_LOCK_CAN_SEND(CANmodule);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80013e2:	b672      	cpsid	i
}
 80013e4:	bf00      	nop
	/* Abort message from CAN module, if there is synchronous TPDO.
	 * Take special care with this functionality. */
	if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <CO_CANclearPendingSyncPDOs+0x2e>
		/* clear TXREQ */
		CANmodule->bufferInhibitFlag = false;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
		tpdoDeleted = 1U;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if (CANmodule->CANtxCount > 0) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d032      	beq.n	8001468 <CO_CANclearPendingSyncPDOs+0x9e>
		for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	8a1b      	ldrh	r3, [r3, #16]
 8001406:	827b      	strh	r3, [r7, #18]
 8001408:	e02b      	b.n	8001462 <CO_CANclearPendingSyncPDOs+0x98>
			if (CANmodule->txArray[i].bufferFull) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68d9      	ldr	r1, [r3, #12]
 800140e:	8a7a      	ldrh	r2, [r7, #18]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01d      	beq.n	800145c <CO_CANclearPendingSyncPDOs+0x92>
				if (CANmodule->txArray[i].syncFlag) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68d9      	ldr	r1, [r3, #12]
 8001424:	8a7a      	ldrh	r2, [r7, #18]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d012      	beq.n	800145c <CO_CANclearPendingSyncPDOs+0x92>
					CANmodule->txArray[i].bufferFull = false;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	8a7a      	ldrh	r2, [r7, #18]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
					CANmodule->CANtxCount--;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800144e:	b29b      	uxth	r3, r3
 8001450:	3b01      	subs	r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	849a      	strh	r2, [r3, #36]	@ 0x24
					tpdoDeleted = 2U;
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
		for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800145c:	8a7b      	ldrh	r3, [r7, #18]
 800145e:	3b01      	subs	r3, #1
 8001460:	827b      	strh	r3, [r7, #18]
 8001462:	8a7b      	ldrh	r3, [r7, #18]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1d0      	bne.n	800140a <CO_CANclearPendingSyncPDOs+0x40>
				}
			}
		}
	}
	CO_UNLOCK_CAN_SEND(CANmodule);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f383 8810 	msr	PRIMASK, r3
}
 8001474:	bf00      	nop
	if (tpdoDeleted) {
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <CO_CANclearPendingSyncPDOs+0xc0>
		CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	8a5b      	ldrh	r3, [r3, #18]
 8001480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	825a      	strh	r2, [r3, #18]
	}
}
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	@ 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]

	CO_CANrxMsg_t rcvMsg;
	CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t index;            /* index of received message */
	uint32_t rcvMsgIdent;      /* identifier of the received message */
	uint8_t messageFound = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

#ifdef CO_STM32_FDCAN_Driver
	static FDCAN_RxHeaderTypeDef rx_hdr;
	/* Read received message from FIFO */
	if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	3305      	adds	r3, #5
 80014b4:	4a47      	ldr	r2, [pc, #284]	@ (80015d4 <prv_read_can_received_msg+0x13c>)
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f005 f94b 	bl	8006754 <HAL_FDCAN_GetRxMessage>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f040 8082 	bne.w	80015ca <prv_read_can_received_msg+0x132>
		return;
	}
	/* Setup identifier (with RTR) and length */
	rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 80014c6:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <prv_read_can_received_msg+0x13c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a42      	ldr	r2, [pc, #264]	@ (80015d4 <prv_read_can_received_msg+0x13c>)
 80014cc:	6892      	ldr	r2, [r2, #8]
 80014ce:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80014d2:	d102      	bne.n	80014da <prv_read_can_received_msg+0x42>
 80014d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014d8:	e000      	b.n	80014dc <prv_read_can_received_msg+0x44>
 80014da:	2200      	movs	r2, #0
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
	switch (rx_hdr.DataLength) {
 80014e0:	4b3c      	ldr	r3, [pc, #240]	@ (80015d4 <prv_read_can_received_msg+0x13c>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d830      	bhi.n	800154a <prv_read_can_received_msg+0xb2>
 80014e8:	a201      	add	r2, pc, #4	@ (adr r2, 80014f0 <prv_read_can_received_msg+0x58>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001515 	.word	0x08001515
 80014f4:	0800151b 	.word	0x0800151b
 80014f8:	08001521 	.word	0x08001521
 80014fc:	08001527 	.word	0x08001527
 8001500:	0800152d 	.word	0x0800152d
 8001504:	08001533 	.word	0x08001533
 8001508:	08001539 	.word	0x08001539
 800150c:	0800153f 	.word	0x0800153f
 8001510:	08001545 	.word	0x08001545
	case FDCAN_DLC_BYTES_0:
		rcvMsg.dlc = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	763b      	strb	r3, [r7, #24]
		break;
 8001518:	e01a      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_1:
		rcvMsg.dlc = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	763b      	strb	r3, [r7, #24]
		break;
 800151e:	e017      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_2:
		rcvMsg.dlc = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	763b      	strb	r3, [r7, #24]
		break;
 8001524:	e014      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_3:
		rcvMsg.dlc = 3;
 8001526:	2303      	movs	r3, #3
 8001528:	763b      	strb	r3, [r7, #24]
		break;
 800152a:	e011      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_4:
		rcvMsg.dlc = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	763b      	strb	r3, [r7, #24]
		break;
 8001530:	e00e      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_5:
		rcvMsg.dlc = 5;
 8001532:	2305      	movs	r3, #5
 8001534:	763b      	strb	r3, [r7, #24]
		break;
 8001536:	e00b      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_6:
		rcvMsg.dlc = 6;
 8001538:	2306      	movs	r3, #6
 800153a:	763b      	strb	r3, [r7, #24]
		break;
 800153c:	e008      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_7:
		rcvMsg.dlc = 7;
 800153e:	2307      	movs	r3, #7
 8001540:	763b      	strb	r3, [r7, #24]
		break;
 8001542:	e005      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	case FDCAN_DLC_BYTES_8:
		rcvMsg.dlc = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	763b      	strb	r3, [r7, #24]
		break;
 8001548:	e002      	b.n	8001550 <prv_read_can_received_msg+0xb8>
	default:
		rcvMsg.dlc = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	763b      	strb	r3, [r7, #24]
		break; /* Invalid length when more than 8 */
 800154e:	bf00      	nop
	}
	rcvMsgIdent = rcvMsg.ident;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24

	/*
	 * Hardware filters are not used for the moment
	 * \todo: Implement hardware filters...
	 */
	if (CANModule_local->useCANrxFilters) {
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <prv_read_can_received_msg+0x140>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <prv_read_can_received_msg+0xca>
		__BKPT(0);
 800155e:	be00      	bkpt	0x0000
 8001560:	e01f      	b.n	80015a2 <prv_read_can_received_msg+0x10a>
	} else {
		/*
		 * We are not using hardware filters, hence it is necessary
		 * to manually match received message ID with all buffers
		 */
		buffer = CANModule_local->rxArray;
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <prv_read_can_received_msg+0x140>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <prv_read_can_received_msg+0x140>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	891b      	ldrh	r3, [r3, #8]
 8001570:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001572:	e013      	b.n	800159c <prv_read_can_received_msg+0x104>
			if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	4053      	eors	r3, r2
 800157e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001580:	8852      	ldrh	r2, [r2, #2]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <prv_read_can_received_msg+0xf8>
				messageFound = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
				break;
 800158e:	e008      	b.n	80015a2 <prv_read_can_received_msg+0x10a>
		for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8001590:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001592:	3b01      	subs	r3, #1
 8001594:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001598:	330c      	adds	r3, #12
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800159c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e8      	bne.n	8001574 <prv_read_can_received_msg+0xdc>
			}
		}
	}

	/* Call specific function, which will process the message */
	if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 80015a2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d010      	beq.n	80015cc <prv_read_can_received_msg+0x134>
 80015aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00d      	beq.n	80015cc <prv_read_can_received_msg+0x134>
 80015b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <prv_read_can_received_msg+0x134>
		buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80015b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015be:	6852      	ldr	r2, [r2, #4]
 80015c0:	f107 0114 	add.w	r1, r7, #20
 80015c4:	4610      	mov	r0, r2
 80015c6:	4798      	blx	r3
 80015c8:	e000      	b.n	80015cc <prv_read_can_received_msg+0x134>
		return;
 80015ca:	bf00      	nop
	}
}
 80015cc:	3730      	adds	r7, #48	@ 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	24000170 	.word	0x24000170
 80015d8:	24000148 	.word	0x24000148

080015dc <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	if(hfdcan->Instance == FDCAN1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a08      	ldr	r2, [pc, #32]	@ (800160c <HAL_FDCAN_RxFifo0Callback+0x30>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d109      	bne.n	8001604 <HAL_FDCAN_RxFifo0Callback+0x28>
	{
		if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_FDCAN_RxFifo0Callback+0x28>
			prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	2140      	movs	r1, #64	@ 0x40
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff4a 	bl	8001498 <prv_read_can_received_msg>

	if(hfdcan->Instance == FDCAN2)
	{

	}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	4000a000 	.word	0x4000a000

08001610 <HAL_FDCAN_RxFifo1Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo1ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo1ITs) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	if(hfdcan->Instance == FDCAN2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <HAL_FDCAN_RxFifo1Callback+0x30>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d109      	bne.n	8001638 <HAL_FDCAN_RxFifo1Callback+0x28>
	{
		if (RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) {
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_FDCAN_RxFifo1Callback+0x28>
			prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO1, RxFifo1ITs);
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	2141      	movs	r1, #65	@ 0x41
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff30 	bl	8001498 <prv_read_can_received_msg>
	}
	if(hfdcan->Instance == FDCAN2)
	{

	}
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	4000a400 	.word	0x4000a400

08001644 <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
	CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
	if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001664:	b29b      	uxth	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d045      	beq.n	80016f6 <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
		CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 800166a:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	617b      	str	r3, [r7, #20]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
		CO_LOCK_CAN_SEND(CANModule_local);
 8001672:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8001674:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001676:	f3ef 8210 	mrs	r2, PRIMASK
 800167a:	60fa      	str	r2, [r7, #12]
  return(result);
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
		for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	8a1b      	ldrh	r3, [r3, #16]
 800168a:	827b      	strh	r3, [r7, #18]
 800168c:	e021      	b.n	80016d2 <HAL_FDCAN_TxBufferCompleteCallback+0x8e>
			/* Try to send message */
			if (buffer->bufferFull) {
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d017      	beq.n	80016c6 <HAL_FDCAN_TxBufferCompleteCallback+0x82>
				if (prv_send_can_message(CANModule_local, buffer)) {
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6979      	ldr	r1, [r7, #20]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fdcd 	bl	800123c <prv_send_can_message>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00e      	beq.n	80016c6 <HAL_FDCAN_TxBufferCompleteCallback+0x82>
					buffer->bufferFull = false;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
					CANModule_local->CANtxCount--;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80016b4:	b292      	uxth	r2, r2
 80016b6:	3a01      	subs	r2, #1
 80016b8:	b292      	uxth	r2, r2
 80016ba:	849a      	strh	r2, [r3, #36]	@ 0x24
					CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	6952      	ldr	r2, [r2, #20]
 80016c4:	61da      	str	r2, [r3, #28]
		for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 80016c6:	8a7b      	ldrh	r3, [r7, #18]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	827b      	strh	r3, [r7, #18]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3318      	adds	r3, #24
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1da      	bne.n	800168e <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
				}
			}
		}
		/* Clear counter if no more messages */
		if (i == 0U) {
 80016d8:	8a7b      	ldrh	r3, [r7, #18]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_FDCAN_TxBufferCompleteCallback+0xa2>
			CANModule_local->CANtxCount = 0U;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
		CO_UNLOCK_CAN_SEND(CANModule_local);
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f383 8810 	msr	PRIMASK, r3
}
 80016f4:	bf00      	nop
	}
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000148 	.word	0x24000148

08001704 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	@ 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800170a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2224      	movs	r2, #36	@ 0x24
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00d fadd 	bl	800ecdc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001722:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001724:	4a32      	ldr	r2, [pc, #200]	@ (80017f0 <MX_ADC1_Init+0xec>)
 8001726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800172e:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001734:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800173c:	2204      	movs	r2, #4
 800173e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001742:	2200      	movs	r2, #0
 8001744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001746:	4b29      	ldr	r3, [pc, #164]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800174e:	2201      	movs	r2, #1
 8001750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175a:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001774:	2200      	movs	r2, #0
 8001776:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_ADC1_Init+0xe8>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001782:	2201      	movs	r2, #1
 8001784:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001786:	4819      	ldr	r0, [pc, #100]	@ (80017ec <MX_ADC1_Init+0xe8>)
 8001788:	f002 fcbc 	bl	8004104 <HAL_ADC_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001792:	f001 f897 	bl	80028c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800179a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_ADC1_Init+0xe8>)
 80017a2:	f003 fc9f 	bl	80050e4 <HAL_ADCEx_MultiModeConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017ac:	f001 f88a 	bl	80028c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017b0:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <MX_ADC1_Init+0xf0>)
 80017b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b4:	2306      	movs	r3, #6
 80017b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017bc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017c2:	2304      	movs	r3, #4
 80017c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	@ (80017ec <MX_ADC1_Init+0xe8>)
 80017d6:	f002 fe9d 	bl	8004514 <HAL_ADC_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80017e0:	f001 f870 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	@ 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	24000198 	.word	0x24000198
 80017f0:	40022000 	.word	0x40022000
 80017f4:	19200040 	.word	0x19200040

080017f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a18      	ldr	r2, [pc, #96]	@ (8001878 <HAL_ADC_MspInit+0x80>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12a      	bne.n	8001870 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <HAL_ADC_MspInit+0x84>)
 800181c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001820:	4a16      	ldr	r2, [pc, #88]	@ (800187c <HAL_ADC_MspInit+0x84>)
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_ADC_MspInit+0x84>)
 800182c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001838:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_ADC_MspInit+0x84>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183e:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <HAL_ADC_MspInit+0x84>)
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_ADC_MspInit+0x84>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185c:	2303      	movs	r3, #3
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	@ (8001880 <HAL_ADC_MspInit+0x88>)
 800186c:	f005 fdd6 	bl	800741c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	@ 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40022000 	.word	0x40022000
 800187c:	58024400 	.word	0x58024400
 8001880:	58021400 	.word	0x58021400

08001884 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001888:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 800188a:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <MX_FDCAN1_Init+0xc4>)
 800188c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800188e:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800189a:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 800189c:	2201      	movs	r2, #1
 800189e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018a0:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018a6:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 23;
 80018b8:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018ba:	2217      	movs	r2, #23
 80018bc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 12;
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018cc:	220c      	movs	r2, #12
 80018ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 12;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018d8:	220c      	movs	r2, #12
 80018da:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80018e2:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 10;
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001902:	2204      	movs	r2, #4
 8001904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 10;
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001908:	220a      	movs	r2, #10
 800190a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 800190e:	2205      	movs	r2, #5
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 10;
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001914:	220a      	movs	r2, #10
 8001916:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 10;
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 800191a:	220a      	movs	r2, #10
 800191c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 10;
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001920:	220a      	movs	r2, #10
 8001922:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001924:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001926:	2200      	movs	r2, #0
 8001928:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 800192c:	2205      	movs	r2, #5
 800192e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <MX_FDCAN1_Init+0xc0>)
 8001932:	f004 fcd5 	bl	80062e0 <HAL_FDCAN_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800193c:	f000 ffc2 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	240002b8 	.word	0x240002b8
 8001948:	4000a000 	.word	0x4000a000

0800194c <HAL_FDCAN_MspInit>:
}

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	@ 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa0 <HAL_FDCAN_MspInit+0x154>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d148      	bne.n	8001a00 <HAL_FDCAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800196e:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <HAL_FDCAN_MspInit+0x158>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa4 <HAL_FDCAN_MspInit+0x158>)
 8001976:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001978:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa4 <HAL_FDCAN_MspInit+0x158>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10e      	bne.n	800199e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001980:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001982:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001986:	4a48      	ldr	r2, [pc, #288]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800198c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001990:	4b45      	ldr	r3, [pc, #276]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001992:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	4b42      	ldr	r3, [pc, #264]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a4:	4a40      	ldr	r2, [pc, #256]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ae:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019ce:	2309      	movs	r3, #9
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4834      	ldr	r0, [pc, #208]	@ (8001aac <HAL_FDCAN_MspInit+0x160>)
 80019da:	f005 fd1f 	bl	800741c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2013      	movs	r0, #19
 80019e4:	f003 fd3b 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80019e8:	2013      	movs	r0, #19
 80019ea:	f003 fd52 	bl	8005492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	2015      	movs	r0, #21
 80019f4:	f003 fd33 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80019f8:	2015      	movs	r0, #21
 80019fa:	f003 fd4a 	bl	8005492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80019fe:	e04b      	b.n	8001a98 <HAL_FDCAN_MspInit+0x14c>
  else if(fdcanHandle->Instance==FDCAN2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab0 <HAL_FDCAN_MspInit+0x164>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d146      	bne.n	8001a98 <HAL_FDCAN_MspInit+0x14c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001a0a:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <HAL_FDCAN_MspInit+0x158>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_FDCAN_MspInit+0x158>)
 8001a12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <HAL_FDCAN_MspInit+0x158>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10e      	bne.n	8001a3a <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001a1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001a22:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a28:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001a2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <HAL_FDCAN_MspInit+0x15c>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a58:	2360      	movs	r3, #96	@ 0x60
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001a68:	2309      	movs	r3, #9
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	4810      	ldr	r0, [pc, #64]	@ (8001ab4 <HAL_FDCAN_MspInit+0x168>)
 8001a74:	f005 fcd2 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2014      	movs	r0, #20
 8001a7e:	f003 fcee 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001a82:	2014      	movs	r0, #20
 8001a84:	f003 fd05 	bl	8005492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2016      	movs	r0, #22
 8001a8e:	f003 fce6 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001a92:	2016      	movs	r0, #22
 8001a94:	f003 fcfd 	bl	8005492 <HAL_NVIC_EnableIRQ>
}
 8001a98:	bf00      	nop
 8001a9a:	3730      	adds	r7, #48	@ 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	4000a000 	.word	0x4000a000
 8001aa4:	240003f8 	.word	0x240003f8
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58020000 	.word	0x58020000
 8001ab0:	4000a400 	.word	0x4000a400
 8001ab4:	58020400 	.word	0x58020400

08001ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	@ 0x38
 8001abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	4b92      	ldr	r3, [pc, #584]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a90      	ldr	r2, [pc, #576]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001ad6:	f043 0310 	orr.w	r3, r3, #16
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b8e      	ldr	r3, [pc, #568]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aec:	4b8a      	ldr	r3, [pc, #552]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af2:	4a89      	ldr	r2, [pc, #548]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afc:	4b86      	ldr	r3, [pc, #536]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0a:	4b83      	ldr	r3, [pc, #524]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b10:	4a81      	ldr	r2, [pc, #516]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b28:	4b7b      	ldr	r3, [pc, #492]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b38:	4b77      	ldr	r3, [pc, #476]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b74      	ldr	r3, [pc, #464]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b4c:	4a72      	ldr	r2, [pc, #456]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b56:	4b70      	ldr	r3, [pc, #448]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b6c      	ldr	r3, [pc, #432]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b74:	4b68      	ldr	r3, [pc, #416]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b82:	4b65      	ldr	r3, [pc, #404]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b88:	4a63      	ldr	r2, [pc, #396]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b92:	4b61      	ldr	r3, [pc, #388]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb0:	4b59      	ldr	r3, [pc, #356]	@ (8001d18 <MX_GPIO_Init+0x260>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2130      	movs	r1, #48	@ 0x30
 8001bc2:	4856      	ldr	r0, [pc, #344]	@ (8001d1c <MX_GPIO_Init+0x264>)
 8001bc4:	f005 fdd2 	bl	800776c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_ERR_Pin|LED_SYS_Pin|LED_BOOT_Pin|CTRL_2_Pin
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8001bce:	4854      	ldr	r0, [pc, #336]	@ (8001d20 <MX_GPIO_Init+0x268>)
 8001bd0:	f005 fdcc 	bl	800776c <HAL_GPIO_WritePin>
                          |CTRL_PC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f640 4107 	movw	r1, #3079	@ 0xc07
 8001bda:	4852      	ldr	r0, [pc, #328]	@ (8001d24 <MX_GPIO_Init+0x26c>)
 8001bdc:	f005 fdc6 	bl	800776c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CTRL_9_Pin|CTRL_10_Pin|CTRL_8_Pin|CTRL_7_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001be6:	4850      	ldr	r0, [pc, #320]	@ (8001d28 <MX_GPIO_Init+0x270>)
 8001be8:	f005 fdc0 	bl	800776c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CTRL_5_Pin|CTRL_6_Pin|CTRL_3_Pin|CTRL_4_Pin
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 7166 	mov.w	r1, #920	@ 0x398
 8001bf2:	484e      	ldr	r0, [pc, #312]	@ (8001d2c <MX_GPIO_Init+0x274>)
 8001bf4:	f005 fdba 	bl	800776c <HAL_GPIO_WritePin>
                          |CTRL_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bf8:	2330      	movs	r3, #48	@ 0x30
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4843      	ldr	r0, [pc, #268]	@ (8001d1c <MX_GPIO_Init+0x264>)
 8001c10:	f005 fc04 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ERR_Pin LED_SYS_Pin LED_BOOT_Pin CTRL_2_Pin
                           CTRL_PC_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin|LED_SYS_Pin|LED_BOOT_Pin|CTRL_2_Pin
 8001c14:	f641 4303 	movw	r3, #7171	@ 0x1c03
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CTRL_PC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	483c      	ldr	r0, [pc, #240]	@ (8001d20 <MX_GPIO_Init+0x268>)
 8001c2e:	f005 fbf5 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD0 PD1
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1
 8001c32:	f640 4307 	movw	r3, #3079	@ 0xc07
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4836      	ldr	r0, [pc, #216]	@ (8001d24 <MX_GPIO_Init+0x26c>)
 8001c4c:	f005 fbe6 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_9_Pin CTRL_10_Pin CTRL_8_Pin CTRL_7_Pin */
  GPIO_InitStruct.Pin = CTRL_9_Pin|CTRL_10_Pin|CTRL_8_Pin|CTRL_7_Pin;
 8001c50:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	482f      	ldr	r0, [pc, #188]	@ (8001d28 <MX_GPIO_Init+0x270>)
 8001c6a:	f005 fbd7 	bl	800741c <HAL_GPIO_Init>

  /*Configure GPIO pins : CTRL_5_Pin CTRL_6_Pin CTRL_3_Pin CTRL_4_Pin
                           CTRL_1_Pin */
  GPIO_InitStruct.Pin = CTRL_5_Pin|CTRL_6_Pin|CTRL_3_Pin|CTRL_4_Pin
 8001c6e:	f44f 7366 	mov.w	r3, #920	@ 0x398
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
                          |CTRL_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4829      	ldr	r0, [pc, #164]	@ (8001d2c <MX_GPIO_Init+0x274>)
 8001c88:	f005 fbc8 	bl	800741c <HAL_GPIO_Init>

  // Configure PB14 (TX) and PB15 (RX) as Alternate Function pins
        GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 8001c8c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;           // Alternate function, push-pull mode
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Pull = GPIO_NOPULL;               // No pull-up or pull-down resistors
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;     // High speed for USART communication
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Alternate = GPIO_AF4_USART1;      // Alternate function AF7 for USART1
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34

        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);           // Initialize the GPIOB pins
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4820      	ldr	r0, [pc, #128]	@ (8001d2c <MX_GPIO_Init+0x274>)
 8001caa:	f005 fbb7 	bl	800741c <HAL_GPIO_Init>

        // Configure PB14 (TX) and PB15 (RX) as Alternate Function pins
          GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001cae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
          GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;           // Alternate function, push-pull mode
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
          GPIO_InitStruct.Pull = GPIO_NOPULL;               // No pull-up or pull-down resistors
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
          GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;     // High speed for USART communication
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
          GPIO_InitStruct.Alternate = GPIO_AF7_USART3;      // Alternate function AF7 for USART1
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34

          HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);           // Initialize the GPIOB pins
 8001cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4816      	ldr	r0, [pc, #88]	@ (8001d24 <MX_GPIO_Init+0x26c>)
 8001ccc:	f005 fba6 	bl	800741c <HAL_GPIO_Init>

          // Configure PB14 (TX) and PB15 (RX) as Alternate Function pins
            GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001cd0:	23c0      	movs	r3, #192	@ 0xc0
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
            GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;           // Alternate function, push-pull mode
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
            GPIO_InitStruct.Pull = GPIO_NOPULL;               // No pull-up or pull-down resistors
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;     // High speed for USART communication
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	@ 0x30
            GPIO_InitStruct.Alternate = GPIO_AF7_USART6;      // Alternate function AF7 for USART1
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34

            HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);           // Initialize the GPIOB pins
 8001ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4811      	ldr	r0, [pc, #68]	@ (8001d30 <MX_GPIO_Init+0x278>)
 8001cec:	f005 fb96 	bl	800741c <HAL_GPIO_Init>


            // Configure PB14 (TX) and PB15 (RX) as Alternate Function pins
              GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2;
 8001cf0:	230c      	movs	r3, #12
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;           // Alternate function, push-pull mode
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
              GPIO_InitStruct.Pull = GPIO_NOPULL;               // No pull-up or pull-down resistors
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;     // High speed for USART communication
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
              GPIO_InitStruct.Alternate = GPIO_AF4_USART10;      // Alternate function AF7 for USART1
 8001d00:	2304      	movs	r3, #4
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34

              HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);           // Initialize the GPIOB pins
 8001d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4805      	ldr	r0, [pc, #20]	@ (8001d20 <MX_GPIO_Init+0x268>)
 8001d0c:	f005 fb86 	bl	800741c <HAL_GPIO_Init>

}
 8001d10:	bf00      	nop
 8001d12:	3738      	adds	r7, #56	@ 0x38
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	58020000 	.word	0x58020000
 8001d20:	58021000 	.word	0x58021000
 8001d24:	58020c00 	.word	0x58020c00
 8001d28:	58021800 	.word	0x58021800
 8001d2c:	58020400 	.word	0x58020400
 8001d30:	58020800 	.word	0x58020800

08001d34 <guide_sensor1_send_real_time_init>:
};

#define NUM_KEYS (sizeof(knownKeys) / sizeof(knownKeys[0]));

void guide_sensor1_send_real_time_init()
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	cmd1=B_INDEX_VALUE;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <guide_sensor1_send_real_time_init+0x14>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	24000474 	.word	0x24000474

08001d4c <guide_sensor1_send_real_time>:




// Function to handle the state machine and execute commands
void guide_sensor1_send_real_time() {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	switch (cmd1) {
 8001d50:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	f200 80c0 	bhi.w	8001eda <guide_sensor1_send_real_time+0x18e>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <guide_sensor1_send_real_time+0x14>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d85 	.word	0x08001d85
 8001d64:	08001dab 	.word	0x08001dab
 8001d68:	08001dd1 	.word	0x08001dd1
 8001d6c:	08001df7 	.word	0x08001df7
 8001d70:	08001e1d 	.word	0x08001e1d
 8001d74:	08001e43 	.word	0x08001e43
 8001d78:	08001e69 	.word	0x08001e69
 8001d7c:	08001e8f 	.word	0x08001e8f
 8001d80:	08001eb5 	.word	0x08001eb5
	case B_INDEX_VALUE:
		if (HAL_UART_Transmit(&huart3, buffer_B, sizeof(buffer_B), HAL_MAX_DELAY) != HAL_OK) {
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4956      	ldr	r1, [pc, #344]	@ (8001ee4 <guide_sensor1_send_real_time+0x198>)
 8001d8c:	4856      	ldr	r0, [pc, #344]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001d8e:	f00a f93f 	bl	800c010 <HAL_UART_Transmit>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <guide_sensor1_send_real_time+0x50>
			Error_Handler();
 8001d98:	f000 fd94 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001d9c:	2064      	movs	r0, #100	@ 0x64
 8001d9e:	f001 ff0d 	bl	8003bbc <HAL_Delay>
		cmd1=MGD;
 8001da2:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
		break;
 8001da8:	e098      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case MGD:
		//if(HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY)
		//{
		if (HAL_UART_Transmit(&huart3, buffer_MGD, sizeof(buffer_MGD), HAL_MAX_DELAY) != HAL_OK) {
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	2207      	movs	r2, #7
 8001db0:	494e      	ldr	r1, [pc, #312]	@ (8001eec <guide_sensor1_send_real_time+0x1a0>)
 8001db2:	484d      	ldr	r0, [pc, #308]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001db4:	f00a f92c 	bl	800c010 <HAL_UART_Transmit>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <guide_sensor1_send_real_time+0x76>
			Error_Handler();  // Define your error handler here
 8001dbe:	f000 fd81 	bl	80028c4 <Error_Handler>
		//}
		}
		HAL_Delay(100);
 8001dc2:	2064      	movs	r0, #100	@ 0x64
 8001dc4:	f001 fefa 	bl	8003bbc <HAL_Delay>
		cmd1=MGM;
 8001dc8:	4b45      	ldr	r3, [pc, #276]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	701a      	strb	r2, [r3, #0]
		break;
 8001dce:	e085      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case MGM:
		if (HAL_UART_Transmit(&huart3, buffer_MGM, sizeof(buffer_MGM), HAL_MAX_DELAY) != HAL_OK) {
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4946      	ldr	r1, [pc, #280]	@ (8001ef0 <guide_sensor1_send_real_time+0x1a4>)
 8001dd8:	4843      	ldr	r0, [pc, #268]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001dda:	f00a f919 	bl	800c010 <HAL_UART_Transmit>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <guide_sensor1_send_real_time+0x9c>
			Error_Handler();  // Define your error handler here
 8001de4:	f000 fd6e 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001de8:	2064      	movs	r0, #100	@ 0x64
 8001dea:	f001 fee7 	bl	8003bbc <HAL_Delay>
		cmd1=MZ;
 8001dee:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001df0:	2203      	movs	r2, #3
 8001df2:	701a      	strb	r2, [r3, #0]
		break;
 8001df4:	e072      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case MZ:
		if (HAL_UART_Transmit(&huart3, buffer_MZ, sizeof(buffer_MZ), HAL_MAX_DELAY) != HAL_OK) {
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	493d      	ldr	r1, [pc, #244]	@ (8001ef4 <guide_sensor1_send_real_time+0x1a8>)
 8001dfe:	483a      	ldr	r0, [pc, #232]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001e00:	f00a f906 	bl	800c010 <HAL_UART_Transmit>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <guide_sensor1_send_real_time+0xc2>
			Error_Handler();  // Define your error handler here
 8001e0a:	f000 fd5b 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001e0e:	2064      	movs	r0, #100	@ 0x64
 8001e10:	f001 fed4 	bl	8003bbc <HAL_Delay>
		cmd1=T;
 8001e14:	4b32      	ldr	r3, [pc, #200]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001e16:	2204      	movs	r2, #4
 8001e18:	701a      	strb	r2, [r3, #0]
		break;
 8001e1a:	e05f      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case T:
		if (HAL_UART_Transmit(&huart3, buffer_T, sizeof(buffer_T), HAL_MAX_DELAY) != HAL_OK) {
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	2207      	movs	r2, #7
 8001e22:	4935      	ldr	r1, [pc, #212]	@ (8001ef8 <guide_sensor1_send_real_time+0x1ac>)
 8001e24:	4830      	ldr	r0, [pc, #192]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001e26:	f00a f8f3 	bl	800c010 <HAL_UART_Transmit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <guide_sensor1_send_real_time+0xe8>
			Error_Handler();  // Define your error handler here
 8001e30:	f000 fd48 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001e34:	2064      	movs	r0, #100	@ 0x64
 8001e36:	f001 fec1 	bl	8003bbc <HAL_Delay>
		cmd1=MGT;
 8001e3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	701a      	strb	r2, [r3, #0]
		break;
 8001e40:	e04c      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case MGT:
		if (HAL_UART_Transmit(&huart3, buffer_MGT, sizeof(buffer_MGT), HAL_MAX_DELAY) != HAL_OK) {
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	2207      	movs	r2, #7
 8001e48:	492c      	ldr	r1, [pc, #176]	@ (8001efc <guide_sensor1_send_real_time+0x1b0>)
 8001e4a:	4827      	ldr	r0, [pc, #156]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001e4c:	f00a f8e0 	bl	800c010 <HAL_UART_Transmit>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <guide_sensor1_send_real_time+0x10e>
			Error_Handler();  // Define your error handler here
 8001e56:	f000 fd35 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001e5a:	2064      	movs	r0, #100	@ 0x64
 8001e5c:	f001 feae 	bl	8003bbc <HAL_Delay>
		cmd1=VAR_INDEX_VALUE;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001e62:	2206      	movs	r2, #6
 8001e64:	701a      	strb	r2, [r3, #0]
		break;
 8001e66:	e039      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case VAR_INDEX_VALUE:
		if (HAL_UART_Transmit(&huart3, buffer_VAR, sizeof(buffer_VAR), HAL_MAX_DELAY) != HAL_OK) {
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	4924      	ldr	r1, [pc, #144]	@ (8001f00 <guide_sensor1_send_real_time+0x1b4>)
 8001e70:	481d      	ldr	r0, [pc, #116]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001e72:	f00a f8cd 	bl	800c010 <HAL_UART_Transmit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <guide_sensor1_send_real_time+0x134>
			Error_Handler();  // Define your error handler here
 8001e7c:	f000 fd22 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001e80:	2064      	movs	r0, #100	@ 0x64
 8001e82:	f001 fe9b 	bl	8003bbc <HAL_Delay>
		cmd1=MGS;
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
		break;
 8001e8c:	e026      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case MGS:
		if (HAL_UART_Transmit(&huart3, buffer_MGS, sizeof(buffer_MGS), HAL_MAX_DELAY) != HAL_OK) {
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	2207      	movs	r2, #7
 8001e94:	491b      	ldr	r1, [pc, #108]	@ (8001f04 <guide_sensor1_send_real_time+0x1b8>)
 8001e96:	4814      	ldr	r0, [pc, #80]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001e98:	f00a f8ba 	bl	800c010 <HAL_UART_Transmit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <guide_sensor1_send_real_time+0x15a>
			Error_Handler();  // Define your error handler here
 8001ea2:	f000 fd0f 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001ea6:	2064      	movs	r0, #100	@ 0x64
 8001ea8:	f001 fe88 	bl	8003bbc <HAL_Delay>
		cmd1=MGX;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001eae:	2208      	movs	r2, #8
 8001eb0:	701a      	strb	r2, [r3, #0]
		break;
 8001eb2:	e013      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	case MGX:
		if (HAL_UART_Transmit(&huart3, buffer_MGX, sizeof(buffer_MGX), HAL_MAX_DELAY) != HAL_OK) {
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	2207      	movs	r2, #7
 8001eba:	4913      	ldr	r1, [pc, #76]	@ (8001f08 <guide_sensor1_send_real_time+0x1bc>)
 8001ebc:	480a      	ldr	r0, [pc, #40]	@ (8001ee8 <guide_sensor1_send_real_time+0x19c>)
 8001ebe:	f00a f8a7 	bl	800c010 <HAL_UART_Transmit>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <guide_sensor1_send_real_time+0x180>
			Error_Handler();  // Define your error handler here
 8001ec8:	f000 fcfc 	bl	80028c4 <Error_Handler>
		}
		HAL_Delay(100);
 8001ecc:	2064      	movs	r0, #100	@ 0x64
 8001ece:	f001 fe75 	bl	8003bbc <HAL_Delay>
		cmd1=B_INDEX_VALUE;
 8001ed2:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <guide_sensor1_send_real_time+0x194>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
		break;
 8001ed8:	e000      	b.n	8001edc <guide_sensor1_send_real_time+0x190>
	default:
		break;
 8001eda:	bf00      	nop
	}
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	24000474 	.word	0x24000474
 8001ee4:	24000000 	.word	0x24000000
 8001ee8:	240006c8 	.word	0x240006c8
 8001eec:	24000008 	.word	0x24000008
 8001ef0:	24000010 	.word	0x24000010
 8001ef4:	24000018 	.word	0x24000018
 8001ef8:	24000020 	.word	0x24000020
 8001efc:	24000028 	.word	0x24000028
 8001f00:	24000030 	.word	0x24000030
 8001f04:	24000038 	.word	0x24000038
 8001f08:	24000040 	.word	0x24000040

08001f0c <getCommandEnum>:
}



Parse_data getCommandEnum(const char *key)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	if (strcmp(key, "B") == 0) return B_INDEX_VALUE_1;
 8001f14:	4989      	ldr	r1, [pc, #548]	@ (800213c <getCommandEnum+0x230>)
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe f9fa 	bl	8000310 <strcmp>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <getCommandEnum+0x1a>
 8001f22:	2300      	movs	r3, #0
 8001f24:	e105      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MGD") == 0) return MGD_1;
 8001f26:	4986      	ldr	r1, [pc, #536]	@ (8002140 <getCommandEnum+0x234>)
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe f9f1 	bl	8000310 <strcmp>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <getCommandEnum+0x2c>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0fc      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MGM") == 0) return MGM_1;
 8001f38:	4982      	ldr	r1, [pc, #520]	@ (8002144 <getCommandEnum+0x238>)
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe f9e8 	bl	8000310 <strcmp>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <getCommandEnum+0x3e>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e0f3      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MZ") == 0) return MZ_1;
 8001f4a:	497f      	ldr	r1, [pc, #508]	@ (8002148 <getCommandEnum+0x23c>)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7fe f9df 	bl	8000310 <strcmp>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <getCommandEnum+0x50>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0ea      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "T") == 0) return T_1;
 8001f5c:	497b      	ldr	r1, [pc, #492]	@ (800214c <getCommandEnum+0x240>)
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe f9d6 	bl	8000310 <strcmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <getCommandEnum+0x62>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e0e1      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MGT") == 0) return MGT_1;
 8001f6e:	4978      	ldr	r1, [pc, #480]	@ (8002150 <getCommandEnum+0x244>)
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe f9cd 	bl	8000310 <strcmp>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <getCommandEnum+0x74>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	e0d8      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "VAR") == 0) return VAR_INDEX_VALUE_1;
 8001f80:	4974      	ldr	r1, [pc, #464]	@ (8002154 <getCommandEnum+0x248>)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe f9c4 	bl	8000310 <strcmp>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <getCommandEnum+0x86>
 8001f8e:	2306      	movs	r3, #6
 8001f90:	e0cf      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MGS") == 0) return MGS_1;
 8001f92:	4971      	ldr	r1, [pc, #452]	@ (8002158 <getCommandEnum+0x24c>)
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7fe f9bb 	bl	8000310 <strcmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <getCommandEnum+0x98>
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	e0c6      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MGX") == 0) return MGX_1;
 8001fa4:	496d      	ldr	r1, [pc, #436]	@ (800215c <getCommandEnum+0x250>)
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe f9b2 	bl	8000310 <strcmp>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <getCommandEnum+0xaa>
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	e0bd      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "B") == 0) return SET_B_1;
 8001fb6:	4961      	ldr	r1, [pc, #388]	@ (800213c <getCommandEnum+0x230>)
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe f9a9 	bl	8000310 <strcmp>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <getCommandEnum+0xbc>
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	e0b4      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "R") == 0) return SET_R_1;
 8001fc8:	4965      	ldr	r1, [pc, #404]	@ (8002160 <getCommandEnum+0x254>)
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe f9a0 	bl	8000310 <strcmp>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <getCommandEnum+0xce>
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	e0ab      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TV") == 0) return SET_TV_1;
 8001fda:	4962      	ldr	r1, [pc, #392]	@ (8002164 <getCommandEnum+0x258>)
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe f997 	bl	8000310 <strcmp>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <getCommandEnum+0xe0>
 8001fe8:	230b      	movs	r3, #11
 8001fea:	e0a2      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "VAR") == 0) return SET_VAR_1;
 8001fec:	4959      	ldr	r1, [pc, #356]	@ (8002154 <getCommandEnum+0x248>)
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe f98e 	bl	8000310 <strcmp>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <getCommandEnum+0xf2>
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	e099      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TX") == 0) return SET_TX_1;
 8001ffe:	495a      	ldr	r1, [pc, #360]	@ (8002168 <getCommandEnum+0x25c>)
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe f985 	bl	8000310 <strcmp>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <getCommandEnum+0x104>
 800200c:	230d      	movs	r3, #13
 800200e:	e090      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "ZER") == 0) return SET_ZER_1;
 8002010:	4956      	ldr	r1, [pc, #344]	@ (800216c <getCommandEnum+0x260>)
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe f97c 	bl	8000310 <strcmp>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <getCommandEnum+0x116>
 800201e:	230e      	movs	r3, #14
 8002020:	e087      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "ANAM") == 0) return CMD_ANAM_1;
 8002022:	4953      	ldr	r1, [pc, #332]	@ (8002170 <getCommandEnum+0x264>)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7fe f973 	bl	8000310 <strcmp>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <getCommandEnum+0x128>
 8002030:	230f      	movs	r3, #15
 8002032:	e07e      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "BADJ") == 0) return CMD_BADJ_1;
 8002034:	494f      	ldr	r1, [pc, #316]	@ (8002174 <getCommandEnum+0x268>)
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe f96a 	bl	8000310 <strcmp>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <getCommandEnum+0x13a>
 8002042:	2310      	movs	r3, #16
 8002044:	e075      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "BRUN") == 0) return CMD_BRUN_1;
 8002046:	494c      	ldr	r1, [pc, #304]	@ (8002178 <getCommandEnum+0x26c>)
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe f961 	bl	8000310 <strcmp>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <getCommandEnum+0x14c>
 8002054:	2311      	movs	r3, #17
 8002056:	e06c      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "DIM") == 0) return CMD_DIM_1;
 8002058:	4948      	ldr	r1, [pc, #288]	@ (800217c <getCommandEnum+0x270>)
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe f958 	bl	8000310 <strcmp>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <getCommandEnum+0x15e>
 8002066:	2312      	movs	r3, #18
 8002068:	e063      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "FCAL") == 0) return CMD_FCAL_1;
 800206a:	4945      	ldr	r1, [pc, #276]	@ (8002180 <getCommandEnum+0x274>)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe f94f 	bl	8000310 <strcmp>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <getCommandEnum+0x170>
 8002078:	2313      	movs	r3, #19
 800207a:	e05a      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "MMOD") == 0) return CMD_MMOD_1;
 800207c:	4941      	ldr	r1, [pc, #260]	@ (8002184 <getCommandEnum+0x278>)
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe f946 	bl	8000310 <strcmp>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <getCommandEnum+0x182>
 800208a:	2314      	movs	r3, #20
 800208c:	e051      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "PWMM") == 0) return CMD_PWMM_1;
 800208e:	493e      	ldr	r1, [pc, #248]	@ (8002188 <getCommandEnum+0x27c>)
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe f93d 	bl	8000310 <strcmp>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <getCommandEnum+0x194>
 800209c:	2315      	movs	r3, #21
 800209e:	e048      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "RSBR") == 0) return CMD_RSBR_1;
 80020a0:	493a      	ldr	r1, [pc, #232]	@ (800218c <getCommandEnum+0x280>)
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe f934 	bl	8000310 <strcmp>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <getCommandEnum+0x1a6>
 80020ae:	2316      	movs	r3, #22
 80020b0:	e03f      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "SCRO") == 0) return CMD_SCRO_1;
 80020b2:	4937      	ldr	r1, [pc, #220]	@ (8002190 <getCommandEnum+0x284>)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe f92b 	bl	8000310 <strcmp>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <getCommandEnum+0x1b8>
 80020c0:	2317      	movs	r3, #23
 80020c2:	e036      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TINV") == 0) return CMD_TINV_1;
 80020c4:	4933      	ldr	r1, [pc, #204]	@ (8002194 <getCommandEnum+0x288>)
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe f922 	bl	8000310 <strcmp>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <getCommandEnum+0x1ca>
 80020d2:	2318      	movs	r3, #24
 80020d4:	e02d      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TMS") == 0) return CMD_TMS_1;
 80020d6:	4930      	ldr	r1, [pc, #192]	@ (8002198 <getCommandEnum+0x28c>)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe f919 	bl	8000310 <strcmp>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <getCommandEnum+0x1dc>
 80020e4:	2319      	movs	r3, #25
 80020e6:	e024      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TPOL") == 0) return CMD_TPOL_1;
 80020e8:	492c      	ldr	r1, [pc, #176]	@ (800219c <getCommandEnum+0x290>)
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe f910 	bl	8000310 <strcmp>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <getCommandEnum+0x1ee>
 80020f6:	231a      	movs	r3, #26
 80020f8:	e01b      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TWDT") == 0) return CMD_TWDT_1;
 80020fa:	4929      	ldr	r1, [pc, #164]	@ (80021a0 <getCommandEnum+0x294>)
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe f907 	bl	8000310 <strcmp>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <getCommandEnum+0x200>
 8002108:	231b      	movs	r3, #27
 800210a:	e012      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "TXOF") == 0) return CMD_TXOF_1;
 800210c:	4925      	ldr	r1, [pc, #148]	@ (80021a4 <getCommandEnum+0x298>)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe f8fe 	bl	8000310 <strcmp>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <getCommandEnum+0x212>
 800211a:	231c      	movs	r3, #28
 800211c:	e009      	b.n	8002132 <getCommandEnum+0x226>
	if (strcmp(key, "ZADJ") == 0) return CMD_ZADJ_1;
 800211e:	4922      	ldr	r1, [pc, #136]	@ (80021a8 <getCommandEnum+0x29c>)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe f8f5 	bl	8000310 <strcmp>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <getCommandEnum+0x224>
 800212c:	231d      	movs	r3, #29
 800212e:	e000      	b.n	8002132 <getCommandEnum+0x226>

	return CMD_UNKNOWN;
 8002130:	230f      	movs	r3, #15
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	0800f79c 	.word	0x0800f79c
 8002140:	0800f7a0 	.word	0x0800f7a0
 8002144:	0800f7a4 	.word	0x0800f7a4
 8002148:	0800f7a8 	.word	0x0800f7a8
 800214c:	0800f7ac 	.word	0x0800f7ac
 8002150:	0800f7b0 	.word	0x0800f7b0
 8002154:	0800f7b4 	.word	0x0800f7b4
 8002158:	0800f7b8 	.word	0x0800f7b8
 800215c:	0800f7bc 	.word	0x0800f7bc
 8002160:	0800f7c0 	.word	0x0800f7c0
 8002164:	0800f7c4 	.word	0x0800f7c4
 8002168:	0800f7c8 	.word	0x0800f7c8
 800216c:	0800f7cc 	.word	0x0800f7cc
 8002170:	0800f7d0 	.word	0x0800f7d0
 8002174:	0800f7d8 	.word	0x0800f7d8
 8002178:	0800f7e0 	.word	0x0800f7e0
 800217c:	0800f7e8 	.word	0x0800f7e8
 8002180:	0800f7ec 	.word	0x0800f7ec
 8002184:	0800f7f4 	.word	0x0800f7f4
 8002188:	0800f7fc 	.word	0x0800f7fc
 800218c:	0800f804 	.word	0x0800f804
 8002190:	0800f80c 	.word	0x0800f80c
 8002194:	0800f814 	.word	0x0800f814
 8002198:	0800f81c 	.word	0x0800f81c
 800219c:	0800f820 	.word	0x0800f820
 80021a0:	0800f828 	.word	0x0800f828
 80021a4:	0800f830 	.word	0x0800f830
 80021a8:	0800f838 	.word	0x0800f838

080021ac <findMatchingSubstring>:



// Returns a pointer to the matching substring in the buffer, or NULL
char *findMatchingSubstring(char *buffer)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	for(int i=0;i<30;i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e010      	b.n	80021dc <findMatchingSubstring+0x30>
	{
	const char *match = strstr(buffer, knownKeys[i]);
 80021ba:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <findMatchingSubstring+0x40>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f00c fd91 	bl	800ecec <strstr>
 80021ca:	60b8      	str	r0, [r7, #8]
	if(match!=NULL)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <findMatchingSubstring+0x2a>
	{
		return match;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	e006      	b.n	80021e4 <findMatchingSubstring+0x38>
	for(int i=0;i<30;i++)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b1d      	cmp	r3, #29
 80021e0:	ddeb      	ble.n	80021ba <findMatchingSubstring+0xe>
	}
	}
	return NULL;
 80021e2:	2300      	movs	r3, #0


}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	24000048 	.word	0x24000048

080021f0 <handleCommand>:


void handleCommand(char *buffer)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b098      	sub	sp, #96	@ 0x60
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	char data_1;
	data_1=buffer[0];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
//	char *key = strtok(&buffer[1], "=");
//	char *value_str = strtok(NULL, "=");
	char key[32],value_str[32];
	int result;
	char *buffer_1;
	buffer_1 = findMatchingSubstring(buffer);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ffd3 	bl	80021ac <findMatchingSubstring>
 8002206:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (buffer_1 != NULL) {
 8002208:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80d4 	beq.w	80023b8 <handleCommand+0x1c8>
	    result = sscanf(buffer_1, "%[^=]=%s", key, value_str);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002218:	496a      	ldr	r1, [pc, #424]	@ (80023c4 <handleCommand+0x1d4>)
 800221a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800221c:	f00c fd32 	bl	800ec84 <siscanf>
 8002220:	6578      	str	r0, [r7, #84]	@ 0x54
	//if (key && value_str)
	//{

		if (key)
			{
		uint32_t value = atoi(value_str);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4618      	mov	r0, r3
 8002228:	f00c fbf4 	bl	800ea14 <atoi>
 800222c:	4603      	mov	r3, r0
 800222e:	653b      	str	r3, [r7, #80]	@ 0x50
		Parse_data cmd_2= getCommandEnum(key);
 8002230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fe69 	bl	8001f0c <getCommandEnum>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		switch (cmd_2)
 8002240:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002244:	2b1d      	cmp	r3, #29
 8002246:	f200 80b9 	bhi.w	80023bc <handleCommand+0x1cc>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <handleCommand+0x60>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	080022c9 	.word	0x080022c9
 8002254:	080022d1 	.word	0x080022d1
 8002258:	080022d9 	.word	0x080022d9
 800225c:	080022e1 	.word	0x080022e1
 8002260:	080022e9 	.word	0x080022e9
 8002264:	080022f1 	.word	0x080022f1
 8002268:	080022f9 	.word	0x080022f9
 800226c:	08002301 	.word	0x08002301
 8002270:	08002309 	.word	0x08002309
 8002274:	08002311 	.word	0x08002311
 8002278:	08002319 	.word	0x08002319
 800227c:	08002321 	.word	0x08002321
 8002280:	08002329 	.word	0x08002329
 8002284:	08002331 	.word	0x08002331
 8002288:	08002339 	.word	0x08002339
 800228c:	08002341 	.word	0x08002341
 8002290:	08002349 	.word	0x08002349
 8002294:	08002351 	.word	0x08002351
 8002298:	08002359 	.word	0x08002359
 800229c:	08002361 	.word	0x08002361
 80022a0:	08002369 	.word	0x08002369
 80022a4:	08002371 	.word	0x08002371
 80022a8:	08002379 	.word	0x08002379
 80022ac:	08002381 	.word	0x08002381
 80022b0:	08002389 	.word	0x08002389
 80022b4:	08002391 	.word	0x08002391
 80022b8:	08002399 	.word	0x08002399
 80022bc:	080023a1 	.word	0x080023a1
 80022c0:	080023a9 	.word	0x080023a9
 80022c4:	080023b1 	.word	0x080023b1
		{
		case B_INDEX_VALUE_1:
			cmd.B_INDEX_VALUE = value;
 80022c8:	4a3f      	ldr	r2, [pc, #252]	@ (80023c8 <handleCommand+0x1d8>)
 80022ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022cc:	6013      	str	r3, [r2, #0]
			break;
 80022ce:	e076      	b.n	80023be <handleCommand+0x1ce>
		case MGD_1:
			cmd.MGD = value;
 80022d0:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <handleCommand+0x1d8>)
 80022d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022d4:	6053      	str	r3, [r2, #4]
			break;
 80022d6:	e072      	b.n	80023be <handleCommand+0x1ce>
		case MGM_1:
			cmd.MGM = value;
 80022d8:	4a3b      	ldr	r2, [pc, #236]	@ (80023c8 <handleCommand+0x1d8>)
 80022da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022dc:	6093      	str	r3, [r2, #8]
			break;
 80022de:	e06e      	b.n	80023be <handleCommand+0x1ce>
		case MZ_1:
			cmd.MZ = value;
 80022e0:	4a39      	ldr	r2, [pc, #228]	@ (80023c8 <handleCommand+0x1d8>)
 80022e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e4:	60d3      	str	r3, [r2, #12]
			break;
 80022e6:	e06a      	b.n	80023be <handleCommand+0x1ce>
		case T_1:
			cmd.T = value;
 80022e8:	4a37      	ldr	r2, [pc, #220]	@ (80023c8 <handleCommand+0x1d8>)
 80022ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ec:	6113      	str	r3, [r2, #16]
			break;
 80022ee:	e066      	b.n	80023be <handleCommand+0x1ce>
		case MGT_1:
			cmd.MGT = value;
 80022f0:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <handleCommand+0x1d8>)
 80022f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f4:	6153      	str	r3, [r2, #20]
			break;
 80022f6:	e062      	b.n	80023be <handleCommand+0x1ce>
		case VAR_INDEX_VALUE_1:
			cmd.VAR_INDEX_VALUE = value;
 80022f8:	4a33      	ldr	r2, [pc, #204]	@ (80023c8 <handleCommand+0x1d8>)
 80022fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022fc:	6193      	str	r3, [r2, #24]
			break;
 80022fe:	e05e      	b.n	80023be <handleCommand+0x1ce>
		case MGS_1:
			cmd.MGS = value;
 8002300:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <handleCommand+0x1d8>)
 8002302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002304:	61d3      	str	r3, [r2, #28]
			break;
 8002306:	e05a      	b.n	80023be <handleCommand+0x1ce>
		case MGX_1:
			cmd.MGX = value;
 8002308:	4a2f      	ldr	r2, [pc, #188]	@ (80023c8 <handleCommand+0x1d8>)
 800230a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800230c:	6213      	str	r3, [r2, #32]
			break;
 800230e:	e056      	b.n	80023be <handleCommand+0x1ce>

		case SET_B_1:
			cmd.SET_B= value;
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <handleCommand+0x1d8>)
 8002312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002314:	6253      	str	r3, [r2, #36]	@ 0x24
			break;
 8002316:	e052      	b.n	80023be <handleCommand+0x1ce>
		case SET_R_1:
			cmd.SET_R = value;
 8002318:	4a2b      	ldr	r2, [pc, #172]	@ (80023c8 <handleCommand+0x1d8>)
 800231a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231c:	6293      	str	r3, [r2, #40]	@ 0x28
			break;
 800231e:	e04e      	b.n	80023be <handleCommand+0x1ce>
		case SET_TV_1:
			cmd.SET_TV = value;
 8002320:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <handleCommand+0x1d8>)
 8002322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002324:	62d3      	str	r3, [r2, #44]	@ 0x2c
			break;
 8002326:	e04a      	b.n	80023be <handleCommand+0x1ce>
		case SET_VAR_1:
			cmd.SET_VAR = value;
 8002328:	4a27      	ldr	r2, [pc, #156]	@ (80023c8 <handleCommand+0x1d8>)
 800232a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 800232e:	e046      	b.n	80023be <handleCommand+0x1ce>
		case SET_TX_1:
			cmd.SET_TX = value;
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <handleCommand+0x1d8>)
 8002332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002334:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 8002336:	e042      	b.n	80023be <handleCommand+0x1ce>
		case SET_ZER_1:
			cmd.SET_ZER = value;
 8002338:	4a23      	ldr	r2, [pc, #140]	@ (80023c8 <handleCommand+0x1d8>)
 800233a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800233c:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 800233e:	e03e      	b.n	80023be <handleCommand+0x1ce>

		case CMD_ANAM_1:
			cmd.CMD_ANAM = value;
 8002340:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <handleCommand+0x1d8>)
 8002342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002344:	63d3      	str	r3, [r2, #60]	@ 0x3c
			break;
 8002346:	e03a      	b.n	80023be <handleCommand+0x1ce>
		case CMD_BADJ_1:
			cmd.CMD_BADJ = value;
 8002348:	4a1f      	ldr	r2, [pc, #124]	@ (80023c8 <handleCommand+0x1d8>)
 800234a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 800234e:	e036      	b.n	80023be <handleCommand+0x1ce>
		case CMD_BRUN_1:
			cmd.CMD_BRUN = value;
 8002350:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <handleCommand+0x1d8>)
 8002352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002354:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 8002356:	e032      	b.n	80023be <handleCommand+0x1ce>
		case CMD_DIM_1:
			cmd.CMD_DIM = value;
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <handleCommand+0x1d8>)
 800235a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235c:	6493      	str	r3, [r2, #72]	@ 0x48
			break;
 800235e:	e02e      	b.n	80023be <handleCommand+0x1ce>
		case CMD_FCAL_1:
			cmd.CMD_FCAL = value;
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <handleCommand+0x1d8>)
 8002362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002364:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8002366:	e02a      	b.n	80023be <handleCommand+0x1ce>
		case CMD_MMOD_1:
			cmd.CMD_MMOD = value;
 8002368:	4a17      	ldr	r2, [pc, #92]	@ (80023c8 <handleCommand+0x1d8>)
 800236a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800236c:	6513      	str	r3, [r2, #80]	@ 0x50
			break;
 800236e:	e026      	b.n	80023be <handleCommand+0x1ce>
		case CMD_PWMM_1:
			cmd.CMD_PWMM = value;
 8002370:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <handleCommand+0x1d8>)
 8002372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002374:	6553      	str	r3, [r2, #84]	@ 0x54
			break;
 8002376:	e022      	b.n	80023be <handleCommand+0x1ce>
		case CMD_RSBR_1:
			cmd.CMD_RSBR = value;
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <handleCommand+0x1d8>)
 800237a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800237c:	6593      	str	r3, [r2, #88]	@ 0x58
			break;
 800237e:	e01e      	b.n	80023be <handleCommand+0x1ce>
		case CMD_SCRO_1:
			cmd.CMD_SCRO = value;
 8002380:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <handleCommand+0x1d8>)
 8002382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002384:	65d3      	str	r3, [r2, #92]	@ 0x5c
			break;
 8002386:	e01a      	b.n	80023be <handleCommand+0x1ce>
		case CMD_TINV_1:
			cmd.CMD_TINV = value;
 8002388:	4a0f      	ldr	r2, [pc, #60]	@ (80023c8 <handleCommand+0x1d8>)
 800238a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
			break;
 800238e:	e016      	b.n	80023be <handleCommand+0x1ce>
		case CMD_TMS_1:
			cmd.CMD_TMS = value;
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <handleCommand+0x1d8>)
 8002392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002394:	6653      	str	r3, [r2, #100]	@ 0x64
			break;
 8002396:	e012      	b.n	80023be <handleCommand+0x1ce>
		case CMD_TPOL_1:
			cmd.CMD_TPOL = value;
 8002398:	4a0b      	ldr	r2, [pc, #44]	@ (80023c8 <handleCommand+0x1d8>)
 800239a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800239c:	6693      	str	r3, [r2, #104]	@ 0x68
			break;
 800239e:	e00e      	b.n	80023be <handleCommand+0x1ce>
		case CMD_TWDT_1:
			cmd.CMD_TWDT = value;
 80023a0:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <handleCommand+0x1d8>)
 80023a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a4:	66d3      	str	r3, [r2, #108]	@ 0x6c
			break;
 80023a6:	e00a      	b.n	80023be <handleCommand+0x1ce>
		case CMD_TXOF_1:
			cmd.CMD_TXOF = value;
 80023a8:	4a07      	ldr	r2, [pc, #28]	@ (80023c8 <handleCommand+0x1d8>)
 80023aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ac:	6713      	str	r3, [r2, #112]	@ 0x70
			break;
 80023ae:	e006      	b.n	80023be <handleCommand+0x1ce>
		case CMD_ZADJ_1:
			cmd.CMD_ZADJ = value;
 80023b0:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <handleCommand+0x1d8>)
 80023b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b4:	6753      	str	r3, [r2, #116]	@ 0x74
			break;
 80023b6:	e002      	b.n	80023be <handleCommand+0x1ce>
	    return;  // or handle error
 80023b8:	bf00      	nop
 80023ba:	e000      	b.n	80023be <handleCommand+0x1ce>

		default:
			// Optional: handle unknown commands or error logging
			break;
 80023bc:	bf00      	nop
		}
	}
}
 80023be:	3760      	adds	r7, #96	@ 0x60
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	0800f840 	.word	0x0800f840
 80023c8:	240003fc 	.word	0x240003fc

080023cc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <MX_I2C3_Init+0x78>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20A0ACFE;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002448 <MX_I2C3_Init+0x7c>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <MX_I2C3_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <MX_I2C3_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002406:	480e      	ldr	r0, [pc, #56]	@ (8002440 <MX_I2C3_Init+0x74>)
 8002408:	f005 f9ca 	bl	80077a0 <HAL_I2C_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002412:	f000 fa57 	bl	80028c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002416:	2100      	movs	r1, #0
 8002418:	4809      	ldr	r0, [pc, #36]	@ (8002440 <MX_I2C3_Init+0x74>)
 800241a:	f005 fa5d 	bl	80078d8 <HAL_I2CEx_ConfigAnalogFilter>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002424:	f000 fa4e 	bl	80028c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002428:	2100      	movs	r1, #0
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <MX_I2C3_Init+0x74>)
 800242c:	f005 fa9f 	bl	800796e <HAL_I2CEx_ConfigDigitalFilter>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002436:	f000 fa45 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	24000478 	.word	0x24000478
 8002444:	40005c00 	.word	0x40005c00
 8002448:	20a0acfe 	.word	0x20a0acfe

0800244c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0ba      	sub	sp, #232	@ 0xe8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	22b8      	movs	r2, #184	@ 0xb8
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f00c fc35 	bl	800ecdc <memset>
  if(i2cHandle->Instance==I2C3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a39      	ldr	r2, [pc, #228]	@ (800255c <HAL_I2C_MspInit+0x110>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d16b      	bne.n	8002554 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800247c:	f04f 0208 	mov.w	r2, #8
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248e:	f107 0318 	add.w	r3, r7, #24
 8002492:	4618      	mov	r0, r3
 8002494:	f006 fa58 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800249e:	f000 fa11 	bl	80028c4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 80024b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c6:	4a26      	ldr	r2, [pc, #152]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d0:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80024f8:	2304      	movs	r3, #4
 80024fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002502:	4619      	mov	r1, r3
 8002504:	4817      	ldr	r0, [pc, #92]	@ (8002564 <HAL_I2C_MspInit+0x118>)
 8002506:	f004 ff89 	bl	800741c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800250a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800250e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002512:	2312      	movs	r3, #18
 8002514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002524:	2304      	movs	r3, #4
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800252e:	4619      	mov	r1, r3
 8002530:	480d      	ldr	r0, [pc, #52]	@ (8002568 <HAL_I2C_MspInit+0x11c>)
 8002532:	f004 ff73 	bl	800741c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 8002538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800253c:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 800253e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002542:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_I2C_MspInit+0x114>)
 8002548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800254c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002554:	bf00      	nop
 8002556:	37e8      	adds	r7, #232	@ 0xe8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40005c00 	.word	0x40005c00
 8002560:	58024400 	.word	0x58024400
 8002564:	58020800 	.word	0x58020800
 8002568:	58020000 	.word	0x58020000

0800256c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002572:	f000 f96d 	bl	8002850 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002576:	4b59      	ldr	r3, [pc, #356]	@ (80026dc <main+0x170>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11b      	bne.n	80025ba <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002582:	f3bf 8f4f 	dsb	sy
}
 8002586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002588:	f3bf 8f6f 	isb	sy
}
 800258c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800258e:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <main+0x170>)
 8002590:	2200      	movs	r2, #0
 8002592:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002596:	f3bf 8f4f 	dsb	sy
}
 800259a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800259c:	f3bf 8f6f 	isb	sy
}
 80025a0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80025a2:	4b4e      	ldr	r3, [pc, #312]	@ (80026dc <main+0x170>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4a4d      	ldr	r2, [pc, #308]	@ (80026dc <main+0x170>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80025ae:	f3bf 8f4f 	dsb	sy
}
 80025b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025b4:	f3bf 8f6f 	isb	sy
}
 80025b8:	e000      	b.n	80025bc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80025ba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80025bc:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <main+0x170>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d138      	bne.n	800263a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80025c8:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <main+0x170>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80025d0:	f3bf 8f4f 	dsb	sy
}
 80025d4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <main+0x170>)
 80025d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025dc:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	0b5b      	lsrs	r3, r3, #13
 80025e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025e6:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f0:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80025fa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002600:	4936      	ldr	r1, [pc, #216]	@ (80026dc <main+0x170>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e5a      	subs	r2, r3, #1
 800260c:	60fa      	str	r2, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ef      	bne.n	80025f2 <main+0x86>
    } while(sets-- != 0U);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	613a      	str	r2, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e5      	bne.n	80025e8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800261c:	f3bf 8f4f 	dsb	sy
}
 8002620:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002622:	4b2e      	ldr	r3, [pc, #184]	@ (80026dc <main+0x170>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <main+0x170>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800262e:	f3bf 8f4f 	dsb	sy
}
 8002632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002634:	f3bf 8f6f 	isb	sy
}
 8002638:	e000      	b.n	800263c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800263a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f001 fa2c 	bl	8003a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f854 	bl	80026ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002644:	f000 f8c0 	bl	80027c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002648:	f7ff fa36 	bl	8001ab8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800264c:	f7ff f91a 	bl	8001884 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8002650:	f000 fd84 	bl	800315c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002654:	f000 fdce 	bl	80031f4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002658:	f000 fe18 	bl	800328c <MX_USART6_UART_Init>
  MX_USART10_UART_Init();
 800265c:	f000 fe62 	bl	8003324 <MX_USART10_UART_Init>
  MX_I2C3_Init();
 8002660:	f7ff feb4 	bl	80023cc <MX_I2C3_Init>
  MX_TIM23_Init();
 8002664:	f000 fc2e 	bl	8002ec4 <MX_TIM23_Init>
  MX_UART4_Init();
 8002668:	f000 fd2c 	bl	80030c4 <MX_UART4_Init>
  MX_ADC1_Init();
 800266c:	f7ff f84a 	bl	8001704 <MX_ADC1_Init>
  MX_TIM14_Init();
 8002670:	f000 fc04 	bl	8002e7c <MX_TIM14_Init>
//	uint32_t count  = 0;


	    // Initialize system clocks, GPIOs, and peripherals (USART1 for example)
  // RS232 handle structure
	    RS232_Init();
 8002674:	f000 f92c 	bl	80028d0 <RS232_Init>
	    test_request_reqfirmwareversion();
 8002678:	f001 f882 	bl	8003780 <test_request_reqfirmwareversion>
	    guide_sensor1_send_real_time_init();
 800267c:	f7ff fb5a 	bl	8001d34 <guide_sensor1_send_real_time_init>
//			{
//				//printmsg("submodule ->   mcp3 wrote failed\n");
//			}
//		}
        // Transmit some data (for example)
        uint8_t message[8] = {1,2,3,4,5,6,7,8};
 8002680:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <main+0x174>)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002688:	e883 0003 	stmia.w	r3, {r0, r1}
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	2104      	movs	r1, #4
 8002690:	4814      	ldr	r0, [pc, #80]	@ (80026e4 <main+0x178>)
 8002692:	f005 f86b 	bl	800776c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8002696:	2201      	movs	r2, #1
 8002698:	2102      	movs	r1, #2
 800269a:	4812      	ldr	r0, [pc, #72]	@ (80026e4 <main+0x178>)
 800269c:	f005 f866 	bl	800776c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2101      	movs	r1, #1
 80026a4:	480f      	ldr	r0, [pc, #60]	@ (80026e4 <main+0x178>)
 80026a6:	f005 f861 	bl	800776c <HAL_GPIO_WritePin>
        //RS232_Transmit(message, sizeof(message));
        //HAL_Delay(1000);
        message[7]=message[7]+1;
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	3301      	adds	r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	72fb      	strb	r3, [r7, #11]
        //RS232_Transmit(message, sizeof(message));
        //test_request_baud();
        //HAL_Delay(2000);
        //test_request_reqfirmwareversion();
        if(state==1)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <main+0x17c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <main+0x154>
        {
        //guide_sensor1_send_real_time(MGD);
        state=0;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <main+0x17c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
        }
        //HAL_Delay(1000);
        //test_request_baud();
        //imu_test_data();
        if(state==0)
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <main+0x17c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <main+0x166>
        {
        	//buff = get_rx_buffer_data_3();
        guide_sensor1_send_real_time();
 80026c8:	f7ff fb40 	bl	8001d4c <guide_sensor1_send_real_time>
        //handleCommand(buff);
        state=1;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <main+0x17c>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
        }
        //guide_sensor1_send_real_time(MGD);
        HAL_Delay(100);  // Wait for 1 second before transmitting again
 80026d2:	2064      	movs	r0, #100	@ 0x64
 80026d4:	f001 fa72 	bl	8003bbc <HAL_Delay>
	{
 80026d8:	e7d2      	b.n	8002680 <main+0x114>
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00
 80026e0:	0800f84c 	.word	0x0800f84c
 80026e4:	58020c00 	.word	0x58020c00
 80026e8:	240000c0 	.word	0x240000c0

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b09c      	sub	sp, #112	@ 0x70
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f6:	224c      	movs	r2, #76	@ 0x4c
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00c faee 	bl	800ecdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2220      	movs	r2, #32
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f00c fae8 	bl	800ecdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800270c:	2002      	movs	r0, #2
 800270e:	f005 f97b 	bl	8007a08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <SystemClock_Config+0xd8>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	4a2a      	ldr	r2, [pc, #168]	@ (80027c4 <SystemClock_Config+0xd8>)
 800271c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002720:	6193      	str	r3, [r2, #24]
 8002722:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <SystemClock_Config+0xd8>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800272e:	bf00      	nop
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <SystemClock_Config+0xd8>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800273c:	d1f8      	bne.n	8002730 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800273e:	2301      	movs	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002742:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002748:	2302      	movs	r3, #2
 800274a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800274c:	2302      	movs	r3, #2
 800274e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002750:	2305      	movs	r3, #5
 8002752:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 104;
 8002754:	2368      	movs	r3, #104	@ 0x68
 8002756:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002758:	2301      	movs	r3, #1
 800275a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800275c:	2304      	movs	r3, #4
 800275e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002760:	2302      	movs	r3, #2
 8002762:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002764:	2308      	movs	r3, #8
 8002766:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002768:	2300      	movs	r3, #0
 800276a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002774:	4618      	mov	r0, r3
 8002776:	f005 f981 	bl	8007a7c <HAL_RCC_OscConfig>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002780:	f000 f8a0 	bl	80028c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002784:	233f      	movs	r3, #63	@ 0x3f
 8002786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002788:	2303      	movs	r3, #3
 800278a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002790:	2308      	movs	r3, #8
 8002792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002794:	2340      	movs	r3, #64	@ 0x40
 8002796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002798:	2340      	movs	r3, #64	@ 0x40
 800279a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800279c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80027a2:	2340      	movs	r3, #64	@ 0x40
 80027a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2103      	movs	r1, #3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fd40 	bl	8008230 <HAL_RCC_ClockConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0xce>
  {
    Error_Handler();
 80027b6:	f000 f885 	bl	80028c4 <Error_Handler>
  }
}
 80027ba:	bf00      	nop
 80027bc:	3770      	adds	r7, #112	@ 0x70
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	58024800 	.word	0x58024800

080027c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0ae      	sub	sp, #184	@ 0xb8
 80027cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ce:	463b      	mov	r3, r7
 80027d0:	22b8      	movs	r2, #184	@ 0xb8
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00c fa81 	bl	800ecdc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 80027da:	f44f 2208 	mov.w	r2, #557056	@ 0x88000
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80027ea:	2310      	movs	r3, #16
 80027ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80027ee:	2302      	movs	r3, #2
 80027f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80027f2:	2304      	movs	r3, #4
 80027f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80027fa:	23c0      	movs	r3, #192	@ 0xc0
 80027fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002806:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800280a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002812:	463b      	mov	r3, r7
 8002814:	4618      	mov	r0, r3
 8002816:	f006 f897 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002820:	f000 f850 	bl	80028c4 <Error_Handler>
  }
}
 8002824:	bf00      	nop
 8002826:	37b8      	adds	r7, #184	@ 0xb8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	if (htim == canopenNodeSTM32->timerHandle) {
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	d101      	bne.n	8002844 <HAL_TIM_PeriodElapsedCallback+0x18>
		canopen_app_interrupt();
 8002840:	f7fe fcba 	bl	80011b8 <canopen_app_interrupt>
	}
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	24000140 	.word	0x24000140

08002850 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002856:	463b      	mov	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002862:	f002 fe31 	bl	80054c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800286a:	2300      	movs	r3, #0
 800286c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002872:	231f      	movs	r3, #31
 8002874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002876:	2387      	movs	r3, #135	@ 0x87
 8002878:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800287a:	2300      	movs	r3, #0
 800287c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800287e:	2300      	movs	r3, #0
 8002880:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002886:	2301      	movs	r3, #1
 8002888:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002892:	463b      	mov	r3, r7
 8002894:	4618      	mov	r0, r3
 8002896:	f002 fe4f 	bl	8005538 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800289a:	2301      	movs	r3, #1
 800289c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 800289e:	2304      	movs	r3, #4
 80028a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80028ae:	463b      	mov	r3, r7
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fe41 	bl	8005538 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80028b6:	2004      	movs	r0, #4
 80028b8:	f002 fe1e 	bl	80054f8 <HAL_MPU_Enable>

}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <Error_Handler+0x8>

080028d0 <RS232_Init>:




// Initialize RS485 communication (both GPIO and UART)
void RS232_Init(void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, rx_buffer_3, RX_BUFFER_SIZE);
 80028d4:	2201      	movs	r2, #1
 80028d6:	490a      	ldr	r1, [pc, #40]	@ (8002900 <RS232_Init+0x30>)
 80028d8:	480a      	ldr	r0, [pc, #40]	@ (8002904 <RS232_Init+0x34>)
 80028da:	f009 fc27 	bl	800c12c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 80028de:	2201      	movs	r2, #1
 80028e0:	4909      	ldr	r1, [pc, #36]	@ (8002908 <RS232_Init+0x38>)
 80028e2:	480a      	ldr	r0, [pc, #40]	@ (800290c <RS232_Init+0x3c>)
 80028e4:	f009 fc22 	bl	800c12c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, rx_buffer_6, RX_BUFFER_SIZE);
 80028e8:	2201      	movs	r2, #1
 80028ea:	4909      	ldr	r1, [pc, #36]	@ (8002910 <RS232_Init+0x40>)
 80028ec:	4809      	ldr	r0, [pc, #36]	@ (8002914 <RS232_Init+0x44>)
 80028ee:	f009 fc1d 	bl	800c12c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart10, rx_buffer_10, RX_BUFFER_SIZE);
 80028f2:	2201      	movs	r2, #1
 80028f4:	4908      	ldr	r1, [pc, #32]	@ (8002918 <RS232_Init+0x48>)
 80028f6:	4809      	ldr	r0, [pc, #36]	@ (800291c <RS232_Init+0x4c>)
 80028f8:	f009 fc18 	bl	800c12c <HAL_UART_Receive_IT>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	240004d8 	.word	0x240004d8
 8002904:	240006c8 	.word	0x240006c8
 8002908:	240004cc 	.word	0x240004cc
 800290c:	24000634 	.word	0x24000634
 8002910:	240004e4 	.word	0x240004e4
 8002914:	2400075c 	.word	0x2400075c
 8002918:	240004ec 	.word	0x240004ec
 800291c:	240007f0 	.word	0x240007f0

08002920 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a64 <HAL_UART_RxCpltCallback+0x144>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d129      	bne.n	8002986 <HAL_UART_RxCpltCallback+0x66>
		rx_index_3++;
 8002932:	4b4d      	ldr	r3, [pc, #308]	@ (8002a68 <HAL_UART_RxCpltCallback+0x148>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a68 <HAL_UART_RxCpltCallback+0x148>)
 800293c:	801a      	strh	r2, [r3, #0]
		if(rx_index_3 == 5)
 800293e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_UART_RxCpltCallback+0x148>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	2b05      	cmp	r3, #5
 8002944:	d110      	bne.n	8002968 <HAL_UART_RxCpltCallback+0x48>
		{
			//if(rx_buffer_3[rx_index_3] == 'M')
			//{
			handleCommand(rx_buffer_3);
 8002946:	4849      	ldr	r0, [pc, #292]	@ (8002a6c <HAL_UART_RxCpltCallback+0x14c>)
 8002948:	f7ff fc52 	bl	80021f0 <handleCommand>
			count++;
 800294c:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <HAL_UART_RxCpltCallback+0x150>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <HAL_UART_RxCpltCallback+0x150>)
 8002956:	701a      	strb	r2, [r3, #0]
			//xsens_mti_parse_buffer(&test_usart, rx_buffer_3, rx_index_3);
			memset(rx_buffer_3, 0, sizeof(rx_buffer_3));
 8002958:	220a      	movs	r2, #10
 800295a:	2100      	movs	r1, #0
 800295c:	4843      	ldr	r0, [pc, #268]	@ (8002a6c <HAL_UART_RxCpltCallback+0x14c>)
 800295e:	f00c f9bd 	bl	800ecdc <memset>
			rx_index_3=0;
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <HAL_UART_RxCpltCallback+0x148>)
 8002964:	2200      	movs	r2, #0
 8002966:	801a      	strh	r2, [r3, #0]
		}
		//last_rx_time=HAL_GetTick();
		//parse_imu_data(&test_usart);
		if(HAL_UART_Receive_IT(&huart3, &rx_buffer_3[rx_index_3], RX_BUFFER_SIZE) != HAL_OK)
 8002968:	4b3f      	ldr	r3, [pc, #252]	@ (8002a68 <HAL_UART_RxCpltCallback+0x148>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_UART_RxCpltCallback+0x14c>)
 8002970:	4413      	add	r3, r2
 8002972:	2201      	movs	r2, #1
 8002974:	4619      	mov	r1, r3
 8002976:	483f      	ldr	r0, [pc, #252]	@ (8002a74 <HAL_UART_RxCpltCallback+0x154>)
 8002978:	f009 fbd8 	bl	800c12c <HAL_UART_Receive_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_UART_RxCpltCallback+0x66>
		{
			Error_Handler();
 8002982:	f7ff ff9f 	bl	80028c4 <Error_Handler>
		}
		//rx_index_3++;
	}

	if (huart->Instance == USART1) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a78 <HAL_UART_RxCpltCallback+0x158>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d120      	bne.n	80029d2 <HAL_UART_RxCpltCallback+0xb2>
		rx_index++;
 8002990:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_UART_RxCpltCallback+0x15c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b38      	ldr	r3, [pc, #224]	@ (8002a7c <HAL_UART_RxCpltCallback+0x15c>)
 800299a:	701a      	strb	r2, [r3, #0]
		if(rx_index == 8)
 800299c:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_UART_RxCpltCallback+0x15c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d107      	bne.n	80029b4 <HAL_UART_RxCpltCallback+0x94>
		{
			rx_index =0;
 80029a4:	4b35      	ldr	r3, [pc, #212]	@ (8002a7c <HAL_UART_RxCpltCallback+0x15c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer , 0, sizeof(rx_buffer));
 80029aa:	2209      	movs	r2, #9
 80029ac:	2100      	movs	r1, #0
 80029ae:	4834      	ldr	r0, [pc, #208]	@ (8002a80 <HAL_UART_RxCpltCallback+0x160>)
 80029b0:	f00c f994 	bl	800ecdc <memset>
		}
		// Handle the received data
		// Example: Toggle an LED or process the data
		if(HAL_UART_Receive_IT(&huart1, &rx_buffer[rx_index], RX_BUFFER_SIZE) != HAL_OK)
 80029b4:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <HAL_UART_RxCpltCallback+0x15c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_UART_RxCpltCallback+0x160>)
 80029bc:	4413      	add	r3, r2
 80029be:	2201      	movs	r2, #1
 80029c0:	4619      	mov	r1, r3
 80029c2:	4830      	ldr	r0, [pc, #192]	@ (8002a84 <HAL_UART_RxCpltCallback+0x164>)
 80029c4:	f009 fbb2 	bl	800c12c <HAL_UART_Receive_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_UART_RxCpltCallback+0xb2>
		{
			Error_Handler();
 80029ce:	f7ff ff79 	bl	80028c4 <Error_Handler>
		}
	}

	if (huart->Instance == USART6) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <HAL_UART_RxCpltCallback+0x168>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d119      	bne.n	8002a10 <HAL_UART_RxCpltCallback+0xf0>
		rx_index_6++;
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_UART_RxCpltCallback+0x16c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <HAL_UART_RxCpltCallback+0x16c>)
 80029e6:	701a      	strb	r2, [r3, #0]
		            last_rx_time = HAL_GetTick(); // Update last byte received time
 80029e8:	f001 f8dc 	bl	8003ba4 <HAL_GetTick>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <HAL_UART_RxCpltCallback+0x170>)
 80029f0:	6013      	str	r3, [r2, #0]
		if(HAL_UART_Receive_IT(&huart6, &rx_buffer_6[rx_index_6], RX_BUFFER_SIZE) != HAL_OK)
 80029f2:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <HAL_UART_RxCpltCallback+0x16c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <HAL_UART_RxCpltCallback+0x174>)
 80029fa:	4413      	add	r3, r2
 80029fc:	2201      	movs	r2, #1
 80029fe:	4619      	mov	r1, r3
 8002a00:	4825      	ldr	r0, [pc, #148]	@ (8002a98 <HAL_UART_RxCpltCallback+0x178>)
 8002a02:	f009 fb93 	bl	800c12c <HAL_UART_Receive_IT>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_UART_RxCpltCallback+0xf0>
		{
			Error_Handler();
 8002a0c:	f7ff ff5a 	bl	80028c4 <Error_Handler>
		}
	}

	if (huart->Instance == USART10) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a21      	ldr	r2, [pc, #132]	@ (8002a9c <HAL_UART_RxCpltCallback+0x17c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d120      	bne.n	8002a5c <HAL_UART_RxCpltCallback+0x13c>
		rx_index_10++;
 8002a1a:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x180>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x180>)
 8002a24:	701a      	strb	r2, [r3, #0]
		if(rx_index_10 == 8)
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x180>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d107      	bne.n	8002a3e <HAL_UART_RxCpltCallback+0x11e>
		{
			rx_index_10=0;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x180>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer_10, 0, sizeof(rx_buffer_10));
 8002a34:	2208      	movs	r2, #8
 8002a36:	2100      	movs	r1, #0
 8002a38:	481a      	ldr	r0, [pc, #104]	@ (8002aa4 <HAL_UART_RxCpltCallback+0x184>)
 8002a3a:	f00c f94f 	bl	800ecdc <memset>
		}
		// Handle the received data
		// Example: Toggle an LED or process the data
		if(HAL_UART_Receive_IT(&huart10, &rx_buffer_10[rx_index_10], RX_BUFFER_SIZE) != HAL_OK)
 8002a3e:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x180>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <HAL_UART_RxCpltCallback+0x184>)
 8002a46:	4413      	add	r3, r2
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4816      	ldr	r0, [pc, #88]	@ (8002aa8 <HAL_UART_RxCpltCallback+0x188>)
 8002a4e:	f009 fb6d 	bl	800c12c <HAL_UART_Receive_IT>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_RxCpltCallback+0x13c>
		{
			Error_Handler();
 8002a58:	f7ff ff34 	bl	80028c4 <Error_Handler>
		}
	}


}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40004800 	.word	0x40004800
 8002a68:	240004f4 	.word	0x240004f4
 8002a6c:	240004d8 	.word	0x240004d8
 8002a70:	240004fc 	.word	0x240004fc
 8002a74:	240006c8 	.word	0x240006c8
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	240004d5 	.word	0x240004d5
 8002a80:	240004cc 	.word	0x240004cc
 8002a84:	24000634 	.word	0x24000634
 8002a88:	40011400 	.word	0x40011400
 8002a8c:	240004f6 	.word	0x240004f6
 8002a90:	240004f8 	.word	0x240004f8
 8002a94:	240004e4 	.word	0x240004e4
 8002a98:	2400075c 	.word	0x2400075c
 8002a9c:	40011c00 	.word	0x40011c00
 8002aa0:	240004f7 	.word	0x240004f7
 8002aa4:	240004ec 	.word	0x240004ec
 8002aa8:	240007f0 	.word	0x240007f0

08002aac <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a25      	ldr	r2, [pc, #148]	@ (8002b50 <HAL_UART_ErrorCallback+0xa4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d144      	bne.n	8002b48 <HAL_UART_ErrorCallback+0x9c>
//		if(HAL_UART_Receive_IT(&huart3, &rx_buffer_3[rx_index_3], RX_BUFFER_SIZE) != HAL_OK)
//				{
//					Error_Handler();
//				}

		errorcode=HAL_UART_GetError(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f009 ff6c 	bl	800c99c <HAL_UART_GetError>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a23      	ldr	r2, [pc, #140]	@ (8002b54 <HAL_UART_ErrorCallback+0xa8>)
 8002ac8:	6013      	str	r3, [r2, #0]
		huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d103      	bne.n	8002ae8 <HAL_UART_ErrorCallback+0x3c>
			__HAL_UART_CLEAR_OREFLAG(huart);  // Clear Overrun Error Flag
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	621a      	str	r2, [r3, #32]
		}
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d103      	bne.n	8002afe <HAL_UART_ErrorCallback+0x52>
			__HAL_UART_CLEAR_FEFLAG(huart);   // Clear Framing Error Flag
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2202      	movs	r2, #2
 8002afc:	621a      	str	r2, [r3, #32]
		}
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d103      	bne.n	8002b14 <HAL_UART_ErrorCallback+0x68>
			__HAL_UART_CLEAR_NEFLAG(huart);   // Clear Noise Error Flag
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2204      	movs	r2, #4
 8002b12:	621a      	str	r2, [r3, #32]
		}
		if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d103      	bne.n	8002b2a <HAL_UART_ErrorCallback+0x7e>
			__HAL_UART_CLEAR_PEFLAG(huart);   // Clear Parity Error Flag
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	621a      	str	r2, [r3, #32]
		}


		if(HAL_UART_Receive_IT(&huart3, &rx_buffer_3[rx_index_3], RX_BUFFER_SIZE) != HAL_OK)
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_UART_ErrorCallback+0xac>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_UART_ErrorCallback+0xb0>)
 8002b32:	4413      	add	r3, r2
 8002b34:	2201      	movs	r2, #1
 8002b36:	4619      	mov	r1, r3
 8002b38:	4809      	ldr	r0, [pc, #36]	@ (8002b60 <HAL_UART_ErrorCallback+0xb4>)
 8002b3a:	f009 faf7 	bl	800c12c <HAL_UART_Receive_IT>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_ErrorCallback+0x9c>
						{

							Error_Handler();
 8002b44:	f7ff febe 	bl	80028c4 <Error_Handler>
						}
		//rx_index_3++;
	}
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40004800 	.word	0x40004800
 8002b54:	24000500 	.word	0x24000500
 8002b58:	240004f4 	.word	0x240004f4
 8002b5c:	240004d8 	.word	0x240004d8
 8002b60:	240006c8 	.word	0x240006c8

08002b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_MspInit+0x30>)
 8002b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b70:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <HAL_MspInit+0x30>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_MspInit+0x30>)
 8002b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	58024400 	.word	0x58024400

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <NMI_Handler+0x4>

08002ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <MemManage_Handler+0x4>

08002bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <BusFault_Handler+0x4>

08002bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <UsageFault_Handler+0x4>

08002bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bee:	f000 ffc5 	bl	8003b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002bfc:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <FDCAN1_IT0_IRQHandler+0x10>)
 8002bfe:	f003 ff27 	bl	8006a50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	240002b8 	.word	0x240002b8

08002c0c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <FDCAN2_IT0_IRQHandler+0x10>)
 8002c12:	f003 ff1d 	bl	8006a50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	24000358 	.word	0x24000358

08002c20 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <FDCAN1_IT1_IRQHandler+0x10>)
 8002c26:	f003 ff13 	bl	8006a50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	240002b8 	.word	0x240002b8

08002c34 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <FDCAN2_IT1_IRQHandler+0x10>)
 8002c3a:	f003 ff09 	bl	8006a50 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	24000358 	.word	0x24000358

08002c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <USART1_IRQHandler+0x10>)
 8002c4e:	f009 fab9 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	24000634 	.word	0x24000634

08002c5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c60:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <USART3_IRQHandler+0x10>)
 8002c62:	f009 faaf 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	240006c8 	.word	0x240006c8

08002c70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002c76:	f008 fafb 	bl	800b270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	24000508 	.word	0x24000508

08002c84 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <ETH_IRQHandler+0x10>)
 8002c8a:	f003 f9f9 	bl	8006080 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	24000208 	.word	0x24000208

08002c98 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <USART6_IRQHandler+0x10>)
 8002c9e:	f009 fa91 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2400075c 	.word	0x2400075c

08002cac <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8002cb0:	4802      	ldr	r0, [pc, #8]	@ (8002cbc <USART10_IRQHandler+0x10>)
 8002cb2:	f009 fa87 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	240007f0 	.word	0x240007f0

08002cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd4:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf0:	f00c f822 	bl	800ed38 <__errno>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <_sbrk+0x64>)
 8002d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	24050000 	.word	0x24050000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	24000504 	.word	0x24000504
 8002d28:	24001278 	.word	0x24001278

08002d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d30:	4b3e      	ldr	r3, [pc, #248]	@ (8002e2c <SystemInit+0x100>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	4a3d      	ldr	r2, [pc, #244]	@ (8002e2c <SystemInit+0x100>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d40:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <SystemInit+0x104>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d807      	bhi.n	8002d5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d4c:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <SystemInit+0x104>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 030f 	bic.w	r3, r3, #15
 8002d54:	4a36      	ldr	r2, [pc, #216]	@ (8002e30 <SystemInit+0x104>)
 8002d56:	f043 0307 	orr.w	r3, r3, #7
 8002d5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d5c:	4b35      	ldr	r3, [pc, #212]	@ (8002e34 <SystemInit+0x108>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a34      	ldr	r2, [pc, #208]	@ (8002e34 <SystemInit+0x108>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d68:	4b32      	ldr	r3, [pc, #200]	@ (8002e34 <SystemInit+0x108>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d6e:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <SystemInit+0x108>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4930      	ldr	r1, [pc, #192]	@ (8002e34 <SystemInit+0x108>)
 8002d74:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <SystemInit+0x10c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <SystemInit+0x104>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d86:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <SystemInit+0x104>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 030f 	bic.w	r3, r3, #15
 8002d8e:	4a28      	ldr	r2, [pc, #160]	@ (8002e30 <SystemInit+0x104>)
 8002d90:	f043 0307 	orr.w	r3, r3, #7
 8002d94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d96:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <SystemInit+0x108>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <SystemInit+0x108>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002da2:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <SystemInit+0x108>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002da8:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <SystemInit+0x108>)
 8002daa:	4a24      	ldr	r2, [pc, #144]	@ (8002e3c <SystemInit+0x110>)
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002dae:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <SystemInit+0x108>)
 8002db0:	4a23      	ldr	r2, [pc, #140]	@ (8002e40 <SystemInit+0x114>)
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <SystemInit+0x108>)
 8002db6:	4a23      	ldr	r2, [pc, #140]	@ (8002e44 <SystemInit+0x118>)
 8002db8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <SystemInit+0x108>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <SystemInit+0x108>)
 8002dc2:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <SystemInit+0x118>)
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <SystemInit+0x108>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <SystemInit+0x108>)
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <SystemInit+0x118>)
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <SystemInit+0x108>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <SystemInit+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	@ (8002e34 <SystemInit+0x108>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002de4:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <SystemInit+0x108>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <SystemInit+0x108>)
 8002dec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d113      	bne.n	8002e20 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <SystemInit+0x108>)
 8002dfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <SystemInit+0x108>)
 8002e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <SystemInit+0x11c>)
 8002e0a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002e10:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <SystemInit+0x108>)
 8002e12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002e16:	4a07      	ldr	r2, [pc, #28]	@ (8002e34 <SystemInit+0x108>)
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00
 8002e30:	52002000 	.word	0x52002000
 8002e34:	58024400 	.word	0x58024400
 8002e38:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e3c:	02020200 	.word	0x02020200
 8002e40:	01ff0000 	.word	0x01ff0000
 8002e44:	01010280 	.word	0x01010280
 8002e48:	52004000 	.word	0x52004000

08002e4c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002e50:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <ExitRun0Mode+0x2c>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a08      	ldr	r2, [pc, #32]	@ (8002e78 <ExitRun0Mode+0x2c>)
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002e5c:	bf00      	nop
 8002e5e:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <ExitRun0Mode+0x2c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f9      	beq.n	8002e5e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	58024800 	.word	0x58024800

08002e7c <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim23;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002e82:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec0 <MX_TIM14_Init+0x44>)
 8002e84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2600-1;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002e88:	f640 2227 	movw	r2, #2599	@ 0xa27
 8002e8c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8002e94:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002e96:	2263      	movs	r2, #99	@ 0x63
 8002e98:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	@ (8002ebc <MX_TIM14_Init+0x40>)
 8002ea8:	f008 f934 	bl	800b114 <HAL_TIM_Base_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002eb2:	f7ff fd07 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	24000508 	.word	0x24000508
 8002ec0:	40002000 	.word	0x40002000

08002ec4 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eca:	f107 031c 	add.w	r3, r7, #28
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
 8002ee4:	615a      	str	r2, [r3, #20]
 8002ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002ee8:	4b32      	ldr	r3, [pc, #200]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002eea:	4a33      	ldr	r2, [pc, #204]	@ (8002fb8 <MX_TIM23_Init+0xf4>)
 8002eec:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 2600-1;
 8002eee:	4b31      	ldr	r3, [pc, #196]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002ef0:	f640 2227 	movw	r2, #2599	@ 0xa27
 8002ef4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 100-1;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002efe:	2263      	movs	r2, #99	@ 0x63
 8002f00:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f02:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f08:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8002f0e:	4829      	ldr	r0, [pc, #164]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f10:	f008 f957 	bl	800b1c2 <HAL_TIM_PWM_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 8002f1a:	f7ff fcd3 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002f26:	f107 031c 	add.w	r3, r7, #28
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4821      	ldr	r0, [pc, #132]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f2e:	f008 ff65 	bl	800bdfc <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 8002f38:	f7ff fcc4 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f3c:	2360      	movs	r3, #96	@ 0x60
 8002f3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4619      	mov	r1, r3
 8002f52:	4818      	ldr	r0, [pc, #96]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f54:	f008 fa94 	bl	800b480 <HAL_TIM_PWM_ConfigChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8002f5e:	f7ff fcb1 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f62:	463b      	mov	r3, r7
 8002f64:	2204      	movs	r2, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4812      	ldr	r0, [pc, #72]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f6a:	f008 fa89 	bl	800b480 <HAL_TIM_PWM_ConfigChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM23_Init+0xb4>
  {
    Error_Handler();
 8002f74:	f7ff fca6 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f78:	463b      	mov	r3, r7
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480d      	ldr	r0, [pc, #52]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f80:	f008 fa7e 	bl	800b480 <HAL_TIM_PWM_ConfigChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM23_Init+0xca>
  {
    Error_Handler();
 8002f8a:	f7ff fc9b 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f8e:	463b      	mov	r3, r7
 8002f90:	220c      	movs	r2, #12
 8002f92:	4619      	mov	r1, r3
 8002f94:	4807      	ldr	r0, [pc, #28]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002f96:	f008 fa73 	bl	800b480 <HAL_TIM_PWM_ConfigChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM23_Init+0xe0>
  {
    Error_Handler();
 8002fa0:	f7ff fc90 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8002fa4:	4803      	ldr	r0, [pc, #12]	@ (8002fb4 <MX_TIM23_Init+0xf0>)
 8002fa6:	f000 f853 	bl	8003050 <HAL_TIM_MspPostInit>

}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	@ 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	24000554 	.word	0x24000554
 8002fb8:	4000e000 	.word	0x4000e000

08002fbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <HAL_TIM_Base_MspInit+0x48>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d116      	bne.n	8002ffc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002fce:	4b0e      	ldr	r3, [pc, #56]	@ (8003008 <HAL_TIM_Base_MspInit+0x4c>)
 8002fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003008 <HAL_TIM_Base_MspInit+0x4c>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_TIM_Base_MspInit+0x4c>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	202d      	movs	r0, #45	@ 0x2d
 8002ff2:	f002 fa34 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ff6:	202d      	movs	r0, #45	@ 0x2d
 8002ff8:	f002 fa4b 	bl	8005492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40002000 	.word	0x40002000
 8003008:	58024400 	.word	0x58024400

0800300c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM23)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	@ (8003048 <HAL_TIM_PWM_MspInit+0x3c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10e      	bne.n	800303c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_TIM_PWM_MspInit+0x40>)
 8003020:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003024:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_TIM_PWM_MspInit+0x40>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800302a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800302e:	4b07      	ldr	r3, [pc, #28]	@ (800304c <HAL_TIM_PWM_MspInit+0x40>)
 8003030:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	4000e000 	.word	0x4000e000
 800304c:	58024400 	.word	0x58024400

08003050 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM23)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <HAL_TIM_MspPostInit+0x68>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d11e      	bne.n	80030b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM23_MspPostInit 0 */

  /* USER CODE END TIM23_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003072:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <HAL_TIM_MspPostInit+0x6c>)
 8003074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003078:	4a10      	ldr	r2, [pc, #64]	@ (80030bc <HAL_TIM_MspPostInit+0x6c>)
 800307a:	f043 0320 	orr.w	r3, r3, #32
 800307e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <HAL_TIM_MspPostInit+0x6c>)
 8003084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
    PF0     ------> TIM23_CH1
    PF1     ------> TIM23_CH2
    PF2     ------> TIM23_CH3
    PF3     ------> TIM23_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003090:	230f      	movs	r3, #15
 8003092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80030a0:	230d      	movs	r3, #13
 80030a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	4619      	mov	r1, r3
 80030aa:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <HAL_TIM_MspPostInit+0x70>)
 80030ac:	f004 f9b6 	bl	800741c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 80030b0:	bf00      	nop
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	4000e000 	.word	0x4000e000
 80030bc:	58024400 	.word	0x58024400
 80030c0:	58021400 	.word	0x58021400

080030c4 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030c8:	4b22      	ldr	r3, [pc, #136]	@ (8003154 <MX_UART4_Init+0x90>)
 80030ca:	4a23      	ldr	r2, [pc, #140]	@ (8003158 <MX_UART4_Init+0x94>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030ce:	4b21      	ldr	r3, [pc, #132]	@ (8003154 <MX_UART4_Init+0x90>)
 80030d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <MX_UART4_Init+0x90>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <MX_UART4_Init+0x90>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <MX_UART4_Init+0x90>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003154 <MX_UART4_Init+0x90>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <MX_UART4_Init+0x90>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <MX_UART4_Init+0x90>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030fa:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <MX_UART4_Init+0x90>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003100:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <MX_UART4_Init+0x90>)
 8003102:	2200      	movs	r2, #0
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <MX_UART4_Init+0x90>)
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800310c:	4811      	ldr	r0, [pc, #68]	@ (8003154 <MX_UART4_Init+0x90>)
 800310e:	f008 ff2f 	bl	800bf70 <HAL_UART_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003118:	f7ff fbd4 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800311c:	2100      	movs	r1, #0
 800311e:	480d      	ldr	r0, [pc, #52]	@ (8003154 <MX_UART4_Init+0x90>)
 8003120:	f00b fbad 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800312a:	f7ff fbcb 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800312e:	2100      	movs	r1, #0
 8003130:	4808      	ldr	r0, [pc, #32]	@ (8003154 <MX_UART4_Init+0x90>)
 8003132:	f00b fbe2 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800313c:	f7ff fbc2 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003140:	4804      	ldr	r0, [pc, #16]	@ (8003154 <MX_UART4_Init+0x90>)
 8003142:	f00b fb63 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800314c:	f7ff fbba 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	240005a0 	.word	0x240005a0
 8003158:	40004c00 	.word	0x40004c00

0800315c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003160:	4b22      	ldr	r3, [pc, #136]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003162:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <MX_USART1_UART_Init+0x94>)
 8003164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003166:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003168:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800316c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800316e:	4b1f      	ldr	r3, [pc, #124]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800317a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003180:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003182:	220c      	movs	r2, #12
 8003184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003186:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003192:	4b16      	ldr	r3, [pc, #88]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800319e:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a4:	4811      	ldr	r0, [pc, #68]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 80031a6:	f008 fee3 	bl	800bf70 <HAL_UART_Init>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031b0:	f7ff fb88 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b4:	2100      	movs	r1, #0
 80031b6:	480d      	ldr	r0, [pc, #52]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 80031b8:	f00b fb61 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031c2:	f7ff fb7f 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031c6:	2100      	movs	r1, #0
 80031c8:	4808      	ldr	r0, [pc, #32]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 80031ca:	f00b fb96 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031d4:	f7ff fb76 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031d8:	4804      	ldr	r0, [pc, #16]	@ (80031ec <MX_USART1_UART_Init+0x90>)
 80031da:	f00b fb17 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031e4:	f7ff fb6e 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	24000634 	.word	0x24000634
 80031f0:	40011000 	.word	0x40011000

080031f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031f8:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 80031fa:	4a23      	ldr	r2, [pc, #140]	@ (8003288 <MX_USART3_UART_Init+0x94>)
 80031fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031fe:	4b21      	ldr	r3, [pc, #132]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003206:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800320c:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003212:	4b1c      	ldr	r3, [pc, #112]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003218:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 800321a:	220c      	movs	r2, #12
 800321c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800321e:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003224:	4b17      	ldr	r3, [pc, #92]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003226:	2200      	movs	r2, #0
 8003228:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800322a:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 800322c:	2200      	movs	r2, #0
 800322e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003232:	2200      	movs	r2, #0
 8003234:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003238:	2200      	movs	r2, #0
 800323a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800323c:	4811      	ldr	r0, [pc, #68]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 800323e:	f008 fe97 	bl	800bf70 <HAL_UART_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003248:	f7ff fb3c 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800324c:	2100      	movs	r1, #0
 800324e:	480d      	ldr	r0, [pc, #52]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003250:	f00b fb15 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800325a:	f7ff fb33 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800325e:	2100      	movs	r1, #0
 8003260:	4808      	ldr	r0, [pc, #32]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003262:	f00b fb4a 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800326c:	f7ff fb2a 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003270:	4804      	ldr	r0, [pc, #16]	@ (8003284 <MX_USART3_UART_Init+0x90>)
 8003272:	f00b facb 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800327c:	f7ff fb22 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	240006c8 	.word	0x240006c8
 8003288:	40004800 	.word	0x40004800

0800328c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003290:	4b22      	ldr	r3, [pc, #136]	@ (800331c <MX_USART6_UART_Init+0x90>)
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <MX_USART6_UART_Init+0x94>)
 8003294:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003296:	4b21      	ldr	r3, [pc, #132]	@ (800331c <MX_USART6_UART_Init+0x90>)
 8003298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800329c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800329e:	4b1f      	ldr	r3, [pc, #124]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032b0:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032b2:	220c      	movs	r2, #12
 80032b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032b6:	4b19      	ldr	r3, [pc, #100]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032bc:	4b17      	ldr	r3, [pc, #92]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032c2:	4b16      	ldr	r3, [pc, #88]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032c8:	4b14      	ldr	r3, [pc, #80]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032ce:	4b13      	ldr	r3, [pc, #76]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032d4:	4811      	ldr	r0, [pc, #68]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032d6:	f008 fe4b 	bl	800bf70 <HAL_UART_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80032e0:	f7ff faf0 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032e4:	2100      	movs	r1, #0
 80032e6:	480d      	ldr	r0, [pc, #52]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032e8:	f00b fac9 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80032f2:	f7ff fae7 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032f6:	2100      	movs	r1, #0
 80032f8:	4808      	ldr	r0, [pc, #32]	@ (800331c <MX_USART6_UART_Init+0x90>)
 80032fa:	f00b fafe 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003304:	f7ff fade 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003308:	4804      	ldr	r0, [pc, #16]	@ (800331c <MX_USART6_UART_Init+0x90>)
 800330a:	f00b fa7f 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003314:	f7ff fad6 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}
 800331c:	2400075c 	.word	0x2400075c
 8003320:	40011400 	.word	0x40011400

08003324 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8003328:	4b22      	ldr	r3, [pc, #136]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 800332a:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <MX_USART10_UART_Init+0x94>)
 800332c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800332e:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003334:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8003336:	4b1f      	ldr	r3, [pc, #124]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800333c:	4b1d      	ldr	r3, [pc, #116]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8003342:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8003348:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 800334a:	220c      	movs	r2, #12
 800334c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800334e:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8003354:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800335a:	4b16      	ldr	r3, [pc, #88]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003360:	4b14      	ldr	r3, [pc, #80]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003366:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003368:	2200      	movs	r2, #0
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800336c:	4811      	ldr	r0, [pc, #68]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 800336e:	f008 fdff 	bl	800bf70 <HAL_UART_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8003378:	f7ff faa4 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800337c:	2100      	movs	r1, #0
 800337e:	480d      	ldr	r0, [pc, #52]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003380:	f00b fa7d 	bl	800e87e <HAL_UARTEx_SetTxFifoThreshold>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800338a:	f7ff fa9b 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800338e:	2100      	movs	r1, #0
 8003390:	4808      	ldr	r0, [pc, #32]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 8003392:	f00b fab2 	bl	800e8fa <HAL_UARTEx_SetRxFifoThreshold>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 800339c:	f7ff fa92 	bl	80028c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80033a0:	4804      	ldr	r0, [pc, #16]	@ (80033b4 <MX_USART10_UART_Init+0x90>)
 80033a2:	f00b fa33 	bl	800e80c <HAL_UARTEx_DisableFifoMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80033ac:	f7ff fa8a 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	240007f0 	.word	0x240007f0
 80033b8:	40011c00 	.word	0x40011c00

080033bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0c0      	sub	sp, #256	@ 0x100
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033d8:	22b8      	movs	r2, #184	@ 0xb8
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f00b fc7d 	bl	800ecdc <memset>
  if(uartHandle->Instance==UART4)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4aa4      	ldr	r2, [pc, #656]	@ (8003678 <HAL_UART_MspInit+0x2bc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d147      	bne.n	800347c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80033ec:	f04f 0202 	mov.w	r2, #2
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003402:	4618      	mov	r0, r3
 8003404:	f005 faa0 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800340e:	f7ff fa59 	bl	80028c4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003412:	4b9a      	ldr	r3, [pc, #616]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003418:	4a98      	ldr	r2, [pc, #608]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 800341a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800341e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003422:	4b96      	ldr	r3, [pc, #600]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003430:	4b92      	ldr	r3, [pc, #584]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003436:	4a91      	ldr	r2, [pc, #580]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003440:	4b8e      	ldr	r3, [pc, #568]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800344e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003452:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003468:	2308      	movs	r3, #8
 800346a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003472:	4619      	mov	r1, r3
 8003474:	4882      	ldr	r0, [pc, #520]	@ (8003680 <HAL_UART_MspInit+0x2c4>)
 8003476:	f003 ffd1 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 800347a:	e175      	b.n	8003768 <HAL_UART_MspInit+0x3ac>
  else if(uartHandle->Instance==USART1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a80      	ldr	r2, [pc, #512]	@ (8003684 <HAL_UART_MspInit+0x2c8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d14f      	bne.n	8003526 <HAL_UART_MspInit+0x16a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003486:	f04f 0201 	mov.w	r2, #1
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003498:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800349c:	4618      	mov	r0, r3
 800349e:	f005 fa53 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80034a8:	f7ff fa0c 	bl	80028c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ac:	4b73      	ldr	r3, [pc, #460]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 80034ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b2:	4a72      	ldr	r2, [pc, #456]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034bc:	4b6f      	ldr	r3, [pc, #444]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 80034be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	4b6c      	ldr	r3, [pc, #432]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d0:	4a6a      	ldr	r2, [pc, #424]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034da:	4b68      	ldr	r3, [pc, #416]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 80034dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
 80034e6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80034e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80034ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003502:	2304      	movs	r3, #4
 8003504:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800350c:	4619      	mov	r1, r3
 800350e:	485e      	ldr	r0, [pc, #376]	@ (8003688 <HAL_UART_MspInit+0x2cc>)
 8003510:	f003 ff84 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003514:	2200      	movs	r2, #0
 8003516:	2100      	movs	r1, #0
 8003518:	2025      	movs	r0, #37	@ 0x25
 800351a:	f001 ffa0 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800351e:	2025      	movs	r0, #37	@ 0x25
 8003520:	f001 ffb7 	bl	8005492 <HAL_NVIC_EnableIRQ>
}
 8003524:	e120      	b.n	8003768 <HAL_UART_MspInit+0x3ac>
  else if(uartHandle->Instance==USART3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a58      	ldr	r2, [pc, #352]	@ (800368c <HAL_UART_MspInit+0x2d0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d14f      	bne.n	80035d0 <HAL_UART_MspInit+0x214>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003530:	f04f 0202 	mov.w	r2, #2
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003542:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003546:	4618      	mov	r0, r3
 8003548:	f005 f9fe 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8003552:	f7ff f9b7 	bl	80028c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003556:	4b49      	ldr	r3, [pc, #292]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800355c:	4a47      	ldr	r2, [pc, #284]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003562:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003566:	4b45      	ldr	r3, [pc, #276]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800356c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003574:	4b41      	ldr	r3, [pc, #260]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800357a:	4a40      	ldr	r2, [pc, #256]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003584:	4b3d      	ldr	r3, [pc, #244]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003592:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003596:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035ac:	2307      	movs	r3, #7
 80035ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80035b6:	4619      	mov	r1, r3
 80035b8:	4835      	ldr	r0, [pc, #212]	@ (8003690 <HAL_UART_MspInit+0x2d4>)
 80035ba:	f003 ff2f 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2100      	movs	r1, #0
 80035c2:	2027      	movs	r0, #39	@ 0x27
 80035c4:	f001 ff4b 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035c8:	2027      	movs	r0, #39	@ 0x27
 80035ca:	f001 ff62 	bl	8005492 <HAL_NVIC_EnableIRQ>
}
 80035ce:	e0cb      	b.n	8003768 <HAL_UART_MspInit+0x3ac>
  else if(uartHandle->Instance==USART6)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003694 <HAL_UART_MspInit+0x2d8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d15e      	bne.n	8003698 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035da:	f04f 0201 	mov.w	r2, #1
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035f0:	4618      	mov	r0, r3
 80035f2:	f005 f9a9 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_MspInit+0x244>
      Error_Handler();
 80035fc:	f7ff f962 	bl	80028c4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003600:	4b1e      	ldr	r3, [pc, #120]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003606:	4a1d      	ldr	r2, [pc, #116]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003610:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003624:	4a15      	ldr	r2, [pc, #84]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800362e:	4b13      	ldr	r3, [pc, #76]	@ (800367c <HAL_UART_MspInit+0x2c0>)
 8003630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800363c:	23c0      	movs	r3, #192	@ 0xc0
 800363e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003654:	2307      	movs	r3, #7
 8003656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	@ (8003680 <HAL_UART_MspInit+0x2c4>)
 8003662:	f003 fedb 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	2047      	movs	r0, #71	@ 0x47
 800366c:	f001 fef7 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003670:	2047      	movs	r0, #71	@ 0x47
 8003672:	f001 ff0e 	bl	8005492 <HAL_NVIC_EnableIRQ>
}
 8003676:	e077      	b.n	8003768 <HAL_UART_MspInit+0x3ac>
 8003678:	40004c00 	.word	0x40004c00
 800367c:	58024400 	.word	0x58024400
 8003680:	58020800 	.word	0x58020800
 8003684:	40011000 	.word	0x40011000
 8003688:	58020400 	.word	0x58020400
 800368c:	40004800 	.word	0x40004800
 8003690:	58020c00 	.word	0x58020c00
 8003694:	40011400 	.word	0x40011400
  else if(uartHandle->Instance==USART10)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <HAL_UART_MspInit+0x3b8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d162      	bne.n	8003768 <HAL_UART_MspInit+0x3ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 80036a2:	f04f 0201 	mov.w	r2, #1
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036b8:	4618      	mov	r0, r3
 80036ba:	f005 f945 	bl	8008948 <HAL_RCCEx_PeriphCLKConfig>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_MspInit+0x30c>
      Error_Handler();
 80036c4:	f7ff f8fe 	bl	80028c4 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 80036c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <HAL_UART_MspInit+0x3bc>)
 80036ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003778 <HAL_UART_MspInit+0x3bc>)
 80036d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036d8:	4b27      	ldr	r3, [pc, #156]	@ (8003778 <HAL_UART_MspInit+0x3bc>)
 80036da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036e6:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <HAL_UART_MspInit+0x3bc>)
 80036e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ec:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <HAL_UART_MspInit+0x3bc>)
 80036ee:	f043 0310 	orr.w	r3, r3, #16
 80036f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036f6:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_UART_MspInit+0x3bc>)
 80036f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003704:	2304      	movs	r3, #4
 8003706:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 800371c:	2304      	movs	r3, #4
 800371e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003722:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003726:	4619      	mov	r1, r3
 8003728:	4814      	ldr	r0, [pc, #80]	@ (800377c <HAL_UART_MspInit+0x3c0>)
 800372a:	f003 fe77 	bl	800741c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800372e:	2308      	movs	r3, #8
 8003730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8003746:	230b      	movs	r3, #11
 8003748:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800374c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003750:	4619      	mov	r1, r3
 8003752:	480a      	ldr	r0, [pc, #40]	@ (800377c <HAL_UART_MspInit+0x3c0>)
 8003754:	f003 fe62 	bl	800741c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	209c      	movs	r0, #156	@ 0x9c
 800375e:	f001 fe7e 	bl	800545e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8003762:	209c      	movs	r0, #156	@ 0x9c
 8003764:	f001 fe95 	bl	8005492 <HAL_NVIC_EnableIRQ>
}
 8003768:	bf00      	nop
 800376a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40011c00 	.word	0x40011c00
 8003778:	58024400 	.word	0x58024400
 800377c:	58021000 	.word	0x58021000

08003780 <test_request_reqfirmwareversion>:
        xsens_mti_parse( interface, buffer[i] );
    }
}

void test_request_reqfirmwareversion( void )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0

    uint8_t expected[] = {  0xFA,
 8003786:	4a07      	ldr	r2, [pc, #28]	@ (80037a4 <test_request_reqfirmwareversion+0x24>)
 8003788:	463b      	mov	r3, r7
 800378a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800378e:	6018      	str	r0, [r3, #0]
 8003790:	3304      	adds	r3, #4
 8003792:	7019      	strb	r1, [r3, #0]
                            0xFF,
                            0x30,
                            0x00,
                            0xD1 };

    xsens_mti_request( &test_imu, 0x30);
 8003794:	2130      	movs	r1, #48	@ 0x30
 8003796:	4804      	ldr	r0, [pc, #16]	@ (80037a8 <test_request_reqfirmwareversion+0x28>)
 8003798:	f000 f912 	bl	80039c0 <xsens_mti_request>
    //TEST_ASSERT_EQUAL_HEX8_ARRAY( &expected, &outbound_cache, sizeof(expected) );
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	0800f854 	.word	0x0800f854
 80037a8:	24000884 	.word	0x24000884

080037ac <xsens_mti_buffer_crc>:




uint8_t xsens_mti_buffer_crc( uint8_t *buffer, uint16_t size )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	73fb      	strb	r3, [r7, #15]

    for( uint16_t i = 0; i < size; i++ )
 80037bc:	2300      	movs	r3, #0
 80037be:	81bb      	strh	r3, [r7, #12]
 80037c0:	e009      	b.n	80037d6 <xsens_mti_buffer_crc+0x2a>
    {
        crc -= buffer[i];
 80037c2:	89bb      	ldrh	r3, [r7, #12]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	73fb      	strb	r3, [r7, #15]
    for( uint16_t i = 0; i < size; i++ )
 80037d0:	89bb      	ldrh	r3, [r7, #12]
 80037d2:	3301      	adds	r3, #1
 80037d4:	81bb      	strh	r3, [r7, #12]
 80037d6:	89ba      	ldrh	r2, [r7, #12]
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3f1      	bcc.n	80037c2 <xsens_mti_buffer_crc+0x16>
    }

    return crc;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <xsens_mti_send>:

void xsens_mti_send( xsens_interface_t *interface, xsens_packet_buffer_t *packet )
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80037f8:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80037fc:	6018      	str	r0, [r3, #0]
 80037fe:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003802:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003806:	6019      	str	r1, [r3, #0]
    if( interface && packet )
 8003808:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800380c:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80cc 	beq.w	80039b0 <xsens_mti_send+0x1c4>
 8003818:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800381c:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80c4 	beq.w	80039b0 <xsens_mti_send+0x1c4>
    {
        uint8_t buffer[2048] = { 0 };
 8003828:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800382c:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f00b fa4d 	bl	800ecdc <memset>
        uint16_t buffer_pos = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
        uint8_t crc = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d

        // Preamble
        buffer[buffer_pos++] = PREAMBLE_BYTE;
 800384e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	f8a7 280e 	strh.w	r2, [r7, #2062]	@ 0x80e
 8003858:	461a      	mov	r2, r3
 800385a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800385e:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8003862:	21fa      	movs	r1, #250	@ 0xfa
 8003864:	5499      	strb	r1, [r3, r2]

        // Device Address
        buffer[buffer_pos++] = ADDRESS_BYTE;
 8003866:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	f8a7 280e 	strh.w	r2, [r7, #2062]	@ 0x80e
 8003870:	461a      	mov	r2, r3
 8003872:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003876:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800387a:	21ff      	movs	r1, #255	@ 0xff
 800387c:	5499      	strb	r1, [r3, r2]

        // Message ID
        buffer[buffer_pos++] = packet->message_id;
 800387e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	f8a7 280e 	strh.w	r2, [r7, #2062]	@ 0x80e
 8003888:	461a      	mov	r2, r3
 800388a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800388e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	7819      	ldrb	r1, [r3, #0]
 8003896:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800389a:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800389e:	5499      	strb	r1, [r3, r2]

        // Payload Length
        if( packet->length < 0xFF )
 80038a0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80038a4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	885b      	ldrh	r3, [r3, #2]
 80038ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80038ae:	d812      	bhi.n	80038d6 <xsens_mti_send+0xea>
        {
            buffer[buffer_pos++] = packet->length;
 80038b0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80038b4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	8859      	ldrh	r1, [r3, #2]
 80038bc:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	f8a7 280e 	strh.w	r2, [r7, #2062]	@ 0x80e
 80038c6:	461a      	mov	r2, r3
 80038c8:	b2c9      	uxtb	r1, r1
 80038ca:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80038ce:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80038d2:	5499      	strb	r1, [r3, r2]
 80038d4:	e01e      	b.n	8003914 <xsens_mti_send+0x128>
        }
        else
        {
            // Extended packet handling sets the normal length byte to 255,
            // followed by two bytes of payload data
            buffer[buffer_pos++] = 0xFF;
 80038d6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	f8a7 280e 	strh.w	r2, [r7, #2062]	@ 0x80e
 80038e0:	461a      	mov	r2, r3
 80038e2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80038e6:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80038ea:	21ff      	movs	r1, #255	@ 0xff
 80038ec:	5499      	strb	r1, [r3, r2]

            memcpy( &buffer[buffer_pos], &packet->length, 2 );
 80038ee:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80038f2:	f107 020c 	add.w	r2, r7, #12
 80038f6:	4413      	add	r3, r2
 80038f8:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 80038fc:	f5a2 6201 	sub.w	r2, r2, #2064	@ 0x810
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	3202      	adds	r2, #2
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
            buffer_pos += 2;
 800390a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 800390e:	3302      	adds	r3, #2
 8003910:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
        }

        // Payload Data
        if( packet->length != 0 )
 8003914:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003918:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	885b      	ldrh	r3, [r3, #2]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01e      	beq.n	8003962 <xsens_mti_send+0x176>
        {
            memcpy( &buffer[buffer_pos], (uint8_t *)packet->payload, packet->length );
 8003924:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8003928:	f107 020c 	add.w	r2, r7, #12
 800392c:	18d0      	adds	r0, r2, r3
 800392e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003932:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	1d19      	adds	r1, r3, #4
 800393a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800393e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	885b      	ldrh	r3, [r3, #2]
 8003946:	461a      	mov	r2, r3
 8003948:	f00b fa22 	bl	800ed90 <memcpy>
            buffer_pos += packet->length;
 800394c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003950:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	885a      	ldrh	r2, [r3, #2]
 8003958:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 800395c:	4413      	add	r3, r2
 800395e:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
        }

        // Calculate the CRC of the packet, exluding the preamble
        buffer[buffer_pos] = xsens_mti_buffer_crc( &buffer[1], buffer_pos-1 );
 8003962:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	f8b7 480e 	ldrh.w	r4, [r7, #2062]	@ 0x80e
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	3301      	adds	r3, #1
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff18 	bl	80037ac <xsens_mti_buffer_crc>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003984:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8003988:	551a      	strb	r2, [r3, r4]
        buffer_pos += 1;
 800398a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 800398e:	3301      	adds	r3, #1
 8003990:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e

        // Pass the buffer to the user so they can send to hardware
        //if( interface->output_cb )
        //{
        	if(HAL_UART_Transmit(&huart3, buffer, buffer_pos, HAL_MAX_DELAY) != HAL_OK) {
 8003994:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	@ 0x80e
 8003998:	f107 010c 	add.w	r1, r7, #12
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	4806      	ldr	r0, [pc, #24]	@ (80039bc <xsens_mti_send+0x1d0>)
 80039a2:	f008 fb35 	bl	800c010 <HAL_UART_Transmit>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <xsens_mti_send+0x1c4>
        			//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);  // DIR = 1 for transmit mode
        			Error_Handler();  // Define your error handler here
 80039ac:	f7fe ff8a 	bl	80028c4 <Error_Handler>
        		//}
            //interface->output_cb( buffer, buffer_pos );
        }
    }
}
 80039b0:	bf00      	nop
 80039b2:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	240006c8 	.word	0x240006c8

080039c0 <xsens_mti_request>:

void xsens_mti_request( xsens_interface_t *interface, uint8_t id )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	f5ad 6d01 	sub.w	sp, sp, #2064	@ 0x810
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80039cc:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80039d0:	6018      	str	r0, [r3, #0]
 80039d2:	460a      	mov	r2, r1
 80039d4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80039d8:	f6a3 030d 	subw	r3, r3, #2061	@ 0x80d
 80039dc:	701a      	strb	r2, [r3, #0]
    xsens_packet_buffer_t packet = { 0 };
 80039de:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80039e2:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80039e6:	4618      	mov	r0, r3
 80039e8:	f640 0304 	movw	r3, #2052	@ 0x804
 80039ec:	461a      	mov	r2, r3
 80039ee:	2100      	movs	r1, #0
 80039f0:	f00b f974 	bl	800ecdc <memset>

    packet.message_id = id;
 80039f4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80039f8:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80039fc:	f507 6201 	add.w	r2, r7, #2064	@ 0x810
 8003a00:	f6a2 020d 	subw	r2, r2, #2061	@ 0x80d
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	701a      	strb	r2, [r3, #0]
    packet.length = 0;
 8003a08:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003a0c:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8003a10:	2200      	movs	r2, #0
 8003a12:	805a      	strh	r2, [r3, #2]
    packet.payload[0] = 0;
 8003a14:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003a18:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	711a      	strb	r2, [r3, #4]

    xsens_mti_send( interface, &packet );
 8003a20:	f107 020c 	add.w	r2, r7, #12
 8003a24:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003a28:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f7ff fedc 	bl	80037ec <xsens_mti_send>
}
 8003a34:	bf00      	nop
 8003a36:	f507 6701 	add.w	r7, r7, #2064	@ 0x810
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a40:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003a7c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003a44:	f7ff fa02 	bl	8002e4c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a48:	f7ff f970 	bl	8002d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a4c:	480c      	ldr	r0, [pc, #48]	@ (8003a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a4e:	490d      	ldr	r1, [pc, #52]	@ (8003a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a50:	4a0d      	ldr	r2, [pc, #52]	@ (8003a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a54:	e002      	b.n	8003a5c <LoopCopyDataInit>

08003a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a5a:	3304      	adds	r3, #4

08003a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a60:	d3f9      	bcc.n	8003a56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a64:	4c0a      	ldr	r4, [pc, #40]	@ (8003a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a68:	e001      	b.n	8003a6e <LoopFillZerobss>

08003a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a6c:	3204      	adds	r2, #4

08003a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a70:	d3fb      	bcc.n	8003a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a72:	f00b f967 	bl	800ed44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a76:	f7fe fd79 	bl	800256c <main>
  bx  lr
 8003a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a84:	24000124 	.word	0x24000124
  ldr r2, =_sidata
 8003a88:	0800fa34 	.word	0x0800fa34
  ldr r2, =_sbss
 8003a8c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8003a90:	24001278 	.word	0x24001278

08003a94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a94:	e7fe      	b.n	8003a94 <ADC3_IRQHandler>
	...

08003a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a9e:	2003      	movs	r0, #3
 8003aa0:	f001 fcd2 	bl	8005448 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003aa4:	f004 fd7a 	bl	800859c <HAL_RCC_GetSysClockFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_Init+0x68>)
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	4913      	ldr	r1, [pc, #76]	@ (8003b04 <HAL_Init+0x6c>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <HAL_Init+0x68>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	4a0e      	ldr	r2, [pc, #56]	@ (8003b04 <HAL_Init+0x6c>)
 8003acc:	5cd3      	ldrb	r3, [r2, r3]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8003b08 <HAL_Init+0x70>)
 8003ada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003adc:	4a0b      	ldr	r2, [pc, #44]	@ (8003b0c <HAL_Init+0x74>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ae2:	200f      	movs	r0, #15
 8003ae4:	f000 f814 	bl	8003b10 <HAL_InitTick>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e002      	b.n	8003af8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003af2:	f7ff f837 	bl	8002b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	58024400 	.word	0x58024400
 8003b04:	0800f8bc 	.word	0x0800f8bc
 8003b08:	240000c8 	.word	0x240000c8
 8003b0c:	240000c4 	.word	0x240000c4

08003b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003b18:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <HAL_InitTick+0x60>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e021      	b.n	8003b68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b24:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <HAL_InitTick+0x64>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <HAL_InitTick+0x60>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fcb7 	bl	80054ae <HAL_SYSTICK_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00e      	b.n	8003b68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d80a      	bhi.n	8003b66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b50:	2200      	movs	r2, #0
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	f001 fc81 	bl	800545e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b5c:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <HAL_InitTick+0x68>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	240000d0 	.word	0x240000d0
 8003b74:	240000c4 	.word	0x240000c4
 8003b78:	240000cc 	.word	0x240000cc

08003b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_IncTick+0x20>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_IncTick+0x24>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <HAL_IncTick+0x24>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	240000d0 	.word	0x240000d0
 8003ba0:	2400112c 	.word	0x2400112c

08003ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	@ (8003bb8 <HAL_GetTick+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2400112c 	.word	0x2400112c

08003bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc4:	f7ff ffee 	bl	8003ba4 <HAL_GetTick>
 8003bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d005      	beq.n	8003be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <HAL_Delay+0x44>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003be2:	bf00      	nop
 8003be4:	f7ff ffde 	bl	8003ba4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d8f7      	bhi.n	8003be4 <HAL_Delay+0x28>
  {
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	240000d0 	.word	0x240000d0

08003c04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a18      	ldr	r2, [pc, #96]	@ (8003cdc <LL_ADC_SetChannelPreselection+0x70>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d027      	beq.n	8003cce <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <LL_ADC_SetChannelPreselection+0x2c>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	0e9b      	lsrs	r3, r3, #26
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2201      	movs	r2, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	e015      	b.n	8003cc4 <LL_ADC_SetChannelPreselection+0x58>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	e003      	b.n	8003cba <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	69d2      	ldr	r2, [r2, #28]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	58026000 	.word	0x58026000

08003ce0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3360      	adds	r3, #96	@ 0x60
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a10      	ldr	r2, [pc, #64]	@ (8003d40 <LL_ADC_SetOffset+0x60>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10b      	bne.n	8003d1c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003d1a:	e00b      	b.n	8003d34 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	58026000 	.word	0x58026000

08003d44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3360      	adds	r3, #96	@ 0x60
 8003d52:	461a      	mov	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	611a      	str	r2, [r3, #16]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	@ (8003de4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3360      	adds	r3, #96	@ 0x60
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	601a      	str	r2, [r3, #0]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	58026000 	.word	0x58026000

08003de8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e28 <LL_ADC_SetOffsetSaturation+0x40>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10e      	bne.n	8003e1a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3360      	adds	r3, #96	@ 0x60
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	58026000 	.word	0x58026000

08003e2c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e6c <LL_ADC_SetOffsetSign+0x40>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10e      	bne.n	8003e5e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3360      	adds	r3, #96	@ 0x60
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	58026000 	.word	0x58026000

08003e70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3360      	adds	r3, #96	@ 0x60
 8003e80:	461a      	mov	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec0 <LL_ADC_SetOffsetState+0x50>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003ea2:	e007      	b.n	8003eb4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	58026000 	.word	0x58026000

08003ec4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3330      	adds	r3, #48	@ 0x30
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	4413      	add	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	211f      	movs	r1, #31
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0e9b      	lsrs	r3, r3, #26
 8003efc:	f003 011f 	and.w	r1, r3, #31
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0e5b      	lsrs	r3, r3, #25
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	4413      	add	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	0d1b      	lsrs	r3, r3, #20
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2107      	movs	r1, #7
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	401a      	ands	r2, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0d1b      	lsrs	r3, r3, #20
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	431a      	orrs	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a1a      	ldr	r2, [pc, #104]	@ (8003fec <LL_ADC_SetChannelSingleDiff+0x78>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d115      	bne.n	8003fb4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f94:	43db      	mvns	r3, r3
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f003 0318 	and.w	r3, r3, #24
 8003f9e:	4914      	ldr	r1, [pc, #80]	@ (8003ff0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003fa0:	40d9      	lsrs	r1, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003fb2:	e014      	b.n	8003fde <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0318 	and.w	r3, r3, #24
 8003fca:	4909      	ldr	r1, [pc, #36]	@ (8003ff0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003fcc:	40d9      	lsrs	r1, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	58026000 	.word	0x58026000
 8003ff0:	000fffff 	.word	0x000fffff

08003ff4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6093      	str	r3, [r2, #8]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	5fffffc0 	.word	0x5fffffc0

08004018 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800402c:	d101      	bne.n	8004032 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <LL_ADC_EnableInternalRegulator+0x24>)
 800404e:	4013      	ands	r3, r2
 8004050:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	6fffffc0 	.word	0x6fffffc0

08004068 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800407c:	d101      	bne.n	8004082 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <LL_ADC_IsEnabled+0x18>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <LL_ADC_IsEnabled+0x1a>
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d101      	bne.n	80040ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d101      	bne.n	80040f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004104:	b590      	push	{r4, r7, lr}
 8004106:	b089      	sub	sp, #36	@ 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1ee      	b.n	80044fc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fd fb63 	bl	80017f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff67 	bl	8004018 <LL_ADC_IsDeepPowerDownEnabled>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff4d 	bl	8003ff4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff82 	bl	8004068 <LL_ADC_IsInternalRegulatorEnabled>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d114      	bne.n	8004194 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff ff66 	bl	8004040 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004174:	4b8e      	ldr	r3, [pc, #568]	@ (80043b0 <HAL_ADC_Init+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	4a8e      	ldr	r2, [pc, #568]	@ (80043b4 <HAL_ADC_Init+0x2b0>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004186:	e002      	b.n	800418e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3b01      	subs	r3, #1
 800418c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f9      	bne.n	8004188 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff65 	bl	8004068 <LL_ADC_IsInternalRegulatorEnabled>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff76 	bl	80040b6 <LL_ADC_REG_IsConversionOngoing>
 80041ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 8188 	bne.w	80044ea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 8184 	bne.w	80044ea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041ea:	f043 0202 	orr.w	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff4a 	bl	8004090 <LL_ADC_IsEnabled>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d136      	bne.n	8004270 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6c      	ldr	r2, [pc, #432]	@ (80043b8 <HAL_ADC_Init+0x2b4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_ADC_Init+0x112>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6a      	ldr	r2, [pc, #424]	@ (80043bc <HAL_ADC_Init+0x2b8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10e      	bne.n	8004234 <HAL_ADC_Init+0x130>
 8004216:	4868      	ldr	r0, [pc, #416]	@ (80043b8 <HAL_ADC_Init+0x2b4>)
 8004218:	f7ff ff3a 	bl	8004090 <LL_ADC_IsEnabled>
 800421c:	4604      	mov	r4, r0
 800421e:	4867      	ldr	r0, [pc, #412]	@ (80043bc <HAL_ADC_Init+0x2b8>)
 8004220:	f7ff ff36 	bl	8004090 <LL_ADC_IsEnabled>
 8004224:	4603      	mov	r3, r0
 8004226:	4323      	orrs	r3, r4
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e008      	b.n	8004246 <HAL_ADC_Init+0x142>
 8004234:	4862      	ldr	r0, [pc, #392]	@ (80043c0 <HAL_ADC_Init+0x2bc>)
 8004236:	f7ff ff2b 	bl	8004090 <LL_ADC_IsEnabled>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5a      	ldr	r2, [pc, #360]	@ (80043b8 <HAL_ADC_Init+0x2b4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_ADC_Init+0x15a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a58      	ldr	r2, [pc, #352]	@ (80043bc <HAL_ADC_Init+0x2b8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_ADC_Init+0x15e>
 800425e:	4a59      	ldr	r2, [pc, #356]	@ (80043c4 <HAL_ADC_Init+0x2c0>)
 8004260:	e000      	b.n	8004264 <HAL_ADC_Init+0x160>
 8004262:	4a59      	ldr	r2, [pc, #356]	@ (80043c8 <HAL_ADC_Init+0x2c4>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7ff fcca 	bl	8003c04 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a52      	ldr	r2, [pc, #328]	@ (80043c0 <HAL_ADC_Init+0x2bc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d129      	bne.n	80042ce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	7e5b      	ldrb	r3, [r3, #25]
 800427e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004284:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800428a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d013      	beq.n	80042bc <HAL_ADC_Init+0x1b8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b0c      	cmp	r3, #12
 800429a:	d00d      	beq.n	80042b8 <HAL_ADC_Init+0x1b4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b1c      	cmp	r3, #28
 80042a2:	d007      	beq.n	80042b4 <HAL_ADC_Init+0x1b0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b18      	cmp	r3, #24
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_Init+0x1ac>
 80042ac:	2318      	movs	r3, #24
 80042ae:	e006      	b.n	80042be <HAL_ADC_Init+0x1ba>
 80042b0:	2300      	movs	r3, #0
 80042b2:	e004      	b.n	80042be <HAL_ADC_Init+0x1ba>
 80042b4:	2310      	movs	r3, #16
 80042b6:	e002      	b.n	80042be <HAL_ADC_Init+0x1ba>
 80042b8:	2308      	movs	r3, #8
 80042ba:	e000      	b.n	80042be <HAL_ADC_Init+0x1ba>
 80042bc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80042be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e00e      	b.n	80042ec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7e5b      	ldrb	r3, [r3, #25]
 80042d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80042de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d106      	bne.n	8004304 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	3b01      	subs	r3, #1
 80042fc:	045b      	lsls	r3, r3, #17
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a26      	ldr	r2, [pc, #152]	@ (80043c0 <HAL_ADC_Init+0x2bc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d115      	bne.n	8004356 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <HAL_ADC_Init+0x2c8>)
 8004332:	4013      	ands	r3, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	430b      	orrs	r3, r1
 800433c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	611a      	str	r2, [r3, #16]
 8004354:	e009      	b.n	800436a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	4b1c      	ldr	r3, [pc, #112]	@ (80043d0 <HAL_ADC_Init+0x2cc>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	69b9      	ldr	r1, [r7, #24]
 8004366:	430b      	orrs	r3, r1
 8004368:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fea1 	bl	80040b6 <LL_ADC_REG_IsConversionOngoing>
 8004374:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff feae 	bl	80040dc <LL_ADC_INJ_IsConversionOngoing>
 8004380:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 808e 	bne.w	80044a6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 808a 	bne.w	80044a6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <HAL_ADC_Init+0x2bc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d11b      	bne.n	80043d4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7e1b      	ldrb	r3, [r3, #24]
 80043a0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043a8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e018      	b.n	80043e2 <HAL_ADC_Init+0x2de>
 80043b0:	240000c4 	.word	0x240000c4
 80043b4:	053e2d63 	.word	0x053e2d63
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40022100 	.word	0x40022100
 80043c0:	58026000 	.word	0x58026000
 80043c4:	40022300 	.word	0x40022300
 80043c8:	58026300 	.word	0x58026300
 80043cc:	fff04007 	.word	0xfff04007
 80043d0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	7e1b      	ldrb	r3, [r3, #24]
 80043d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	4b46      	ldr	r3, [pc, #280]	@ (8004504 <HAL_ADC_Init+0x400>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d137      	bne.n	8004470 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3f      	ldr	r2, [pc, #252]	@ (8004508 <HAL_ADC_Init+0x404>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d116      	bne.n	800443e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	4b3d      	ldr	r3, [pc, #244]	@ (800450c <HAL_ADC_Init+0x408>)
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004422:	4311      	orrs	r1, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004428:	4311      	orrs	r1, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800442e:	430a      	orrs	r2, r1
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	611a      	str	r2, [r3, #16]
 800443c:	e020      	b.n	8004480 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	4b32      	ldr	r3, [pc, #200]	@ (8004510 <HAL_ADC_Init+0x40c>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800444c:	3a01      	subs	r2, #1
 800444e:	0411      	lsls	r1, r2, #16
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004460:	430a      	orrs	r2, r1
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	e007      	b.n	8004480 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_ADC_Init+0x404>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d002      	beq.n	80044a6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fd0b 	bl	8004ebc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d10c      	bne.n	80044c8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	f023 010f 	bic.w	r1, r3, #15
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	1e5a      	subs	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80044c6:	e007      	b.n	80044d8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 020f 	bic.w	r2, r2, #15
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044dc:	f023 0303 	bic.w	r3, r3, #3
 80044e0:	f043 0201 	orr.w	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	661a      	str	r2, [r3, #96]	@ 0x60
 80044e8:	e007      	b.n	80044fa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ee:	f043 0210 	orr.w	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3724      	adds	r7, #36	@ 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd90      	pop	{r4, r7, pc}
 8004504:	ffffbffc 	.word	0xffffbffc
 8004508:	58026000 	.word	0x58026000
 800450c:	fc00f81f 	.word	0xfc00f81f
 8004510:	fc00f81e 	.word	0xfc00f81e

08004514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b0a5      	sub	sp, #148	@ 0x94
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800452e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4aa4      	ldr	r2, [pc, #656]	@ (80047c8 <HAL_ADC_ConfigChannel+0x2b4>)
 8004536:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x34>
 8004542:	2302      	movs	r3, #2
 8004544:	f000 bca2 	b.w	8004e8c <HAL_ADC_ConfigChannel+0x978>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fdae 	bl	80040b6 <LL_ADC_REG_IsConversionOngoing>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8486 	bne.w	8004e6e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db31      	blt.n	80045ce <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a97      	ldr	r2, [pc, #604]	@ (80047cc <HAL_ADC_ConfigChannel+0x2b8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800457c:	2b00      	cmp	r3, #0
 800457e:	d108      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x7e>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e9b      	lsrs	r3, r3, #26
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2201      	movs	r2, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	e016      	b.n	80045c0 <HAL_ADC_ConfigChannel+0xac>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80045a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e003      	b.n	80045b6 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80045ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2201      	movs	r2, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	69d1      	ldr	r1, [r2, #28]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	f7ff fc72 	bl	8003ec4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fd66 	bl	80040b6 <LL_ADC_REG_IsConversionOngoing>
 80045ea:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fd72 	bl	80040dc <LL_ADC_INJ_IsConversionOngoing>
 80045f8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 824a 	bne.w	8004a9a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8245 	bne.w	8004a9a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	461a      	mov	r2, r3
 800461e:	f7ff fc7d 	bl	8003f1c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a69      	ldr	r2, [pc, #420]	@ (80047cc <HAL_ADC_ConfigChannel+0x2b8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10d      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	08db      	lsrs	r3, r3, #3
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004646:	e032      	b.n	80046ae <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004648:	4b61      	ldr	r3, [pc, #388]	@ (80047d0 <HAL_ADC_ConfigChannel+0x2bc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004654:	d10b      	bne.n	800466e <HAL_ADC_ConfigChannel+0x15a>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	e01d      	b.n	80046aa <HAL_ADC_ConfigChannel+0x196>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x180>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	e00a      	b.n	80046aa <HAL_ADC_ConfigChannel+0x196>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d048      	beq.n	8004748 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6919      	ldr	r1, [r3, #16]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046c6:	f7ff fb0b 	bl	8003ce0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3f      	ldr	r2, [pc, #252]	@ (80047cc <HAL_ADC_ConfigChannel+0x2b8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d119      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6919      	ldr	r1, [r3, #16]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	461a      	mov	r2, r3
 80046e2:	f7ff fba3 	bl	8003e2c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x1ea>
 80046f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046fc:	e000      	b.n	8004700 <HAL_ADC_ConfigChannel+0x1ec>
 80046fe:	2300      	movs	r3, #0
 8004700:	461a      	mov	r2, r3
 8004702:	f7ff fb71 	bl	8003de8 <LL_ADC_SetOffsetSaturation>
 8004706:	e1c8      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6919      	ldr	r1, [r3, #16]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004716:	2b01      	cmp	r3, #1
 8004718:	d102      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x20c>
 800471a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800471e:	e000      	b.n	8004722 <HAL_ADC_ConfigChannel+0x20e>
 8004720:	2300      	movs	r3, #0
 8004722:	461a      	mov	r2, r3
 8004724:	f7ff fb3e 	bl	8003da4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6919      	ldr	r1, [r3, #16]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	7e1b      	ldrb	r3, [r3, #24]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d102      	bne.n	800473e <HAL_ADC_ConfigChannel+0x22a>
 8004738:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800473c:	e000      	b.n	8004740 <HAL_ADC_ConfigChannel+0x22c>
 800473e:	2300      	movs	r3, #0
 8004740:	461a      	mov	r2, r3
 8004742:	f7ff fb15 	bl	8003d70 <LL_ADC_SetDataRightShift>
 8004746:	e1a8      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_ADC_ConfigChannel+0x2b8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f040 815b 	bne.w	8004a0a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff faf2 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x26c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fae7 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004776:	4603      	mov	r3, r0
 8004778:	0e9b      	lsrs	r3, r3, #26
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	e017      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x29c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fadc 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 800478c:	4603      	mov	r3, r0
 800478e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800479a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800479c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80047a2:	2320      	movs	r3, #32
 80047a4:	e003      	b.n	80047ae <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80047a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x2c0>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0e9b      	lsrs	r3, r3, #26
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	e017      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x2e4>
 80047c8:	47ff0000 	.word	0x47ff0000
 80047cc:	58026000 	.word	0x58026000
 80047d0:	5c001000 	.word	0x5c001000
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80047e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80047e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80047f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d106      	bne.n	800480a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fb33 	bl	8003e70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fa97 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004816:	4603      	mov	r3, r0
 8004818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x322>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fa8c 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 800482c:	4603      	mov	r3, r0
 800482e:	0e9b      	lsrs	r3, r3, #26
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	e017      	b.n	8004866 <HAL_ADC_ConfigChannel+0x352>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2101      	movs	r1, #1
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fa81 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800484e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004850:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8004858:	2320      	movs	r3, #32
 800485a:	e003      	b.n	8004864 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800485c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_ADC_ConfigChannel+0x36a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0e9b      	lsrs	r3, r3, #26
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	e011      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x38e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800488c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004896:	2320      	movs	r3, #32
 8004898:	e003      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800489a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800489c:	fab3 f383 	clz	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d106      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fade 	bl	8003e70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fa42 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x3cc>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2102      	movs	r1, #2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fa37 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80048d6:	4603      	mov	r3, r0
 80048d8:	0e9b      	lsrs	r3, r3, #26
 80048da:	f003 021f 	and.w	r2, r3, #31
 80048de:	e017      	b.n	8004910 <HAL_ADC_ConfigChannel+0x3fc>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2102      	movs	r1, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fa2c 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 80048ec:	4603      	mov	r3, r0
 80048ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80048f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80048fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004902:	2320      	movs	r3, #32
 8004904:	e003      	b.n	800490e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x414>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0e9b      	lsrs	r3, r3, #26
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	e011      	b.n	800494c <HAL_ADC_ConfigChannel+0x438>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	429a      	cmp	r2, r3
 800494e:	d106      	bne.n	800495e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fa89 	bl	8003e70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2103      	movs	r1, #3
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff f9ed 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 800496a:	4603      	mov	r3, r0
 800496c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <HAL_ADC_ConfigChannel+0x476>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2103      	movs	r1, #3
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f9e2 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004980:	4603      	mov	r3, r0
 8004982:	0e9b      	lsrs	r3, r3, #26
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	e017      	b.n	80049ba <HAL_ADC_ConfigChannel+0x4a6>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2103      	movs	r1, #3
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff f9d7 	bl	8003d44 <LL_ADC_GetOffsetChannel>
 8004996:	4603      	mov	r3, r0
 8004998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	61fb      	str	r3, [r7, #28]
  return result;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e003      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x4be>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0e9b      	lsrs	r3, r3, #26
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	e011      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x4e2>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	613b      	str	r3, [r7, #16]
  return result;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80049ea:	2320      	movs	r3, #32
 80049ec:	e003      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d14f      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2103      	movs	r1, #3
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fa34 	bl	8003e70 <LL_ADC_SetOffsetState>
 8004a08:	e047      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	069b      	lsls	r3, r3, #26
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d107      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	069b      	lsls	r3, r3, #26
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d107      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004a50:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	069b      	lsls	r3, r3, #26
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d107      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004a74:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	069b      	lsls	r3, r3, #26
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d107      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004a98:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff faf6 	bl	8004090 <LL_ADC_IsEnabled>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 81ea 	bne.w	8004e80 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f7ff fa5b 	bl	8003f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4a7a      	ldr	r2, [pc, #488]	@ (8004cac <HAL_ADC_ConfigChannel+0x798>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	f040 80e0 	bne.w	8004c8a <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4977      	ldr	r1, [pc, #476]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x79c>)
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	d147      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x654>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4975      	ldr	r1, [pc, #468]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004ade:	428b      	cmp	r3, r1
 8004ae0:	d040      	beq.n	8004b64 <HAL_ADC_ConfigChannel+0x650>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4974      	ldr	r1, [pc, #464]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	d039      	beq.n	8004b60 <HAL_ADC_ConfigChannel+0x64c>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4972      	ldr	r1, [pc, #456]	@ (8004cbc <HAL_ADC_ConfigChannel+0x7a8>)
 8004af2:	428b      	cmp	r3, r1
 8004af4:	d032      	beq.n	8004b5c <HAL_ADC_ConfigChannel+0x648>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4971      	ldr	r1, [pc, #452]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004afc:	428b      	cmp	r3, r1
 8004afe:	d02b      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x644>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	496f      	ldr	r1, [pc, #444]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004b06:	428b      	cmp	r3, r1
 8004b08:	d024      	beq.n	8004b54 <HAL_ADC_ConfigChannel+0x640>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	496e      	ldr	r1, [pc, #440]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d01d      	beq.n	8004b50 <HAL_ADC_ConfigChannel+0x63c>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	496c      	ldr	r1, [pc, #432]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d016      	beq.n	8004b4c <HAL_ADC_ConfigChannel+0x638>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	496b      	ldr	r1, [pc, #428]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b24:	428b      	cmp	r3, r1
 8004b26:	d00f      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x634>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4969      	ldr	r1, [pc, #420]	@ (8004cd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	d008      	beq.n	8004b44 <HAL_ADC_ConfigChannel+0x630>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4968      	ldr	r1, [pc, #416]	@ (8004cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d101      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x62c>
 8004b3c:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <HAL_ADC_ConfigChannel+0x7c8>)
 8004b3e:	e0a0      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	e09e      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b44:	4b66      	ldr	r3, [pc, #408]	@ (8004ce0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b46:	e09c      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b48:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004b4a:	e09a      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b4c:	4b60      	ldr	r3, [pc, #384]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b4e:	e098      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b50:	4b5e      	ldr	r3, [pc, #376]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8004b52:	e096      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b54:	4b64      	ldr	r3, [pc, #400]	@ (8004ce8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004b56:	e094      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b58:	4b64      	ldr	r3, [pc, #400]	@ (8004cec <HAL_ADC_ConfigChannel+0x7d8>)
 8004b5a:	e092      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b5c:	4b64      	ldr	r3, [pc, #400]	@ (8004cf0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b5e:	e090      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b60:	4b64      	ldr	r3, [pc, #400]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004b62:	e08e      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e08c      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4962      	ldr	r1, [pc, #392]	@ (8004cf8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004b6e:	428b      	cmp	r3, r1
 8004b70:	d140      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x6e0>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	494f      	ldr	r1, [pc, #316]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004b78:	428b      	cmp	r3, r1
 8004b7a:	d039      	beq.n	8004bf0 <HAL_ADC_ConfigChannel+0x6dc>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	494d      	ldr	r1, [pc, #308]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004b82:	428b      	cmp	r3, r1
 8004b84:	d032      	beq.n	8004bec <HAL_ADC_ConfigChannel+0x6d8>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	494c      	ldr	r1, [pc, #304]	@ (8004cbc <HAL_ADC_ConfigChannel+0x7a8>)
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	d02b      	beq.n	8004be8 <HAL_ADC_ConfigChannel+0x6d4>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	494a      	ldr	r1, [pc, #296]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004b96:	428b      	cmp	r3, r1
 8004b98:	d024      	beq.n	8004be4 <HAL_ADC_ConfigChannel+0x6d0>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4949      	ldr	r1, [pc, #292]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	d01d      	beq.n	8004be0 <HAL_ADC_ConfigChannel+0x6cc>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4947      	ldr	r1, [pc, #284]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004baa:	428b      	cmp	r3, r1
 8004bac:	d016      	beq.n	8004bdc <HAL_ADC_ConfigChannel+0x6c8>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4946      	ldr	r1, [pc, #280]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	d00f      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0x6c4>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4944      	ldr	r1, [pc, #272]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004bbe:	428b      	cmp	r3, r1
 8004bc0:	d008      	beq.n	8004bd4 <HAL_ADC_ConfigChannel+0x6c0>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4944      	ldr	r1, [pc, #272]	@ (8004cd8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x6bc>
 8004bcc:	4b43      	ldr	r3, [pc, #268]	@ (8004cdc <HAL_ADC_ConfigChannel+0x7c8>)
 8004bce:	e058      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e056      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bd4:	4b43      	ldr	r3, [pc, #268]	@ (8004ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004bd6:	e054      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004bda:	e052      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8004bde:	e050      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004be0:	4b41      	ldr	r3, [pc, #260]	@ (8004ce8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004be2:	e04e      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004be4:	4b41      	ldr	r3, [pc, #260]	@ (8004cec <HAL_ADC_ConfigChannel+0x7d8>)
 8004be6:	e04c      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004be8:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004bea:	e04a      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bec:	4b41      	ldr	r3, [pc, #260]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004bee:	e048      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e046      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4940      	ldr	r1, [pc, #256]	@ (8004cfc <HAL_ADC_ConfigChannel+0x7e8>)
 8004bfa:	428b      	cmp	r3, r1
 8004bfc:	d140      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x76c>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	492c      	ldr	r1, [pc, #176]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004c04:	428b      	cmp	r3, r1
 8004c06:	d039      	beq.n	8004c7c <HAL_ADC_ConfigChannel+0x768>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	492a      	ldr	r1, [pc, #168]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c0e:	428b      	cmp	r3, r1
 8004c10:	d032      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x764>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4929      	ldr	r1, [pc, #164]	@ (8004cbc <HAL_ADC_ConfigChannel+0x7a8>)
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	d02b      	beq.n	8004c74 <HAL_ADC_ConfigChannel+0x760>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4927      	ldr	r1, [pc, #156]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c22:	428b      	cmp	r3, r1
 8004c24:	d024      	beq.n	8004c70 <HAL_ADC_ConfigChannel+0x75c>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4926      	ldr	r1, [pc, #152]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	d01d      	beq.n	8004c6c <HAL_ADC_ConfigChannel+0x758>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4924      	ldr	r1, [pc, #144]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004c36:	428b      	cmp	r3, r1
 8004c38:	d016      	beq.n	8004c68 <HAL_ADC_ConfigChannel+0x754>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4923      	ldr	r1, [pc, #140]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8004c40:	428b      	cmp	r3, r1
 8004c42:	d00f      	beq.n	8004c64 <HAL_ADC_ConfigChannel+0x750>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4926      	ldr	r1, [pc, #152]	@ (8004ce4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004c4a:	428b      	cmp	r3, r1
 8004c4c:	d008      	beq.n	8004c60 <HAL_ADC_ConfigChannel+0x74c>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	492b      	ldr	r1, [pc, #172]	@ (8004d00 <HAL_ADC_ConfigChannel+0x7ec>)
 8004c54:	428b      	cmp	r3, r1
 8004c56:	d101      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x748>
 8004c58:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <HAL_ADC_ConfigChannel+0x7f0>)
 8004c5a:	e012      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e010      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c60:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <HAL_ADC_ConfigChannel+0x7ec>)
 8004c62:	e00e      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c64:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c66:	e00c      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c68:	4b18      	ldr	r3, [pc, #96]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8004c6a:	e00a      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004c6e:	e008      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c70:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <HAL_ADC_ConfigChannel+0x7d8>)
 8004c72:	e006      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c74:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004c76:	e004      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c78:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004c7a:	e002      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x76e>
 8004c80:	2300      	movs	r3, #0
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7fe fff1 	bl	8003c6c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f280 80f6 	bge.w	8004e80 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a05      	ldr	r2, [pc, #20]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x79c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_ADC_ConfigChannel+0x794>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d131      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x7f8>
 8004ca8:	4b17      	ldr	r3, [pc, #92]	@ (8004d08 <HAL_ADC_ConfigChannel+0x7f4>)
 8004caa:	e030      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x7fa>
 8004cac:	47ff0000 	.word	0x47ff0000
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	04300002 	.word	0x04300002
 8004cb8:	08600004 	.word	0x08600004
 8004cbc:	0c900008 	.word	0x0c900008
 8004cc0:	10c00010 	.word	0x10c00010
 8004cc4:	14f00020 	.word	0x14f00020
 8004cc8:	2a000400 	.word	0x2a000400
 8004ccc:	2e300800 	.word	0x2e300800
 8004cd0:	32601000 	.word	0x32601000
 8004cd4:	43210000 	.word	0x43210000
 8004cd8:	4b840000 	.word	0x4b840000
 8004cdc:	4fb80000 	.word	0x4fb80000
 8004ce0:	47520000 	.word	0x47520000
 8004ce4:	36902000 	.word	0x36902000
 8004ce8:	25b00200 	.word	0x25b00200
 8004cec:	21800100 	.word	0x21800100
 8004cf0:	1d500080 	.word	0x1d500080
 8004cf4:	19200040 	.word	0x19200040
 8004cf8:	40022100 	.word	0x40022100
 8004cfc:	58026000 	.word	0x58026000
 8004d00:	3ac04000 	.word	0x3ac04000
 8004d04:	3ef08000 	.word	0x3ef08000
 8004d08:	40022300 	.word	0x40022300
 8004d0c:	4b61      	ldr	r3, [pc, #388]	@ (8004e94 <HAL_ADC_ConfigChannel+0x980>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe ff9e 	bl	8003c50 <LL_ADC_GetCommonPathInternalCh>
 8004d14:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8004e98 <HAL_ADC_ConfigChannel+0x984>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_ADC_ConfigChannel+0x816>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5d      	ldr	r2, [pc, #372]	@ (8004e9c <HAL_ADC_ConfigChannel+0x988>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10e      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x834>
 8004d2a:	485b      	ldr	r0, [pc, #364]	@ (8004e98 <HAL_ADC_ConfigChannel+0x984>)
 8004d2c:	f7ff f9b0 	bl	8004090 <LL_ADC_IsEnabled>
 8004d30:	4604      	mov	r4, r0
 8004d32:	485a      	ldr	r0, [pc, #360]	@ (8004e9c <HAL_ADC_ConfigChannel+0x988>)
 8004d34:	f7ff f9ac 	bl	8004090 <LL_ADC_IsEnabled>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4323      	orrs	r3, r4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e008      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x846>
 8004d48:	4855      	ldr	r0, [pc, #340]	@ (8004ea0 <HAL_ADC_ConfigChannel+0x98c>)
 8004d4a:	f7ff f9a1 	bl	8004090 <LL_ADC_IsEnabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d07d      	beq.n	8004e5a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a50      	ldr	r2, [pc, #320]	@ (8004ea4 <HAL_ADC_ConfigChannel+0x990>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d130      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x8b6>
 8004d68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12b      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea0 <HAL_ADC_ConfigChannel+0x98c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	f040 8081 	bne.w	8004e80 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a45      	ldr	r2, [pc, #276]	@ (8004e98 <HAL_ADC_ConfigChannel+0x984>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <HAL_ADC_ConfigChannel+0x87e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a43      	ldr	r2, [pc, #268]	@ (8004e9c <HAL_ADC_ConfigChannel+0x988>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x882>
 8004d92:	4a45      	ldr	r2, [pc, #276]	@ (8004ea8 <HAL_ADC_ConfigChannel+0x994>)
 8004d94:	e000      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x884>
 8004d96:	4a3f      	ldr	r2, [pc, #252]	@ (8004e94 <HAL_ADC_ConfigChannel+0x980>)
 8004d98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fe ff42 	bl	8003c2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004da6:	4b41      	ldr	r3, [pc, #260]	@ (8004eac <HAL_ADC_ConfigChannel+0x998>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	4a40      	ldr	r2, [pc, #256]	@ (8004eb0 <HAL_ADC_ConfigChannel+0x99c>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	099b      	lsrs	r3, r3, #6
 8004db4:	3301      	adds	r3, #1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004dba:	e002      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f9      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dc8:	e05a      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a39      	ldr	r2, [pc, #228]	@ (8004eb4 <HAL_ADC_ConfigChannel+0x9a0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d11e      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x8fe>
 8004dd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea0 <HAL_ADC_ConfigChannel+0x98c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d14b      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2a      	ldr	r2, [pc, #168]	@ (8004e98 <HAL_ADC_ConfigChannel+0x984>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_ADC_ConfigChannel+0x8e8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a29      	ldr	r2, [pc, #164]	@ (8004e9c <HAL_ADC_ConfigChannel+0x988>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x8ec>
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea8 <HAL_ADC_ConfigChannel+0x994>)
 8004dfe:	e000      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x8ee>
 8004e00:	4a24      	ldr	r2, [pc, #144]	@ (8004e94 <HAL_ADC_ConfigChannel+0x980>)
 8004e02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe ff0d 	bl	8003c2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e10:	e036      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <HAL_ADC_ConfigChannel+0x9a4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d131      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
 8004e1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d12c      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <HAL_ADC_ConfigChannel+0x98c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d127      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <HAL_ADC_ConfigChannel+0x984>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_ADC_ConfigChannel+0x930>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	@ (8004e9c <HAL_ADC_ConfigChannel+0x988>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x934>
 8004e44:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_ADC_ConfigChannel+0x994>)
 8004e46:	e000      	b.n	8004e4a <HAL_ADC_ConfigChannel+0x936>
 8004e48:	4a12      	ldr	r2, [pc, #72]	@ (8004e94 <HAL_ADC_ConfigChannel+0x980>)
 8004e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7fe fee9 	bl	8003c2a <LL_ADC_SetCommonPathInternalCh>
 8004e58:	e012      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004e6c:	e008      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e88:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3794      	adds	r7, #148	@ 0x94
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}
 8004e94:	58026300 	.word	0x58026300
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40022100 	.word	0x40022100
 8004ea0:	58026000 	.word	0x58026000
 8004ea4:	c7520000 	.word	0xc7520000
 8004ea8:	40022300 	.word	0x40022300
 8004eac:	240000c4 	.word	0x240000c4
 8004eb0:	053e2d63 	.word	0x053e2d63
 8004eb4:	c3210000 	.word	0xc3210000
 8004eb8:	cb840000 	.word	0xcb840000

08004ebc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a6c      	ldr	r2, [pc, #432]	@ (800507c <ADC_ConfigureBoostMode+0x1c0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <ADC_ConfigureBoostMode+0x1c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6b      	ldr	r2, [pc, #428]	@ (8005080 <ADC_ConfigureBoostMode+0x1c4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d109      	bne.n	8004eec <ADC_ConfigureBoostMode+0x30>
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <ADC_ConfigureBoostMode+0x1c8>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e008      	b.n	8004efe <ADC_ConfigureBoostMode+0x42>
 8004eec:	4b66      	ldr	r3, [pc, #408]	@ (8005088 <ADC_ConfigureBoostMode+0x1cc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01c      	beq.n	8004f3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f02:	f003 fcc5 	bl	8008890 <HAL_RCC_GetHCLKFreq>
 8004f06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f10:	d010      	beq.n	8004f34 <ADC_ConfigureBoostMode+0x78>
 8004f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f16:	d873      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x144>
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1c:	d002      	beq.n	8004f24 <ADC_ConfigureBoostMode+0x68>
 8004f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f22:	d16d      	bne.n	8005000 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	60fb      	str	r3, [r7, #12]
        break;
 8004f32:	e068      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	60fb      	str	r3, [r7, #12]
        break;
 8004f3a:	e064      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f3c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	f004 fea0 	bl	8009c88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f48:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f52:	d051      	beq.n	8004ff8 <ADC_ConfigureBoostMode+0x13c>
 8004f54:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f58:	d854      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004f5a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f5e:	d047      	beq.n	8004ff0 <ADC_ConfigureBoostMode+0x134>
 8004f60:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f64:	d84e      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004f66:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f6a:	d03d      	beq.n	8004fe8 <ADC_ConfigureBoostMode+0x12c>
 8004f6c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f70:	d848      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f76:	d033      	beq.n	8004fe0 <ADC_ConfigureBoostMode+0x124>
 8004f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f7c:	d842      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004f7e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004f82:	d029      	beq.n	8004fd8 <ADC_ConfigureBoostMode+0x11c>
 8004f84:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004f88:	d83c      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004f8a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f8e:	d01a      	beq.n	8004fc6 <ADC_ConfigureBoostMode+0x10a>
 8004f90:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f94:	d836      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004f96:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f9a:	d014      	beq.n	8004fc6 <ADC_ConfigureBoostMode+0x10a>
 8004f9c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004fa0:	d830      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa6:	d00e      	beq.n	8004fc6 <ADC_ConfigureBoostMode+0x10a>
 8004fa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fac:	d82a      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004fae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fb2:	d008      	beq.n	8004fc6 <ADC_ConfigureBoostMode+0x10a>
 8004fb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fb8:	d824      	bhi.n	8005004 <ADC_ConfigureBoostMode+0x148>
 8004fba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fbe:	d002      	beq.n	8004fc6 <ADC_ConfigureBoostMode+0x10a>
 8004fc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fc4:	d11e      	bne.n	8005004 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	0c9b      	lsrs	r3, r3, #18
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd4:	60fb      	str	r3, [r7, #12]
        break;
 8004fd6:	e016      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	60fb      	str	r3, [r7, #12]
        break;
 8004fde:	e012      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	60fb      	str	r3, [r7, #12]
        break;
 8004fe6:	e00e      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	099b      	lsrs	r3, r3, #6
 8004fec:	60fb      	str	r3, [r7, #12]
        break;
 8004fee:	e00a      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	09db      	lsrs	r3, r3, #7
 8004ff4:	60fb      	str	r3, [r7, #12]
        break;
 8004ff6:	e006      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	60fb      	str	r3, [r7, #12]
        break;
 8004ffe:	e002      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005000:	bf00      	nop
 8005002:	e000      	b.n	8005006 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005004:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a1f      	ldr	r2, [pc, #124]	@ (800508c <ADC_ConfigureBoostMode+0x1d0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d808      	bhi.n	8005026 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005022:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005024:	e025      	b.n	8005072 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <ADC_ConfigureBoostMode+0x1d4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d80a      	bhi.n	8005044 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005040:	609a      	str	r2, [r3, #8]
}
 8005042:	e016      	b.n	8005072 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a13      	ldr	r2, [pc, #76]	@ (8005094 <ADC_ConfigureBoostMode+0x1d8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d80a      	bhi.n	8005062 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	e007      	b.n	8005072 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005070:	609a      	str	r2, [r3, #8]
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40022000 	.word	0x40022000
 8005080:	40022100 	.word	0x40022100
 8005084:	40022300 	.word	0x40022300
 8005088:	58026300 	.word	0x58026300
 800508c:	005f5e10 	.word	0x005f5e10
 8005090:	00bebc20 	.word	0x00bebc20
 8005094:	017d7840 	.word	0x017d7840

08005098 <LL_ADC_IsEnabled>:
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <LL_ADC_IsEnabled+0x18>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <LL_ADC_IsEnabled+0x1a>
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <LL_ADC_REG_IsConversionOngoing>:
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d101      	bne.n	80050d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b0a3      	sub	sp, #140	@ 0x8c
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050fe:	2302      	movs	r3, #2
 8005100:	e0c1      	b.n	8005286 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800510e:	2300      	movs	r3, #0
 8005110:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a5e      	ldr	r2, [pc, #376]	@ (8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d102      	bne.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800511c:	4b5d      	ldr	r3, [pc, #372]	@ (8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e001      	b.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0a0      	b.n	8005286 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ffb9 	bl	80050be <LL_ADC_REG_IsConversionOngoing>
 800514c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ffb2 	bl	80050be <LL_ADC_REG_IsConversionOngoing>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8081 	bne.w	8005264 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d17c      	bne.n	8005264 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a48      	ldr	r2, [pc, #288]	@ (8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a46      	ldr	r2, [pc, #280]	@ (8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800517e:	4b46      	ldr	r3, [pc, #280]	@ (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005180:	e000      	b.n	8005184 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005182:	4b46      	ldr	r3, [pc, #280]	@ (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005184:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d039      	beq.n	8005202 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800518e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	431a      	orrs	r2, r3
 800519c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800519e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a39      	ldr	r2, [pc, #228]	@ (8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10e      	bne.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80051b4:	4836      	ldr	r0, [pc, #216]	@ (8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051b6:	f7ff ff6f 	bl	8005098 <LL_ADC_IsEnabled>
 80051ba:	4604      	mov	r4, r0
 80051bc:	4835      	ldr	r0, [pc, #212]	@ (8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051be:	f7ff ff6b 	bl	8005098 <LL_ADC_IsEnabled>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4323      	orrs	r3, r4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf0c      	ite	eq
 80051ca:	2301      	moveq	r3, #1
 80051cc:	2300      	movne	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e008      	b.n	80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80051d2:	4833      	ldr	r0, [pc, #204]	@ (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80051d4:	f7ff ff60 	bl	8005098 <LL_ADC_IsEnabled>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d047      	beq.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	4b2d      	ldr	r3, [pc, #180]	@ (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	6811      	ldr	r1, [r2, #0]
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	6892      	ldr	r2, [r2, #8]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	431a      	orrs	r2, r3
 80051fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005200:	e03a      	b.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005202:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800520a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800520c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10e      	bne.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005222:	481b      	ldr	r0, [pc, #108]	@ (8005290 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005224:	f7ff ff38 	bl	8005098 <LL_ADC_IsEnabled>
 8005228:	4604      	mov	r4, r0
 800522a:	481a      	ldr	r0, [pc, #104]	@ (8005294 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800522c:	f7ff ff34 	bl	8005098 <LL_ADC_IsEnabled>
 8005230:	4603      	mov	r3, r0
 8005232:	4323      	orrs	r3, r4
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e008      	b.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005240:	4817      	ldr	r0, [pc, #92]	@ (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005242:	f7ff ff29 	bl	8005098 <LL_ADC_IsEnabled>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d010      	beq.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005256:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800525c:	4013      	ands	r3, r2
 800525e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005260:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005262:	e009      	b.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005276:	e000      	b.n	800527a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005278:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005282:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005286:	4618      	mov	r0, r3
 8005288:	378c      	adds	r7, #140	@ 0x8c
 800528a:	46bd      	mov	sp, r7
 800528c:	bd90      	pop	{r4, r7, pc}
 800528e:	bf00      	nop
 8005290:	40022000 	.word	0x40022000
 8005294:	40022100 	.word	0x40022100
 8005298:	40022300 	.word	0x40022300
 800529c:	58026300 	.word	0x58026300
 80052a0:	58026000 	.word	0x58026000
 80052a4:	fffff0e0 	.word	0xfffff0e0

080052a8 <__NVIC_SetPriorityGrouping>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <__NVIC_SetPriorityGrouping+0x40>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052c4:	4013      	ands	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <__NVIC_SetPriorityGrouping+0x44>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052d6:	4a04      	ldr	r2, [pc, #16]	@ (80052e8 <__NVIC_SetPriorityGrouping+0x40>)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	60d3      	str	r3, [r2, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	e000ed00 	.word	0xe000ed00
 80052ec:	05fa0000 	.word	0x05fa0000

080052f0 <__NVIC_GetPriorityGrouping>:
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <__NVIC_GetPriorityGrouping+0x18>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	0a1b      	lsrs	r3, r3, #8
 80052fa:	f003 0307 	and.w	r3, r3, #7
}
 80052fe:	4618      	mov	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <__NVIC_EnableIRQ>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800531a:	2b00      	cmp	r3, #0
 800531c:	db0b      	blt.n	8005336 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	f003 021f 	and.w	r2, r3, #31
 8005324:	4907      	ldr	r1, [pc, #28]	@ (8005344 <__NVIC_EnableIRQ+0x38>)
 8005326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	2001      	movs	r0, #1
 800532e:	fa00 f202 	lsl.w	r2, r0, r2
 8005332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	e000e100 	.word	0xe000e100

08005348 <__NVIC_SetPriority>:
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	6039      	str	r1, [r7, #0]
 8005352:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	db0a      	blt.n	8005372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	490c      	ldr	r1, [pc, #48]	@ (8005394 <__NVIC_SetPriority+0x4c>)
 8005362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005366:	0112      	lsls	r2, r2, #4
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	440b      	add	r3, r1
 800536c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005370:	e00a      	b.n	8005388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4908      	ldr	r1, [pc, #32]	@ (8005398 <__NVIC_SetPriority+0x50>)
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	3b04      	subs	r3, #4
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	440b      	add	r3, r1
 8005386:	761a      	strb	r2, [r3, #24]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000e100 	.word	0xe000e100
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <NVIC_EncodePriority>:
{
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	@ 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f1c3 0307 	rsb	r3, r3, #7
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	bf28      	it	cs
 80053ba:	2304      	movcs	r3, #4
 80053bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3304      	adds	r3, #4
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d902      	bls.n	80053cc <NVIC_EncodePriority+0x30>
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3b03      	subs	r3, #3
 80053ca:	e000      	b.n	80053ce <NVIC_EncodePriority+0x32>
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d0:	f04f 32ff 	mov.w	r2, #4294967295
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	401a      	ands	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053e4:	f04f 31ff 	mov.w	r1, #4294967295
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	43d9      	mvns	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f4:	4313      	orrs	r3, r2
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3724      	adds	r7, #36	@ 0x24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3b01      	subs	r3, #1
 8005410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005414:	d301      	bcc.n	800541a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005416:	2301      	movs	r3, #1
 8005418:	e00f      	b.n	800543a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800541a:	4a0a      	ldr	r2, [pc, #40]	@ (8005444 <SysTick_Config+0x40>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3b01      	subs	r3, #1
 8005420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005422:	210f      	movs	r1, #15
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	f7ff ff8e 	bl	8005348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <SysTick_Config+0x40>)
 800542e:	2200      	movs	r2, #0
 8005430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005432:	4b04      	ldr	r3, [pc, #16]	@ (8005444 <SysTick_Config+0x40>)
 8005434:	2207      	movs	r2, #7
 8005436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	e000e010 	.word	0xe000e010

08005448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff29 	bl	80052a8 <__NVIC_SetPriorityGrouping>
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	4603      	mov	r3, r0
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800546c:	f7ff ff40 	bl	80052f0 <__NVIC_GetPriorityGrouping>
 8005470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	6978      	ldr	r0, [r7, #20]
 8005478:	f7ff ff90 	bl	800539c <NVIC_EncodePriority>
 800547c:	4602      	mov	r2, r0
 800547e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005482:	4611      	mov	r1, r2
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ff5f 	bl	8005348 <__NVIC_SetPriority>
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	4603      	mov	r3, r0
 800549a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800549c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff33 	bl	800530c <__NVIC_EnableIRQ>
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ffa4 	bl	8005404 <SysTick_Config>
 80054bc:	4603      	mov	r3, r0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80054cc:	f3bf 8f5f 	dmb	sy
}
 80054d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_MPU_Disable+0x28>)
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	4a06      	ldr	r2, [pc, #24]	@ (80054f0 <HAL_MPU_Disable+0x28>)
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80054de:	4b05      	ldr	r3, [pc, #20]	@ (80054f4 <HAL_MPU_Disable+0x2c>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	e000ed00 	.word	0xe000ed00
 80054f4:	e000ed90 	.word	0xe000ed90

080054f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005500:	4a0b      	ldr	r2, [pc, #44]	@ (8005530 <HAL_MPU_Enable+0x38>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800550a:	4b0a      	ldr	r3, [pc, #40]	@ (8005534 <HAL_MPU_Enable+0x3c>)
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	4a09      	ldr	r2, [pc, #36]	@ (8005534 <HAL_MPU_Enable+0x3c>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005514:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005516:	f3bf 8f4f 	dsb	sy
}
 800551a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800551c:	f3bf 8f6f 	isb	sy
}
 8005520:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	e000ed90 	.word	0xe000ed90
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	785a      	ldrb	r2, [r3, #1]
 8005544:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <HAL_MPU_ConfigRegion+0x7c>)
 8005546:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005548:	4b1a      	ldr	r3, [pc, #104]	@ (80055b4 <HAL_MPU_ConfigRegion+0x7c>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <HAL_MPU_ConfigRegion+0x7c>)
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005554:	4a17      	ldr	r2, [pc, #92]	@ (80055b4 <HAL_MPU_ConfigRegion+0x7c>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7b1b      	ldrb	r3, [r3, #12]
 8005560:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7adb      	ldrb	r3, [r3, #11]
 8005566:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7a9b      	ldrb	r3, [r3, #10]
 800556e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005570:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7b5b      	ldrb	r3, [r3, #13]
 8005576:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	7b9b      	ldrb	r3, [r3, #14]
 800557e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	7bdb      	ldrb	r3, [r3, #15]
 8005586:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005588:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7a5b      	ldrb	r3, [r3, #9]
 800558e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005590:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7a1b      	ldrb	r3, [r3, #8]
 8005596:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005598:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055a0:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80055a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055a4:	6113      	str	r3, [r2, #16]
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000ed90 	.word	0xe000ed90

080055b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055c0:	f7fe faf0 	bl	8003ba4 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e2dc      	b.n	8005b8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d008      	beq.n	80055ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2280      	movs	r2, #128	@ 0x80
 80055e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e2cd      	b.n	8005b8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a76      	ldr	r2, [pc, #472]	@ (80057cc <HAL_DMA_Abort+0x214>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d04a      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a74      	ldr	r2, [pc, #464]	@ (80057d0 <HAL_DMA_Abort+0x218>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d045      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a73      	ldr	r2, [pc, #460]	@ (80057d4 <HAL_DMA_Abort+0x21c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d040      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a71      	ldr	r2, [pc, #452]	@ (80057d8 <HAL_DMA_Abort+0x220>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d03b      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a70      	ldr	r2, [pc, #448]	@ (80057dc <HAL_DMA_Abort+0x224>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d036      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a6e      	ldr	r2, [pc, #440]	@ (80057e0 <HAL_DMA_Abort+0x228>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d031      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a6d      	ldr	r2, [pc, #436]	@ (80057e4 <HAL_DMA_Abort+0x22c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d02c      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a6b      	ldr	r2, [pc, #428]	@ (80057e8 <HAL_DMA_Abort+0x230>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d027      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a6a      	ldr	r2, [pc, #424]	@ (80057ec <HAL_DMA_Abort+0x234>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d022      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a68      	ldr	r2, [pc, #416]	@ (80057f0 <HAL_DMA_Abort+0x238>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01d      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a67      	ldr	r2, [pc, #412]	@ (80057f4 <HAL_DMA_Abort+0x23c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d018      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a65      	ldr	r2, [pc, #404]	@ (80057f8 <HAL_DMA_Abort+0x240>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a64      	ldr	r2, [pc, #400]	@ (80057fc <HAL_DMA_Abort+0x244>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a62      	ldr	r2, [pc, #392]	@ (8005800 <HAL_DMA_Abort+0x248>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a61      	ldr	r2, [pc, #388]	@ (8005804 <HAL_DMA_Abort+0x24c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_DMA_Abort+0xd6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a5f      	ldr	r2, [pc, #380]	@ (8005808 <HAL_DMA_Abort+0x250>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <HAL_DMA_Abort+0xda>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_DMA_Abort+0xdc>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d013      	beq.n	80056c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 021e 	bic.w	r2, r2, #30
 80056a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e00a      	b.n	80056d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 020e 	bic.w	r2, r2, #14
 80056ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3c      	ldr	r2, [pc, #240]	@ (80057cc <HAL_DMA_Abort+0x214>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d072      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3a      	ldr	r2, [pc, #232]	@ (80057d0 <HAL_DMA_Abort+0x218>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d06d      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a39      	ldr	r2, [pc, #228]	@ (80057d4 <HAL_DMA_Abort+0x21c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d068      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a37      	ldr	r2, [pc, #220]	@ (80057d8 <HAL_DMA_Abort+0x220>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d063      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a36      	ldr	r2, [pc, #216]	@ (80057dc <HAL_DMA_Abort+0x224>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d05e      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a34      	ldr	r2, [pc, #208]	@ (80057e0 <HAL_DMA_Abort+0x228>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d059      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a33      	ldr	r2, [pc, #204]	@ (80057e4 <HAL_DMA_Abort+0x22c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d054      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a31      	ldr	r2, [pc, #196]	@ (80057e8 <HAL_DMA_Abort+0x230>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d04f      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a30      	ldr	r2, [pc, #192]	@ (80057ec <HAL_DMA_Abort+0x234>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d04a      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2e      	ldr	r2, [pc, #184]	@ (80057f0 <HAL_DMA_Abort+0x238>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d045      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2d      	ldr	r2, [pc, #180]	@ (80057f4 <HAL_DMA_Abort+0x23c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d040      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2b      	ldr	r2, [pc, #172]	@ (80057f8 <HAL_DMA_Abort+0x240>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d03b      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2a      	ldr	r2, [pc, #168]	@ (80057fc <HAL_DMA_Abort+0x244>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d036      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a28      	ldr	r2, [pc, #160]	@ (8005800 <HAL_DMA_Abort+0x248>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d031      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a27      	ldr	r2, [pc, #156]	@ (8005804 <HAL_DMA_Abort+0x24c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d02c      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	@ (8005808 <HAL_DMA_Abort+0x250>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d027      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a24      	ldr	r2, [pc, #144]	@ (800580c <HAL_DMA_Abort+0x254>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a22      	ldr	r2, [pc, #136]	@ (8005810 <HAL_DMA_Abort+0x258>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	@ (8005814 <HAL_DMA_Abort+0x25c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <HAL_DMA_Abort+0x260>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	@ (800581c <HAL_DMA_Abort+0x264>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <HAL_DMA_Abort+0x268>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <HAL_DMA_Abort+0x26c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_DMA_Abort+0x20e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <HAL_DMA_Abort+0x270>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d132      	bne.n	800582c <HAL_DMA_Abort+0x274>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e031      	b.n	800582e <HAL_DMA_Abort+0x276>
 80057ca:	bf00      	nop
 80057cc:	40020010 	.word	0x40020010
 80057d0:	40020028 	.word	0x40020028
 80057d4:	40020040 	.word	0x40020040
 80057d8:	40020058 	.word	0x40020058
 80057dc:	40020070 	.word	0x40020070
 80057e0:	40020088 	.word	0x40020088
 80057e4:	400200a0 	.word	0x400200a0
 80057e8:	400200b8 	.word	0x400200b8
 80057ec:	40020410 	.word	0x40020410
 80057f0:	40020428 	.word	0x40020428
 80057f4:	40020440 	.word	0x40020440
 80057f8:	40020458 	.word	0x40020458
 80057fc:	40020470 	.word	0x40020470
 8005800:	40020488 	.word	0x40020488
 8005804:	400204a0 	.word	0x400204a0
 8005808:	400204b8 	.word	0x400204b8
 800580c:	58025408 	.word	0x58025408
 8005810:	5802541c 	.word	0x5802541c
 8005814:	58025430 	.word	0x58025430
 8005818:	58025444 	.word	0x58025444
 800581c:	58025458 	.word	0x58025458
 8005820:	5802546c 	.word	0x5802546c
 8005824:	58025480 	.word	0x58025480
 8005828:	58025494 	.word	0x58025494
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005840:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a6d      	ldr	r2, [pc, #436]	@ (80059fc <HAL_DMA_Abort+0x444>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d04a      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a6b      	ldr	r2, [pc, #428]	@ (8005a00 <HAL_DMA_Abort+0x448>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d045      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6a      	ldr	r2, [pc, #424]	@ (8005a04 <HAL_DMA_Abort+0x44c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d040      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a68      	ldr	r2, [pc, #416]	@ (8005a08 <HAL_DMA_Abort+0x450>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d03b      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a67      	ldr	r2, [pc, #412]	@ (8005a0c <HAL_DMA_Abort+0x454>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d036      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a65      	ldr	r2, [pc, #404]	@ (8005a10 <HAL_DMA_Abort+0x458>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d031      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a64      	ldr	r2, [pc, #400]	@ (8005a14 <HAL_DMA_Abort+0x45c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d02c      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a62      	ldr	r2, [pc, #392]	@ (8005a18 <HAL_DMA_Abort+0x460>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d027      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a61      	ldr	r2, [pc, #388]	@ (8005a1c <HAL_DMA_Abort+0x464>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d022      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a5f      	ldr	r2, [pc, #380]	@ (8005a20 <HAL_DMA_Abort+0x468>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01d      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005a24 <HAL_DMA_Abort+0x46c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d018      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5c      	ldr	r2, [pc, #368]	@ (8005a28 <HAL_DMA_Abort+0x470>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a5b      	ldr	r2, [pc, #364]	@ (8005a2c <HAL_DMA_Abort+0x474>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a59      	ldr	r2, [pc, #356]	@ (8005a30 <HAL_DMA_Abort+0x478>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a58      	ldr	r2, [pc, #352]	@ (8005a34 <HAL_DMA_Abort+0x47c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_DMA_Abort+0x32a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a56      	ldr	r2, [pc, #344]	@ (8005a38 <HAL_DMA_Abort+0x480>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <HAL_DMA_Abort+0x33c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0201 	bic.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e007      	b.n	8005904 <HAL_DMA_Abort+0x34c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005904:	e013      	b.n	800592e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005906:	f7fe f94d 	bl	8003ba4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b05      	cmp	r3, #5
 8005912:	d90c      	bls.n	800592e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2203      	movs	r2, #3
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e12d      	b.n	8005b8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2f      	ldr	r2, [pc, #188]	@ (80059fc <HAL_DMA_Abort+0x444>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d04a      	beq.n	80059da <HAL_DMA_Abort+0x422>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2d      	ldr	r2, [pc, #180]	@ (8005a00 <HAL_DMA_Abort+0x448>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d045      	beq.n	80059da <HAL_DMA_Abort+0x422>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <HAL_DMA_Abort+0x44c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d040      	beq.n	80059da <HAL_DMA_Abort+0x422>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a08 <HAL_DMA_Abort+0x450>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d03b      	beq.n	80059da <HAL_DMA_Abort+0x422>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <HAL_DMA_Abort+0x454>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d036      	beq.n	80059da <HAL_DMA_Abort+0x422>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a27      	ldr	r2, [pc, #156]	@ (8005a10 <HAL_DMA_Abort+0x458>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d031      	beq.n	80059da <HAL_DMA_Abort+0x422>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <HAL_DMA_Abort+0x45c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d02c      	beq.n	80059da <HAL_DMA_Abort+0x422>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a24      	ldr	r2, [pc, #144]	@ (8005a18 <HAL_DMA_Abort+0x460>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d027      	beq.n	80059da <HAL_DMA_Abort+0x422>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a23      	ldr	r2, [pc, #140]	@ (8005a1c <HAL_DMA_Abort+0x464>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d022      	beq.n	80059da <HAL_DMA_Abort+0x422>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a21      	ldr	r2, [pc, #132]	@ (8005a20 <HAL_DMA_Abort+0x468>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01d      	beq.n	80059da <HAL_DMA_Abort+0x422>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a20      	ldr	r2, [pc, #128]	@ (8005a24 <HAL_DMA_Abort+0x46c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d018      	beq.n	80059da <HAL_DMA_Abort+0x422>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005a28 <HAL_DMA_Abort+0x470>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_DMA_Abort+0x422>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <HAL_DMA_Abort+0x474>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_DMA_Abort+0x422>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <HAL_DMA_Abort+0x478>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_DMA_Abort+0x422>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005a34 <HAL_DMA_Abort+0x47c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_DMA_Abort+0x422>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a18      	ldr	r2, [pc, #96]	@ (8005a38 <HAL_DMA_Abort+0x480>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d101      	bne.n	80059de <HAL_DMA_Abort+0x426>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <HAL_DMA_Abort+0x428>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d02b      	beq.n	8005a3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	223f      	movs	r2, #63	@ 0x3f
 80059f4:	409a      	lsls	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
 80059fa:	e02a      	b.n	8005a52 <HAL_DMA_Abort+0x49a>
 80059fc:	40020010 	.word	0x40020010
 8005a00:	40020028 	.word	0x40020028
 8005a04:	40020040 	.word	0x40020040
 8005a08:	40020058 	.word	0x40020058
 8005a0c:	40020070 	.word	0x40020070
 8005a10:	40020088 	.word	0x40020088
 8005a14:	400200a0 	.word	0x400200a0
 8005a18:	400200b8 	.word	0x400200b8
 8005a1c:	40020410 	.word	0x40020410
 8005a20:	40020428 	.word	0x40020428
 8005a24:	40020440 	.word	0x40020440
 8005a28:	40020458 	.word	0x40020458
 8005a2c:	40020470 	.word	0x40020470
 8005a30:	40020488 	.word	0x40020488
 8005a34:	400204a0 	.word	0x400204a0
 8005a38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a4f      	ldr	r2, [pc, #316]	@ (8005b94 <HAL_DMA_Abort+0x5dc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d072      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a4d      	ldr	r2, [pc, #308]	@ (8005b98 <HAL_DMA_Abort+0x5e0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d06d      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8005b9c <HAL_DMA_Abort+0x5e4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d068      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba0 <HAL_DMA_Abort+0x5e8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d063      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a49      	ldr	r2, [pc, #292]	@ (8005ba4 <HAL_DMA_Abort+0x5ec>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d05e      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a47      	ldr	r2, [pc, #284]	@ (8005ba8 <HAL_DMA_Abort+0x5f0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d059      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a46      	ldr	r2, [pc, #280]	@ (8005bac <HAL_DMA_Abort+0x5f4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d054      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a44      	ldr	r2, [pc, #272]	@ (8005bb0 <HAL_DMA_Abort+0x5f8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d04f      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a43      	ldr	r2, [pc, #268]	@ (8005bb4 <HAL_DMA_Abort+0x5fc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d04a      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a41      	ldr	r2, [pc, #260]	@ (8005bb8 <HAL_DMA_Abort+0x600>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d045      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a40      	ldr	r2, [pc, #256]	@ (8005bbc <HAL_DMA_Abort+0x604>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d040      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8005bc0 <HAL_DMA_Abort+0x608>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d03b      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a3d      	ldr	r2, [pc, #244]	@ (8005bc4 <HAL_DMA_Abort+0x60c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d036      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3b      	ldr	r2, [pc, #236]	@ (8005bc8 <HAL_DMA_Abort+0x610>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d031      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3a      	ldr	r2, [pc, #232]	@ (8005bcc <HAL_DMA_Abort+0x614>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d02c      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a38      	ldr	r2, [pc, #224]	@ (8005bd0 <HAL_DMA_Abort+0x618>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d027      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a37      	ldr	r2, [pc, #220]	@ (8005bd4 <HAL_DMA_Abort+0x61c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a35      	ldr	r2, [pc, #212]	@ (8005bd8 <HAL_DMA_Abort+0x620>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01d      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a34      	ldr	r2, [pc, #208]	@ (8005bdc <HAL_DMA_Abort+0x624>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a32      	ldr	r2, [pc, #200]	@ (8005be0 <HAL_DMA_Abort+0x628>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a31      	ldr	r2, [pc, #196]	@ (8005be4 <HAL_DMA_Abort+0x62c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2f      	ldr	r2, [pc, #188]	@ (8005be8 <HAL_DMA_Abort+0x630>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2e      	ldr	r2, [pc, #184]	@ (8005bec <HAL_DMA_Abort+0x634>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_DMA_Abort+0x58a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf0 <HAL_DMA_Abort+0x638>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <HAL_DMA_Abort+0x58e>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_DMA_Abort+0x590>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d015      	beq.n	8005b78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40020010 	.word	0x40020010
 8005b98:	40020028 	.word	0x40020028
 8005b9c:	40020040 	.word	0x40020040
 8005ba0:	40020058 	.word	0x40020058
 8005ba4:	40020070 	.word	0x40020070
 8005ba8:	40020088 	.word	0x40020088
 8005bac:	400200a0 	.word	0x400200a0
 8005bb0:	400200b8 	.word	0x400200b8
 8005bb4:	40020410 	.word	0x40020410
 8005bb8:	40020428 	.word	0x40020428
 8005bbc:	40020440 	.word	0x40020440
 8005bc0:	40020458 	.word	0x40020458
 8005bc4:	40020470 	.word	0x40020470
 8005bc8:	40020488 	.word	0x40020488
 8005bcc:	400204a0 	.word	0x400204a0
 8005bd0:	400204b8 	.word	0x400204b8
 8005bd4:	58025408 	.word	0x58025408
 8005bd8:	5802541c 	.word	0x5802541c
 8005bdc:	58025430 	.word	0x58025430
 8005be0:	58025444 	.word	0x58025444
 8005be4:	58025458 	.word	0x58025458
 8005be8:	5802546c 	.word	0x5802546c
 8005bec:	58025480 	.word	0x58025480
 8005bf0:	58025494 	.word	0x58025494

08005bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e237      	b.n	8006076 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d004      	beq.n	8005c1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2280      	movs	r2, #128	@ 0x80
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e22c      	b.n	8006076 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5c      	ldr	r2, [pc, #368]	@ (8005d94 <HAL_DMA_Abort_IT+0x1a0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d04a      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005d98 <HAL_DMA_Abort_IT+0x1a4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d045      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a59      	ldr	r2, [pc, #356]	@ (8005d9c <HAL_DMA_Abort_IT+0x1a8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d040      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a58      	ldr	r2, [pc, #352]	@ (8005da0 <HAL_DMA_Abort_IT+0x1ac>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d03b      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a56      	ldr	r2, [pc, #344]	@ (8005da4 <HAL_DMA_Abort_IT+0x1b0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d036      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a55      	ldr	r2, [pc, #340]	@ (8005da8 <HAL_DMA_Abort_IT+0x1b4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d031      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a53      	ldr	r2, [pc, #332]	@ (8005dac <HAL_DMA_Abort_IT+0x1b8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02c      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a52      	ldr	r2, [pc, #328]	@ (8005db0 <HAL_DMA_Abort_IT+0x1bc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d027      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a50      	ldr	r2, [pc, #320]	@ (8005db4 <HAL_DMA_Abort_IT+0x1c0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a4f      	ldr	r2, [pc, #316]	@ (8005db8 <HAL_DMA_Abort_IT+0x1c4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01d      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a4d      	ldr	r2, [pc, #308]	@ (8005dbc <HAL_DMA_Abort_IT+0x1c8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4c      	ldr	r2, [pc, #304]	@ (8005dc0 <HAL_DMA_Abort_IT+0x1cc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc4 <HAL_DMA_Abort_IT+0x1d0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a49      	ldr	r2, [pc, #292]	@ (8005dc8 <HAL_DMA_Abort_IT+0x1d4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a47      	ldr	r2, [pc, #284]	@ (8005dcc <HAL_DMA_Abort_IT+0x1d8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_DMA_Abort_IT+0xc8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a46      	ldr	r2, [pc, #280]	@ (8005dd0 <HAL_DMA_Abort_IT+0x1dc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d101      	bne.n	8005cc0 <HAL_DMA_Abort_IT+0xcc>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <HAL_DMA_Abort_IT+0xce>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8086 	beq.w	8005dd4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8005d94 <HAL_DMA_Abort_IT+0x1a0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04a      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2e      	ldr	r2, [pc, #184]	@ (8005d98 <HAL_DMA_Abort_IT+0x1a4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d045      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d9c <HAL_DMA_Abort_IT+0x1a8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d040      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <HAL_DMA_Abort_IT+0x1ac>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d03b      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a29      	ldr	r2, [pc, #164]	@ (8005da4 <HAL_DMA_Abort_IT+0x1b0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d036      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a28      	ldr	r2, [pc, #160]	@ (8005da8 <HAL_DMA_Abort_IT+0x1b4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d031      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <HAL_DMA_Abort_IT+0x1b8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02c      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a25      	ldr	r2, [pc, #148]	@ (8005db0 <HAL_DMA_Abort_IT+0x1bc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d027      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a23      	ldr	r2, [pc, #140]	@ (8005db4 <HAL_DMA_Abort_IT+0x1c0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a22      	ldr	r2, [pc, #136]	@ (8005db8 <HAL_DMA_Abort_IT+0x1c4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a20      	ldr	r2, [pc, #128]	@ (8005dbc <HAL_DMA_Abort_IT+0x1c8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc0 <HAL_DMA_Abort_IT+0x1cc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc4 <HAL_DMA_Abort_IT+0x1d0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc8 <HAL_DMA_Abort_IT+0x1d4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1a      	ldr	r2, [pc, #104]	@ (8005dcc <HAL_DMA_Abort_IT+0x1d8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x17c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a19      	ldr	r2, [pc, #100]	@ (8005dd0 <HAL_DMA_Abort_IT+0x1dc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <HAL_DMA_Abort_IT+0x18e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e178      	b.n	8006074 <HAL_DMA_Abort_IT+0x480>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e16f      	b.n	8006074 <HAL_DMA_Abort_IT+0x480>
 8005d94:	40020010 	.word	0x40020010
 8005d98:	40020028 	.word	0x40020028
 8005d9c:	40020040 	.word	0x40020040
 8005da0:	40020058 	.word	0x40020058
 8005da4:	40020070 	.word	0x40020070
 8005da8:	40020088 	.word	0x40020088
 8005dac:	400200a0 	.word	0x400200a0
 8005db0:	400200b8 	.word	0x400200b8
 8005db4:	40020410 	.word	0x40020410
 8005db8:	40020428 	.word	0x40020428
 8005dbc:	40020440 	.word	0x40020440
 8005dc0:	40020458 	.word	0x40020458
 8005dc4:	40020470 	.word	0x40020470
 8005dc8:	40020488 	.word	0x40020488
 8005dcc:	400204a0 	.word	0x400204a0
 8005dd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 020e 	bic.w	r2, r2, #14
 8005de2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a6c      	ldr	r2, [pc, #432]	@ (8005f9c <HAL_DMA_Abort_IT+0x3a8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d04a      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6b      	ldr	r2, [pc, #428]	@ (8005fa0 <HAL_DMA_Abort_IT+0x3ac>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d045      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a69      	ldr	r2, [pc, #420]	@ (8005fa4 <HAL_DMA_Abort_IT+0x3b0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d040      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a68      	ldr	r2, [pc, #416]	@ (8005fa8 <HAL_DMA_Abort_IT+0x3b4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d03b      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a66      	ldr	r2, [pc, #408]	@ (8005fac <HAL_DMA_Abort_IT+0x3b8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d036      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a65      	ldr	r2, [pc, #404]	@ (8005fb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d031      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a63      	ldr	r2, [pc, #396]	@ (8005fb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d02c      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a62      	ldr	r2, [pc, #392]	@ (8005fb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d027      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a60      	ldr	r2, [pc, #384]	@ (8005fbc <HAL_DMA_Abort_IT+0x3c8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d022      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a5f      	ldr	r2, [pc, #380]	@ (8005fc0 <HAL_DMA_Abort_IT+0x3cc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d01d      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8005fc4 <HAL_DMA_Abort_IT+0x3d0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d018      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a5c      	ldr	r2, [pc, #368]	@ (8005fc8 <HAL_DMA_Abort_IT+0x3d4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a5a      	ldr	r2, [pc, #360]	@ (8005fcc <HAL_DMA_Abort_IT+0x3d8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a59      	ldr	r2, [pc, #356]	@ (8005fd0 <HAL_DMA_Abort_IT+0x3dc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a57      	ldr	r2, [pc, #348]	@ (8005fd4 <HAL_DMA_Abort_IT+0x3e0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_DMA_Abort_IT+0x290>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a56      	ldr	r2, [pc, #344]	@ (8005fd8 <HAL_DMA_Abort_IT+0x3e4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <HAL_DMA_Abort_IT+0x2a2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e007      	b.n	8005ea6 <HAL_DMA_Abort_IT+0x2b2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a3c      	ldr	r2, [pc, #240]	@ (8005f9c <HAL_DMA_Abort_IT+0x3a8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d072      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fa0 <HAL_DMA_Abort_IT+0x3ac>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d06d      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a39      	ldr	r2, [pc, #228]	@ (8005fa4 <HAL_DMA_Abort_IT+0x3b0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d068      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a37      	ldr	r2, [pc, #220]	@ (8005fa8 <HAL_DMA_Abort_IT+0x3b4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d063      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a36      	ldr	r2, [pc, #216]	@ (8005fac <HAL_DMA_Abort_IT+0x3b8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d05e      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a34      	ldr	r2, [pc, #208]	@ (8005fb0 <HAL_DMA_Abort_IT+0x3bc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d059      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a33      	ldr	r2, [pc, #204]	@ (8005fb4 <HAL_DMA_Abort_IT+0x3c0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d054      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a31      	ldr	r2, [pc, #196]	@ (8005fb8 <HAL_DMA_Abort_IT+0x3c4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d04f      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a30      	ldr	r2, [pc, #192]	@ (8005fbc <HAL_DMA_Abort_IT+0x3c8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d04a      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2e      	ldr	r2, [pc, #184]	@ (8005fc0 <HAL_DMA_Abort_IT+0x3cc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d045      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005fc4 <HAL_DMA_Abort_IT+0x3d0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d040      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc8 <HAL_DMA_Abort_IT+0x3d4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d03b      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2a      	ldr	r2, [pc, #168]	@ (8005fcc <HAL_DMA_Abort_IT+0x3d8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d036      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a28      	ldr	r2, [pc, #160]	@ (8005fd0 <HAL_DMA_Abort_IT+0x3dc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d031      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a27      	ldr	r2, [pc, #156]	@ (8005fd4 <HAL_DMA_Abort_IT+0x3e0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d02c      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a25      	ldr	r2, [pc, #148]	@ (8005fd8 <HAL_DMA_Abort_IT+0x3e4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d027      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a24      	ldr	r2, [pc, #144]	@ (8005fdc <HAL_DMA_Abort_IT+0x3e8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a22      	ldr	r2, [pc, #136]	@ (8005fe0 <HAL_DMA_Abort_IT+0x3ec>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a21      	ldr	r2, [pc, #132]	@ (8005fe4 <HAL_DMA_Abort_IT+0x3f0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <HAL_DMA_Abort_IT+0x3f4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1e      	ldr	r2, [pc, #120]	@ (8005fec <HAL_DMA_Abort_IT+0x3f8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff0 <HAL_DMA_Abort_IT+0x3fc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff4 <HAL_DMA_Abort_IT+0x400>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_Abort_IT+0x3a2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a19      	ldr	r2, [pc, #100]	@ (8005ff8 <HAL_DMA_Abort_IT+0x404>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d132      	bne.n	8005ffc <HAL_DMA_Abort_IT+0x408>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e031      	b.n	8005ffe <HAL_DMA_Abort_IT+0x40a>
 8005f9a:	bf00      	nop
 8005f9c:	40020010 	.word	0x40020010
 8005fa0:	40020028 	.word	0x40020028
 8005fa4:	40020040 	.word	0x40020040
 8005fa8:	40020058 	.word	0x40020058
 8005fac:	40020070 	.word	0x40020070
 8005fb0:	40020088 	.word	0x40020088
 8005fb4:	400200a0 	.word	0x400200a0
 8005fb8:	400200b8 	.word	0x400200b8
 8005fbc:	40020410 	.word	0x40020410
 8005fc0:	40020428 	.word	0x40020428
 8005fc4:	40020440 	.word	0x40020440
 8005fc8:	40020458 	.word	0x40020458
 8005fcc:	40020470 	.word	0x40020470
 8005fd0:	40020488 	.word	0x40020488
 8005fd4:	400204a0 	.word	0x400204a0
 8005fd8:	400204b8 	.word	0x400204b8
 8005fdc:	58025408 	.word	0x58025408
 8005fe0:	5802541c 	.word	0x5802541c
 8005fe4:	58025430 	.word	0x58025430
 8005fe8:	58025444 	.word	0x58025444
 8005fec:	58025458 	.word	0x58025458
 8005ff0:	5802546c 	.word	0x5802546c
 8005ff4:	58025480 	.word	0x58025480
 8005ff8:	58025494 	.word	0x58025494
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d028      	beq.n	8006054 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006010:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2201      	movs	r2, #1
 8006022:	409a      	lsls	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006030:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006048:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006052:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006090:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800609a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800609e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80060ac:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80060ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006264 <HAL_ETH_IRQHandler+0x1e4>)
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d010      	beq.n	80060e0 <HAL_ETH_IRQHandler+0x60>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060d0:	461a      	mov	r2, r3
 80060d2:	f248 0340 	movw	r3, #32832	@ 0x8040
 80060d6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8ce 	bl	800627c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_ETH_IRQHandler+0x8c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060fc:	461a      	mov	r2, r3
 80060fe:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006102:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f8ae 	bl	8006268 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d047      	beq.n	80061a6 <HAL_ETH_IRQHandler+0x126>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d042      	beq.n	80061a6 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	f043 0208 	orr.w	r2, r3, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01e      	beq.n	8006178 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006142:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8006146:	f241 1302 	movw	r3, #4354	@ 0x1102
 800614a:	4013      	ands	r3, r2
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800615a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006166:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800616a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	22e0      	movs	r2, #224	@ 0xe0
 8006172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8006176:	e013      	b.n	80061a0 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006180:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006184:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006196:	461a      	mov	r2, r3
 8006198:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 800619c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f875 	bl	8006290 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d019      	beq.n	80061ee <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c0:	f043 0210 	orr.w	r2, r3, #16
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	22e0      	movs	r2, #224	@ 0xe0
 80061dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f855 	bl	8006290 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006200:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f84a 	bl	80062a4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00f      	beq.n	8006242 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f83f 	bl	80062b8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d006      	beq.n	800625a <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <HAL_ETH_IRQHandler+0x1e4>)
 800624e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006252:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f839 	bl	80062cc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800625a:	bf00      	nop
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	58000080 	.word	0x58000080

08006268 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b098      	sub	sp, #96	@ 0x60
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80062e8:	4a84      	ldr	r2, [pc, #528]	@ (80064fc <HAL_FDCAN_Init+0x21c>)
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	4611      	mov	r1, r2
 80062f0:	224c      	movs	r2, #76	@ 0x4c
 80062f2:	4618      	mov	r0, r3
 80062f4:	f008 fd4c 	bl	800ed90 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e1c6      	b.n	8006690 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7e      	ldr	r2, [pc, #504]	@ (8006500 <HAL_FDCAN_Init+0x220>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d106      	bne.n	800631a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fb fb0c 	bl	800194c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0210 	bic.w	r2, r2, #16
 8006342:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006344:	f7fd fc2e 	bl	8003ba4 <HAL_GetTick>
 8006348:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800634a:	e014      	b.n	8006376 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800634c:	f7fd fc2a 	bl	8003ba4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b0a      	cmp	r3, #10
 8006358:	d90d      	bls.n	8006376 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006360:	f043 0201 	orr.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2203      	movs	r2, #3
 800636e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e18c      	b.n	8006690 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b08      	cmp	r3, #8
 8006382:	d0e3      	beq.n	800634c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006394:	f7fd fc06 	bl	8003ba4 <HAL_GetTick>
 8006398:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800639a:	e014      	b.n	80063c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800639c:	f7fd fc02 	bl	8003ba4 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b0a      	cmp	r3, #10
 80063a8:	d90d      	bls.n	80063c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2203      	movs	r2, #3
 80063be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e164      	b.n	8006690 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0e3      	beq.n	800639c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0202 	orr.w	r2, r2, #2
 80063e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	7c1b      	ldrb	r3, [r3, #16]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d108      	bne.n	80063fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063fa:	619a      	str	r2, [r3, #24]
 80063fc:	e007      	b.n	800640e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800640c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	7c5b      	ldrb	r3, [r3, #17]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d108      	bne.n	8006428 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006424:	619a      	str	r2, [r3, #24]
 8006426:	e007      	b.n	8006438 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006436:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7c9b      	ldrb	r3, [r3, #18]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d108      	bne.n	8006452 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800644e:	619a      	str	r2, [r3, #24]
 8006450:	e007      	b.n	8006462 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006460:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006486:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0210 	bic.w	r2, r2, #16
 8006496:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d108      	bne.n	80064b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0204 	orr.w	r2, r2, #4
 80064ae:	619a      	str	r2, [r3, #24]
 80064b0:	e030      	b.n	8006514 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d02c      	beq.n	8006514 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d020      	beq.n	8006504 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0210 	orr.w	r2, r2, #16
 80064e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d114      	bne.n	8006514 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0220 	orr.w	r2, r2, #32
 80064f8:	619a      	str	r2, [r3, #24]
 80064fa:	e00b      	b.n	8006514 <HAL_FDCAN_Init+0x234>
 80064fc:	0800f864 	.word	0x0800f864
 8006500:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0220 	orr.w	r2, r2, #32
 8006512:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	3b01      	subs	r3, #1
 800651a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	3b01      	subs	r3, #1
 8006522:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006524:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800652c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	3b01      	subs	r3, #1
 8006536:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800653c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800653e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006548:	d115      	bne.n	8006576 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006554:	3b01      	subs	r3, #1
 8006556:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006558:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	3b01      	subs	r3, #1
 8006560:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006562:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	3b01      	subs	r3, #1
 800656c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006572:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006574:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800659c:	4413      	add	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d011      	beq.n	80065c6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80065aa:	f023 0107 	bic.w	r1, r3, #7
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	3360      	adds	r3, #96	@ 0x60
 80065b6:	443b      	add	r3, r7
 80065b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d011      	beq.n	80065f2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065d6:	f023 0107 	bic.w	r1, r3, #7
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	3360      	adds	r3, #96	@ 0x60
 80065e2:	443b      	add	r3, r7
 80065e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d012      	beq.n	8006620 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006602:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	3360      	adds	r3, #96	@ 0x60
 800660e:	443b      	add	r3, r7
 8006610:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006624:	2b00      	cmp	r3, #0
 8006626:	d012      	beq.n	800664e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006630:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	3360      	adds	r3, #96	@ 0x60
 800663c:	443b      	add	r3, r7
 800663e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <HAL_FDCAN_Init+0x3b8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d107      	bne.n	8006668 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f022 0203 	bic.w	r2, r2, #3
 8006666:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fcc7 	bl	8007014 <FDCAN_CalcultateRamBlockAddresses>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800668c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006690:	4618      	mov	r0, r3
 8006692:	3760      	adds	r7, #96	@ 0x60
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	4000a000 	.word	0x4000a000

0800669c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d141      	bne.n	8006738 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066bc:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e038      	b.n	800674a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e026      	b.n	800674a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006704:	0c1b      	lsrs	r3, r3, #16
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fe04 	bl	8007320 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2101      	movs	r1, #1
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	fa01 f202 	lsl.w	r2, r1, r2
 8006724:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006728:	2201      	movs	r2, #1
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	409a      	lsls	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e008      	b.n	800674a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800673e:	f043 0208 	orr.w	r2, r3, #8
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006754:	b480      	push	{r7}
 8006756:	b08b      	sub	sp, #44	@ 0x2c
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800676c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800676e:	7efb      	ldrb	r3, [r7, #27]
 8006770:	2b02      	cmp	r3, #2
 8006772:	f040 8149 	bne.w	8006a08 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b40      	cmp	r3, #64	@ 0x40
 800677a:	d14c      	bne.n	8006816 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006784:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e13c      	b.n	8006a1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e12a      	b.n	8006a1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067cc:	0e1b      	lsrs	r3, r3, #24
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10a      	bne.n	80067ec <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067de:	0fdb      	lsrs	r3, r3, #31
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006808:	69f9      	ldr	r1, [r7, #28]
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
 8006814:	e068      	b.n	80068e8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b41      	cmp	r3, #65	@ 0x41
 800681a:	d14c      	bne.n	80068b6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006824:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0ec      	b.n	8006a1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006856:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0da      	b.n	8006a1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800686c:	0e1b      	lsrs	r3, r3, #24
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10a      	bne.n	800688c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800687e:	0fdb      	lsrs	r3, r3, #31
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006888:	2301      	movs	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b4:	e018      	b.n	80068e8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d309      	bcc.n	80068d4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0a2      	b.n	8006a1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d107      	bne.n	800690c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	0c9b      	lsrs	r3, r3, #18
 8006902:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	e005      	b.n	8006918 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	3304      	adds	r3, #4
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	b29a      	uxth	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	f003 020f 	and.w	r2, r3, #15
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	0fda      	lsrs	r2, r3, #31
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	3304      	adds	r3, #4
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
 800698c:	e00a      	b.n	80069a4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	441a      	add	r2, r3
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	440b      	add	r3, r1
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	3301      	adds	r3, #1
 80069a2:	623b      	str	r3, [r7, #32]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80069aa:	5cd3      	ldrb	r3, [r2, r3]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d3ec      	bcc.n	800698e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d105      	bne.n	80069c6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80069c4:	e01e      	b.n	8006a04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b41      	cmp	r3, #65	@ 0x41
 80069ca:	d105      	bne.n	80069d8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80069d6:	e015      	b.n	8006a04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b1f      	cmp	r3, #31
 80069dc:	d808      	bhi.n	80069f0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2101      	movs	r1, #1
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80069ee:	e009      	b.n	8006a04 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 021f 	and.w	r2, r3, #31
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2101      	movs	r1, #1
 80069fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006a00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e008      	b.n	8006a1a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a0e:	f043 0208 	orr.w	r2, r3, #8
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
  }
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	372c      	adds	r7, #44	@ 0x2c
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	0800f8cc 	.word	0x0800f8cc

08006a2c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b096      	sub	sp, #88	@ 0x58
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006a58:	4b95      	ldr	r3, [pc, #596]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	079b      	lsls	r3, r3, #30
 8006a5e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006a60:	4b93      	ldr	r3, [pc, #588]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	079b      	lsls	r3, r3, #30
 8006a66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a68:	4013      	ands	r3, r2
 8006a6a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a72:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006a76:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a80:	4013      	ands	r3, r2
 8006a82:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a98:	4013      	ands	r3, r2
 8006a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aba:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8006abe:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac8:	4013      	ands	r3, r2
 8006aca:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8006ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ade:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b10:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b12:	4b67      	ldr	r3, [pc, #412]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fa2e 	bl	8006f7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01c      	beq.n	8006b62 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b3a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b46:	4013      	ands	r3, r2
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b52:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b54:	4b56      	ldr	r3, [pc, #344]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006b5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9e3 	bl	8006f28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8006b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00d      	beq.n	8006b84 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b6e:	4b51      	ldr	r3, [pc, #324]	@ (8006cb4 <HAL_FDCAN_IRQHandler+0x264>)
 8006b70:	400b      	ands	r3, r1
 8006b72:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b74:	4a4e      	ldr	r2, [pc, #312]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b78:	0f9b      	lsrs	r3, r3, #30
 8006b7a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006b7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9b2 	bl	8006ee8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b90:	4b48      	ldr	r3, [pc, #288]	@ (8006cb4 <HAL_FDCAN_IRQHandler+0x264>)
 8006b92:	400b      	ands	r3, r1
 8006b94:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b96:	4a46      	ldr	r2, [pc, #280]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b9a:	0f9b      	lsrs	r3, r3, #30
 8006b9c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9ac 	bl	8006efe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00d      	beq.n	8006bc8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006bb2:	4b40      	ldr	r3, [pc, #256]	@ (8006cb4 <HAL_FDCAN_IRQHandler+0x264>)
 8006bb4:	400b      	ands	r3, r1
 8006bb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bbc:	0f9b      	lsrs	r3, r3, #30
 8006bbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006bc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fa fd0a 	bl	80015dc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006bd4:	4b37      	ldr	r3, [pc, #220]	@ (8006cb4 <HAL_FDCAN_IRQHandler+0x264>)
 8006bd6:	400b      	ands	r3, r1
 8006bd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bda:	4a35      	ldr	r2, [pc, #212]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bde:	0f9b      	lsrs	r3, r3, #30
 8006be0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006be2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7fa fd13 	bl	8001610 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00f      	beq.n	8006c14 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c06:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c08:	4b29      	ldr	r3, [pc, #164]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f980 	bl	8006f14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01c      	beq.n	8006c58 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d017      	beq.n	8006c58 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c30:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c48:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c4a:	4b19      	ldr	r3, [pc, #100]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fa fcf6 	bl	8001644 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00f      	beq.n	8006c82 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006c74:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c76:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f95e 	bl	8006f3e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006c9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ca0:	4b03      	ldr	r3, [pc, #12]	@ (8006cb0 <HAL_FDCAN_IRQHandler+0x260>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f953 	bl	8006f52 <HAL_FDCAN_TimestampWraparoundCallback>
 8006cac:	e004      	b.n	8006cb8 <HAL_FDCAN_IRQHandler+0x268>
 8006cae:	bf00      	nop
 8006cb0:	4000a800 	.word	0x4000a800
 8006cb4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00f      	beq.n	8006ce2 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006cd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8006cd6:	4b81      	ldr	r3, [pc, #516]	@ (8006edc <HAL_FDCAN_IRQHandler+0x48c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f942 	bl	8006f66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d014      	beq.n	8006d16 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00f      	beq.n	8006d16 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006cfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d00:	4b76      	ldr	r3, [pc, #472]	@ (8006edc <HAL_FDCAN_IRQHandler+0x48c>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00d      	beq.n	8006d38 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d22:	4b6f      	ldr	r3, [pc, #444]	@ (8006ee0 <HAL_FDCAN_IRQHandler+0x490>)
 8006d24:	400b      	ands	r3, r1
 8006d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d28:	4a6c      	ldr	r2, [pc, #432]	@ (8006edc <HAL_FDCAN_IRQHandler+0x48c>)
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d2c:	0f9b      	lsrs	r3, r3, #30
 8006d2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f935 	bl	8006fa2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d011      	beq.n	8006d62 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d44:	4b66      	ldr	r3, [pc, #408]	@ (8006ee0 <HAL_FDCAN_IRQHandler+0x490>)
 8006d46:	400b      	ands	r3, r1
 8006d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d4a:	4a64      	ldr	r2, [pc, #400]	@ (8006edc <HAL_FDCAN_IRQHandler+0x48c>)
 8006d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d4e:	0f9b      	lsrs	r3, r3, #30
 8006d50:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a5f      	ldr	r2, [pc, #380]	@ (8006ee4 <HAL_FDCAN_IRQHandler+0x494>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	f040 80aa 	bne.w	8006ec2 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80a2 	beq.w	8006ec2 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d92:	4013      	ands	r3, r2
 8006d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006da0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006daa:	4013      	ands	r3, r2
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8006dd0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8006de8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	4013      	ands	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e12:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f8ce 	bl	8006fb8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e28:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8ce 	bl	8006fce <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d019      	beq.n	8006e70 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d014      	beq.n	8006e70 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e5c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2240      	movs	r2, #64	@ 0x40
 8006e64:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	6939      	ldr	r1, [r7, #16]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f8ba 	bl	8006fe4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8006e7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f8bb 	bl	8006ffc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	6a3a      	ldr	r2, [r7, #32]
 8006e92:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f85e 	bl	8006f8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3758      	adds	r7, #88	@ 0x58
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	4000a800 	.word	0x4000a800
 8006ee0:	3fcfffff 	.word	0x3fcfffff
 8006ee4:	4000a000 	.word	0x4000a000

08006ee8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007020:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800702a:	4ba7      	ldr	r3, [pc, #668]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	0091      	lsls	r1, r2, #2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	430b      	orrs	r3, r1
 8007038:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007044:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	041a      	lsls	r2, r3, #16
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	4413      	add	r3, r2
 8007060:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800706a:	4b97      	ldr	r3, [pc, #604]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800706c:	4013      	ands	r3, r2
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	0091      	lsls	r1, r2, #2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	430b      	orrs	r3, r1
 8007078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708c:	041a      	lsls	r2, r3, #16
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80070ac:	4b86      	ldr	r3, [pc, #536]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	0091      	lsls	r1, r2, #2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	430b      	orrs	r3, r1
 80070ba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	041a      	lsls	r2, r3, #16
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80070e2:	fb02 f303 	mul.w	r3, r2, r3
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80070f4:	4b74      	ldr	r3, [pc, #464]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	0091      	lsls	r1, r2, #2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	430b      	orrs	r3, r1
 8007102:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800710e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007116:	041a      	lsls	r2, r3, #16
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	4413      	add	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800713c:	4b62      	ldr	r3, [pc, #392]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800713e:	4013      	ands	r3, r2
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	0091      	lsls	r1, r2, #2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	430b      	orrs	r3, r1
 800714a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007168:	4b57      	ldr	r3, [pc, #348]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800716a:	4013      	ands	r3, r2
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	0091      	lsls	r1, r2, #2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	430b      	orrs	r3, r1
 8007176:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007182:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718a:	041a      	lsls	r2, r3, #16
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	4413      	add	r3, r2
 80071a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80071aa:	4b47      	ldr	r3, [pc, #284]	@ (80072c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	0091      	lsls	r1, r2, #2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	430b      	orrs	r3, r1
 80071b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071c4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071cc:	041a      	lsls	r2, r3, #16
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071e0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e8:	061a      	lsls	r2, r3, #24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071f8:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80071fa:	4413      	add	r3, r2
 80071fc:	009a      	lsls	r2, r3, #2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800724c:	441a      	add	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007264:	441a      	add	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	441a      	add	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80072b0:	441a      	add	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072be:	4a04      	ldr	r2, [pc, #16]	@ (80072d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d915      	bls.n	80072f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80072c4:	e006      	b.n	80072d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80072c6:	bf00      	nop
 80072c8:	ffff0003 	.word	0xffff0003
 80072cc:	10002b00 	.word	0x10002b00
 80072d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072da:	f043 0220 	orr.w	r2, r3, #32
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2203      	movs	r2, #3
 80072e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e010      	b.n	8007312 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e005      	b.n	8007304 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3304      	adds	r3, #4
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	429a      	cmp	r2, r3
 800730e:	d3f3      	bcc.n	80072f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop

08007320 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	@ 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800733e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007346:	4313      	orrs	r3, r2
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	e00a      	b.n	8007362 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007354:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800735a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800735c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007360:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800736c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007372:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007378:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	3304      	adds	r3, #4
 80073a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	3304      	adds	r3, #4
 80073b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e020      	b.n	80073fa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	3303      	adds	r3, #3
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4413      	add	r3, r2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3302      	adds	r3, #2
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	440b      	add	r3, r1
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3301      	adds	r3, #1
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	440b      	add	r3, r1
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80073de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	440a      	add	r2, r1
 80073e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80073e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	3304      	adds	r3, #4
 80073f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3304      	adds	r3, #4
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	4a06      	ldr	r2, [pc, #24]	@ (8007418 <FDCAN_CopyMessageToRAM+0xf8>)
 8007400:	5cd3      	ldrb	r3, [r2, r3]
 8007402:	461a      	mov	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	4293      	cmp	r3, r2
 8007408:	d3d6      	bcc.n	80073b8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	3724      	adds	r7, #36	@ 0x24
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	0800f8cc 	.word	0x0800f8cc

0800741c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800741c:	b480      	push	{r7}
 800741e:	b089      	sub	sp, #36	@ 0x24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800742a:	4b86      	ldr	r3, [pc, #536]	@ (8007644 <HAL_GPIO_Init+0x228>)
 800742c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800742e:	e18c      	b.n	800774a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	2101      	movs	r1, #1
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	4013      	ands	r3, r2
 800743e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 817e 	beq.w	8007744 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d005      	beq.n	8007460 <HAL_GPIO_Init+0x44>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d130      	bne.n	80074c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	2203      	movs	r2, #3
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	43db      	mvns	r3, r3
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	4013      	ands	r3, r2
 8007476:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	4313      	orrs	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007496:	2201      	movs	r2, #1
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0201 	and.w	r2, r3, #1
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d017      	beq.n	80074fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	2203      	movs	r2, #3
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43db      	mvns	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	4013      	ands	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d123      	bne.n	8007552 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	08da      	lsrs	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3208      	adds	r2, #8
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	220f      	movs	r2, #15
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	43db      	mvns	r3, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	4013      	ands	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	4313      	orrs	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	08da      	lsrs	r2, r3, #3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3208      	adds	r2, #8
 800754c:	69b9      	ldr	r1, [r7, #24]
 800754e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	2203      	movs	r2, #3
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	43db      	mvns	r3, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4013      	ands	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f003 0203 	and.w	r2, r3, #3
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	4313      	orrs	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80d8 	beq.w	8007744 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007594:	4b2c      	ldr	r3, [pc, #176]	@ (8007648 <HAL_GPIO_Init+0x22c>)
 8007596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800759a:	4a2b      	ldr	r2, [pc, #172]	@ (8007648 <HAL_GPIO_Init+0x22c>)
 800759c:	f043 0302 	orr.w	r3, r3, #2
 80075a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80075a4:	4b28      	ldr	r3, [pc, #160]	@ (8007648 <HAL_GPIO_Init+0x22c>)
 80075a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075b2:	4a26      	ldr	r2, [pc, #152]	@ (800764c <HAL_GPIO_Init+0x230>)
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	089b      	lsrs	r3, r3, #2
 80075b8:	3302      	adds	r3, #2
 80075ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	220f      	movs	r2, #15
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	43db      	mvns	r3, r3
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4013      	ands	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007650 <HAL_GPIO_Init+0x234>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d04a      	beq.n	8007674 <HAL_GPIO_Init+0x258>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007654 <HAL_GPIO_Init+0x238>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d02b      	beq.n	800763e <HAL_GPIO_Init+0x222>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007658 <HAL_GPIO_Init+0x23c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d025      	beq.n	800763a <HAL_GPIO_Init+0x21e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1a      	ldr	r2, [pc, #104]	@ (800765c <HAL_GPIO_Init+0x240>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01f      	beq.n	8007636 <HAL_GPIO_Init+0x21a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a19      	ldr	r2, [pc, #100]	@ (8007660 <HAL_GPIO_Init+0x244>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d019      	beq.n	8007632 <HAL_GPIO_Init+0x216>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a18      	ldr	r2, [pc, #96]	@ (8007664 <HAL_GPIO_Init+0x248>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <HAL_GPIO_Init+0x212>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a17      	ldr	r2, [pc, #92]	@ (8007668 <HAL_GPIO_Init+0x24c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00d      	beq.n	800762a <HAL_GPIO_Init+0x20e>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a16      	ldr	r2, [pc, #88]	@ (800766c <HAL_GPIO_Init+0x250>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <HAL_GPIO_Init+0x20a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a15      	ldr	r2, [pc, #84]	@ (8007670 <HAL_GPIO_Init+0x254>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d101      	bne.n	8007622 <HAL_GPIO_Init+0x206>
 800761e:	2309      	movs	r3, #9
 8007620:	e029      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 8007622:	230a      	movs	r3, #10
 8007624:	e027      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 8007626:	2307      	movs	r3, #7
 8007628:	e025      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 800762a:	2306      	movs	r3, #6
 800762c:	e023      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 800762e:	2305      	movs	r3, #5
 8007630:	e021      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 8007632:	2304      	movs	r3, #4
 8007634:	e01f      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 8007636:	2303      	movs	r3, #3
 8007638:	e01d      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 800763a:	2302      	movs	r3, #2
 800763c:	e01b      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 800763e:	2301      	movs	r3, #1
 8007640:	e019      	b.n	8007676 <HAL_GPIO_Init+0x25a>
 8007642:	bf00      	nop
 8007644:	58000080 	.word	0x58000080
 8007648:	58024400 	.word	0x58024400
 800764c:	58000400 	.word	0x58000400
 8007650:	58020000 	.word	0x58020000
 8007654:	58020400 	.word	0x58020400
 8007658:	58020800 	.word	0x58020800
 800765c:	58020c00 	.word	0x58020c00
 8007660:	58021000 	.word	0x58021000
 8007664:	58021400 	.word	0x58021400
 8007668:	58021800 	.word	0x58021800
 800766c:	58021c00 	.word	0x58021c00
 8007670:	58022400 	.word	0x58022400
 8007674:	2300      	movs	r3, #0
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	f002 0203 	and.w	r2, r2, #3
 800767c:	0092      	lsls	r2, r2, #2
 800767e:	4093      	lsls	r3, r2
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	4313      	orrs	r3, r2
 8007684:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007686:	4938      	ldr	r1, [pc, #224]	@ (8007768 <HAL_GPIO_Init+0x34c>)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	3302      	adds	r3, #2
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	43db      	mvns	r3, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4013      	ands	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4013      	ands	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	43db      	mvns	r3, r3
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4013      	ands	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	f47f ae6b 	bne.w	8007430 <HAL_GPIO_Init+0x14>
  }
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	3724      	adds	r7, #36	@ 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	58000400 	.word	0x58000400

0800776c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	807b      	strh	r3, [r7, #2]
 8007778:	4613      	mov	r3, r2
 800777a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800777c:	787b      	ldrb	r3, [r7, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007782:	887a      	ldrh	r2, [r7, #2]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007788:	e003      	b.n	8007792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800778a:	887b      	ldrh	r3, [r7, #2]
 800778c:	041a      	lsls	r2, r3, #16
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	619a      	str	r2, [r3, #24]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e08b      	b.n	80078ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fa fe40 	bl	800244c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2224      	movs	r2, #36	@ 0x24
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80077f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d107      	bne.n	800781a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	e006      	b.n	8007828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d108      	bne.n	8007842 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e007      	b.n	8007852 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <HAL_I2C_Init+0x134>)
 800785e:	430b      	orrs	r3, r1
 8007860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69d9      	ldr	r1, [r3, #28]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1a      	ldr	r2, [r3, #32]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	02008000 	.word	0x02008000

080078d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d138      	bne.n	8007960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e032      	b.n	8007962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2224      	movs	r2, #36	@ 0x24
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800792a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6819      	ldr	r1, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b20      	cmp	r3, #32
 8007982:	d139      	bne.n	80079f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800798e:	2302      	movs	r3, #2
 8007990:	e033      	b.n	80079fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	@ 0x24
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	e000      	b.n	80079fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079f8:	2302      	movs	r3, #2
  }
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a10:	4b19      	ldr	r3, [pc, #100]	@ (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d00a      	beq.n	8007a32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a1c:	4b16      	ldr	r3, [pc, #88]	@ (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d001      	beq.n	8007a2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e01f      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e01d      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a32:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f023 0207 	bic.w	r2, r3, #7
 8007a3a:	490f      	ldr	r1, [pc, #60]	@ (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a42:	f7fc f8af 	bl	8003ba4 <HAL_GetTick>
 8007a46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a48:	e009      	b.n	8007a5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a4a:	f7fc f8ab 	bl	8003ba4 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a58:	d901      	bls.n	8007a5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e007      	b.n	8007a6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a5e:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <HAL_PWREx_ConfigSupply+0x70>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6a:	d1ee      	bne.n	8007a4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	58024800 	.word	0x58024800

08007a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08c      	sub	sp, #48	@ 0x30
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e3c8      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8087 	beq.w	8007baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a9c:	4b88      	ldr	r3, [pc, #544]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aa6:	4b86      	ldr	r3, [pc, #536]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aae:	2b10      	cmp	r3, #16
 8007ab0:	d007      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x46>
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	2b18      	cmp	r3, #24
 8007ab6:	d110      	bne.n	8007ada <HAL_RCC_OscConfig+0x5e>
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d10b      	bne.n	8007ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d06c      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x12c>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d168      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e3a2      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae2:	d106      	bne.n	8007af2 <HAL_RCC_OscConfig+0x76>
 8007ae4:	4b76      	ldr	r3, [pc, #472]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a75      	ldr	r2, [pc, #468]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	e02e      	b.n	8007b50 <HAL_RCC_OscConfig+0xd4>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10c      	bne.n	8007b14 <HAL_RCC_OscConfig+0x98>
 8007afa:	4b71      	ldr	r3, [pc, #452]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a70      	ldr	r2, [pc, #448]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	4b6e      	ldr	r3, [pc, #440]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	e01d      	b.n	8007b50 <HAL_RCC_OscConfig+0xd4>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b1c:	d10c      	bne.n	8007b38 <HAL_RCC_OscConfig+0xbc>
 8007b1e:	4b68      	ldr	r3, [pc, #416]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a67      	ldr	r2, [pc, #412]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	4b65      	ldr	r3, [pc, #404]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a64      	ldr	r2, [pc, #400]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e00b      	b.n	8007b50 <HAL_RCC_OscConfig+0xd4>
 8007b38:	4b61      	ldr	r3, [pc, #388]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a60      	ldr	r2, [pc, #384]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	4b5e      	ldr	r3, [pc, #376]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a5d      	ldr	r2, [pc, #372]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d013      	beq.n	8007b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b58:	f7fc f824 	bl	8003ba4 <HAL_GetTick>
 8007b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b60:	f7fc f820 	bl	8003ba4 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b64      	cmp	r3, #100	@ 0x64
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e356      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b72:	4b53      	ldr	r3, [pc, #332]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0xe4>
 8007b7e:	e014      	b.n	8007baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b80:	f7fc f810 	bl	8003ba4 <HAL_GetTick>
 8007b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b88:	f7fc f80c 	bl	8003ba4 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b64      	cmp	r3, #100	@ 0x64
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e342      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b9a:	4b49      	ldr	r3, [pc, #292]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f0      	bne.n	8007b88 <HAL_RCC_OscConfig+0x10c>
 8007ba6:	e000      	b.n	8007baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 808c 	beq.w	8007cd0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bb8:	4b41      	ldr	r3, [pc, #260]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <HAL_RCC_OscConfig+0x162>
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	2b18      	cmp	r3, #24
 8007bd2:	d137      	bne.n	8007c44 <HAL_RCC_OscConfig+0x1c8>
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d132      	bne.n	8007c44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bde:	4b38      	ldr	r3, [pc, #224]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x17a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e314      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007bf6:	4b32      	ldr	r3, [pc, #200]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f023 0219 	bic.w	r2, r3, #25
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	492f      	ldr	r1, [pc, #188]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c08:	f7fb ffcc 	bl	8003ba4 <HAL_GetTick>
 8007c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c10:	f7fb ffc8 	bl	8003ba4 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e2fe      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c22:	4b27      	ldr	r3, [pc, #156]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f0      	beq.n	8007c10 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c2e:	4b24      	ldr	r3, [pc, #144]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	061b      	lsls	r3, r3, #24
 8007c3c:	4920      	ldr	r1, [pc, #128]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c42:	e045      	b.n	8007cd0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d026      	beq.n	8007c9a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f023 0219 	bic.w	r2, r3, #25
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	4919      	ldr	r1, [pc, #100]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5e:	f7fb ffa1 	bl	8003ba4 <HAL_GetTick>
 8007c62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c64:	e008      	b.n	8007c78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c66:	f7fb ff9d 	bl	8003ba4 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e2d3      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c78:	4b11      	ldr	r3, [pc, #68]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0f0      	beq.n	8007c66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c84:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	490b      	ldr	r1, [pc, #44]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	604b      	str	r3, [r1, #4]
 8007c98:	e01a      	b.n	8007cd0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c9a:	4b09      	ldr	r3, [pc, #36]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a08      	ldr	r2, [pc, #32]	@ (8007cc0 <HAL_RCC_OscConfig+0x244>)
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca6:	f7fb ff7d 	bl	8003ba4 <HAL_GetTick>
 8007caa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cac:	e00a      	b.n	8007cc4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cae:	f7fb ff79 	bl	8003ba4 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d903      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e2af      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
 8007cc0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cc4:	4b96      	ldr	r3, [pc, #600]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1ee      	bne.n	8007cae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d06a      	beq.n	8007db2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cdc:	4b90      	ldr	r3, [pc, #576]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ce4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ce6:	4b8e      	ldr	r3, [pc, #568]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d007      	beq.n	8007d02 <HAL_RCC_OscConfig+0x286>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b18      	cmp	r3, #24
 8007cf6:	d11b      	bne.n	8007d30 <HAL_RCC_OscConfig+0x2b4>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d116      	bne.n	8007d30 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d02:	4b87      	ldr	r3, [pc, #540]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_RCC_OscConfig+0x29e>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	2b80      	cmp	r3, #128	@ 0x80
 8007d14:	d001      	beq.n	8007d1a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e282      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d1a:	4b81      	ldr	r3, [pc, #516]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	061b      	lsls	r3, r3, #24
 8007d28:	497d      	ldr	r1, [pc, #500]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d2e:	e040      	b.n	8007db2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d023      	beq.n	8007d80 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d38:	4b79      	ldr	r3, [pc, #484]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a78      	ldr	r2, [pc, #480]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fb ff2e 	bl	8003ba4 <HAL_GetTick>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d4c:	f7fb ff2a 	bl	8003ba4 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e260      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d5e:	4b70      	ldr	r3, [pc, #448]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f0      	beq.n	8007d4c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	061b      	lsls	r3, r3, #24
 8007d78:	4969      	ldr	r1, [pc, #420]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60cb      	str	r3, [r1, #12]
 8007d7e:	e018      	b.n	8007db2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d80:	4b67      	ldr	r3, [pc, #412]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a66      	ldr	r2, [pc, #408]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fb ff0a 	bl	8003ba4 <HAL_GetTick>
 8007d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d94:	f7fb ff06 	bl	8003ba4 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e23c      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007da6:	4b5e      	ldr	r3, [pc, #376]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d036      	beq.n	8007e2c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d019      	beq.n	8007dfa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dc6:	4b56      	ldr	r3, [pc, #344]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dca:	4a55      	ldr	r2, [pc, #340]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dd2:	f7fb fee7 	bl	8003ba4 <HAL_GetTick>
 8007dd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dda:	f7fb fee3 	bl	8003ba4 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e219      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dec:	4b4c      	ldr	r3, [pc, #304]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0f0      	beq.n	8007dda <HAL_RCC_OscConfig+0x35e>
 8007df8:	e018      	b.n	8007e2c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dfa:	4b49      	ldr	r3, [pc, #292]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dfe:	4a48      	ldr	r2, [pc, #288]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e06:	f7fb fecd 	bl	8003ba4 <HAL_GetTick>
 8007e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e0c:	e008      	b.n	8007e20 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e0e:	f7fb fec9 	bl	8003ba4 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e1ff      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e20:	4b3f      	ldr	r3, [pc, #252]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f0      	bne.n	8007e0e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d036      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d019      	beq.n	8007e74 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e40:	4b37      	ldr	r3, [pc, #220]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a36      	ldr	r2, [pc, #216]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e4c:	f7fb feaa 	bl	8003ba4 <HAL_GetTick>
 8007e50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e54:	f7fb fea6 	bl	8003ba4 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e1dc      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e66:	4b2e      	ldr	r3, [pc, #184]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCC_OscConfig+0x3d8>
 8007e72:	e018      	b.n	8007ea6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e74:	4b2a      	ldr	r3, [pc, #168]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a29      	ldr	r2, [pc, #164]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e80:	f7fb fe90 	bl	8003ba4 <HAL_GetTick>
 8007e84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e88:	f7fb fe8c 	bl	8003ba4 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e1c2      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e9a:	4b21      	ldr	r3, [pc, #132]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0304 	and.w	r3, r3, #4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8086 	beq.w	8007fc0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f24 <HAL_RCC_OscConfig+0x4a8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f24 <HAL_RCC_OscConfig+0x4a8>)
 8007eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ec0:	f7fb fe70 	bl	8003ba4 <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec8:	f7fb fe6c 	bl	8003ba4 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	@ 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e1a2      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eda:	4b12      	ldr	r3, [pc, #72]	@ (8007f24 <HAL_RCC_OscConfig+0x4a8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d106      	bne.n	8007efc <HAL_RCC_OscConfig+0x480>
 8007eee:	4b0c      	ldr	r3, [pc, #48]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007ef4:	f043 0301 	orr.w	r3, r3, #1
 8007ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007efa:	e032      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e6>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d111      	bne.n	8007f28 <HAL_RCC_OscConfig+0x4ac>
 8007f04:	4b06      	ldr	r3, [pc, #24]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f08:	4a05      	ldr	r2, [pc, #20]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f10:	4b03      	ldr	r3, [pc, #12]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f14:	4a02      	ldr	r2, [pc, #8]	@ (8007f20 <HAL_RCC_OscConfig+0x4a4>)
 8007f16:	f023 0304 	bic.w	r3, r3, #4
 8007f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f1c:	e021      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e6>
 8007f1e:	bf00      	nop
 8007f20:	58024400 	.word	0x58024400
 8007f24:	58024800 	.word	0x58024800
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d10c      	bne.n	8007f4a <HAL_RCC_OscConfig+0x4ce>
 8007f30:	4b83      	ldr	r3, [pc, #524]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f34:	4a82      	ldr	r2, [pc, #520]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f36:	f043 0304 	orr.w	r3, r3, #4
 8007f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f3c:	4b80      	ldr	r3, [pc, #512]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f40:	4a7f      	ldr	r2, [pc, #508]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f48:	e00b      	b.n	8007f62 <HAL_RCC_OscConfig+0x4e6>
 8007f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f56:	4b7a      	ldr	r3, [pc, #488]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f5a:	4a79      	ldr	r2, [pc, #484]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d015      	beq.n	8007f96 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f6a:	f7fb fe1b 	bl	8003ba4 <HAL_GetTick>
 8007f6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f70:	e00a      	b.n	8007f88 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f72:	f7fb fe17 	bl	8003ba4 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e14b      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f88:	4b6d      	ldr	r3, [pc, #436]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0ee      	beq.n	8007f72 <HAL_RCC_OscConfig+0x4f6>
 8007f94:	e014      	b.n	8007fc0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f96:	f7fb fe05 	bl	8003ba4 <HAL_GetTick>
 8007f9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f9c:	e00a      	b.n	8007fb4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9e:	f7fb fe01 	bl	8003ba4 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e135      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007fb4:	4b62      	ldr	r3, [pc, #392]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1ee      	bne.n	8007f9e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 812a 	beq.w	800821e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007fca:	4b5d      	ldr	r3, [pc, #372]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fd2:	2b18      	cmp	r3, #24
 8007fd4:	f000 80ba 	beq.w	800814c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	f040 8095 	bne.w	800810c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe2:	4b57      	ldr	r3, [pc, #348]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a56      	ldr	r2, [pc, #344]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8007fe8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fee:	f7fb fdd9 	bl	8003ba4 <HAL_GetTick>
 8007ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ff4:	e008      	b.n	8008008 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff6:	f7fb fdd5 	bl	8003ba4 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e10b      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008008:	4b4d      	ldr	r3, [pc, #308]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1f0      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008014:	4b4a      	ldr	r3, [pc, #296]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008016:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008018:	4b4a      	ldr	r3, [pc, #296]	@ (8008144 <HAL_RCC_OscConfig+0x6c8>)
 800801a:	4013      	ands	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008024:	0112      	lsls	r2, r2, #4
 8008026:	430a      	orrs	r2, r1
 8008028:	4945      	ldr	r1, [pc, #276]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 800802a:	4313      	orrs	r3, r2
 800802c:	628b      	str	r3, [r1, #40]	@ 0x28
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008032:	3b01      	subs	r3, #1
 8008034:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800803c:	3b01      	subs	r3, #1
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	b29b      	uxth	r3, r3
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	3b01      	subs	r3, #1
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008056:	3b01      	subs	r3, #1
 8008058:	061b      	lsls	r3, r3, #24
 800805a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800805e:	4938      	ldr	r1, [pc, #224]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008060:	4313      	orrs	r3, r2
 8008062:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008064:	4b36      	ldr	r3, [pc, #216]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	4a35      	ldr	r2, [pc, #212]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008070:	4b33      	ldr	r3, [pc, #204]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008074:	4b34      	ldr	r3, [pc, #208]	@ (8008148 <HAL_RCC_OscConfig+0x6cc>)
 8008076:	4013      	ands	r3, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800807c:	00d2      	lsls	r2, r2, #3
 800807e:	4930      	ldr	r1, [pc, #192]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008080:	4313      	orrs	r3, r2
 8008082:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008084:	4b2e      	ldr	r3, [pc, #184]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	f023 020c 	bic.w	r2, r3, #12
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008090:	492b      	ldr	r1, [pc, #172]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008096:	4b2a      	ldr	r3, [pc, #168]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	f023 0202 	bic.w	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a2:	4927      	ldr	r1, [pc, #156]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80080a8:	4b25      	ldr	r3, [pc, #148]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	4a24      	ldr	r2, [pc, #144]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4b22      	ldr	r3, [pc, #136]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	4a21      	ldr	r2, [pc, #132]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80080c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80080cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080d2:	f043 0301 	orr.w	r3, r3, #1
 80080d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080d8:	4b19      	ldr	r3, [pc, #100]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a18      	ldr	r2, [pc, #96]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 80080de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e4:	f7fb fd5e 	bl	8003ba4 <HAL_GetTick>
 80080e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080ea:	e008      	b.n	80080fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ec:	f7fb fd5a 	bl	8003ba4 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e090      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080fe:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCC_OscConfig+0x670>
 800810a:	e088      	b.n	800821e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800810c:	4b0c      	ldr	r3, [pc, #48]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0b      	ldr	r2, [pc, #44]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008118:	f7fb fd44 	bl	8003ba4 <HAL_GetTick>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008120:	f7fb fd40 	bl	8003ba4 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e076      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <HAL_RCC_OscConfig+0x6c4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1f0      	bne.n	8008120 <HAL_RCC_OscConfig+0x6a4>
 800813e:	e06e      	b.n	800821e <HAL_RCC_OscConfig+0x7a2>
 8008140:	58024400 	.word	0x58024400
 8008144:	fffffc0c 	.word	0xfffffc0c
 8008148:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800814c:	4b36      	ldr	r3, [pc, #216]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 800814e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008150:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008152:	4b35      	ldr	r3, [pc, #212]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008156:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	2b01      	cmp	r3, #1
 800815e:	d031      	beq.n	80081c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f003 0203 	and.w	r2, r3, #3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800816a:	429a      	cmp	r2, r3
 800816c:	d12a      	bne.n	80081c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	091b      	lsrs	r3, r3, #4
 8008172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817a:	429a      	cmp	r2, r3
 800817c:	d122      	bne.n	80081c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008188:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800818a:	429a      	cmp	r2, r3
 800818c:	d11a      	bne.n	80081c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	0a5b      	lsrs	r3, r3, #9
 8008192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800819a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800819c:	429a      	cmp	r2, r3
 800819e:	d111      	bne.n	80081c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	0c1b      	lsrs	r3, r3, #16
 80081a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d108      	bne.n	80081c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	0e1b      	lsrs	r3, r3, #24
 80081b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d001      	beq.n	80081c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e02b      	b.n	8008220 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80081c8:	4b17      	ldr	r3, [pc, #92]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 80081ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081cc:	08db      	lsrs	r3, r3, #3
 80081ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d01f      	beq.n	800821e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80081de:	4b12      	ldr	r3, [pc, #72]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	4a11      	ldr	r2, [pc, #68]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081ea:	f7fb fcdb 	bl	8003ba4 <HAL_GetTick>
 80081ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80081f0:	bf00      	nop
 80081f2:	f7fb fcd7 	bl	8003ba4 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d0f9      	beq.n	80081f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 8008200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008202:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <HAL_RCC_OscConfig+0x7b0>)
 8008204:	4013      	ands	r3, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800820a:	00d2      	lsls	r2, r2, #3
 800820c:	4906      	ldr	r1, [pc, #24]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 800820e:	4313      	orrs	r3, r2
 8008210:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008212:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <HAL_RCC_OscConfig+0x7ac>)
 8008218:	f043 0301 	orr.w	r3, r3, #1
 800821c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3730      	adds	r7, #48	@ 0x30
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400
 800822c:	ffff0007 	.word	0xffff0007

08008230 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e19c      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008244:	4b8a      	ldr	r3, [pc, #552]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 030f 	and.w	r3, r3, #15
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d910      	bls.n	8008274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008252:	4b87      	ldr	r3, [pc, #540]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f023 020f 	bic.w	r2, r3, #15
 800825a:	4985      	ldr	r1, [pc, #532]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	4313      	orrs	r3, r2
 8008260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008262:	4b83      	ldr	r3, [pc, #524]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d001      	beq.n	8008274 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e184      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d010      	beq.n	80082a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	4b7b      	ldr	r3, [pc, #492]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800828c:	429a      	cmp	r2, r3
 800828e:	d908      	bls.n	80082a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008290:	4b78      	ldr	r3, [pc, #480]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	4975      	ldr	r1, [pc, #468]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d010      	beq.n	80082d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695a      	ldr	r2, [r3, #20]
 80082b2:	4b70      	ldr	r3, [pc, #448]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d908      	bls.n	80082d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082be:	4b6d      	ldr	r3, [pc, #436]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	496a      	ldr	r1, [pc, #424]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0310 	and.w	r3, r3, #16
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d010      	beq.n	80082fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699a      	ldr	r2, [r3, #24]
 80082e0:	4b64      	ldr	r3, [pc, #400]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d908      	bls.n	80082fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082ec:	4b61      	ldr	r3, [pc, #388]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	495e      	ldr	r1, [pc, #376]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b00      	cmp	r3, #0
 8008308:	d010      	beq.n	800832c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69da      	ldr	r2, [r3, #28]
 800830e:	4b59      	ldr	r3, [pc, #356]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008316:	429a      	cmp	r2, r3
 8008318:	d908      	bls.n	800832c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800831a:	4b56      	ldr	r3, [pc, #344]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4953      	ldr	r1, [pc, #332]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008328:	4313      	orrs	r3, r2
 800832a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d010      	beq.n	800835a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	4b4d      	ldr	r3, [pc, #308]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	429a      	cmp	r2, r3
 8008346:	d908      	bls.n	800835a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008348:	4b4a      	ldr	r3, [pc, #296]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f023 020f 	bic.w	r2, r3, #15
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4947      	ldr	r1, [pc, #284]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008356:	4313      	orrs	r3, r2
 8008358:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d055      	beq.n	8008412 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008366:	4b43      	ldr	r3, [pc, #268]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	4940      	ldr	r1, [pc, #256]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008374:	4313      	orrs	r3, r2
 8008376:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d107      	bne.n	8008390 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008380:	4b3c      	ldr	r3, [pc, #240]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d121      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e0f6      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b03      	cmp	r3, #3
 8008396:	d107      	bne.n	80083a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008398:	4b36      	ldr	r3, [pc, #216]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d115      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0ea      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d107      	bne.n	80083c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083b0:	4b30      	ldr	r3, [pc, #192]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e0de      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083c0:	4b2c      	ldr	r3, [pc, #176]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e0d6      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083d0:	4b28      	ldr	r3, [pc, #160]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f023 0207 	bic.w	r2, r3, #7
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4925      	ldr	r1, [pc, #148]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083e2:	f7fb fbdf 	bl	8003ba4 <HAL_GetTick>
 80083e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e8:	e00a      	b.n	8008400 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083ea:	f7fb fbdb 	bl	8003ba4 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e0be      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008400:	4b1c      	ldr	r3, [pc, #112]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	429a      	cmp	r2, r3
 8008410:	d1eb      	bne.n	80083ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d010      	beq.n	8008440 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f003 030f 	and.w	r3, r3, #15
 800842a:	429a      	cmp	r2, r3
 800842c:	d208      	bcs.n	8008440 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800842e:	4b11      	ldr	r3, [pc, #68]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f023 020f 	bic.w	r2, r3, #15
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	490e      	ldr	r1, [pc, #56]	@ (8008474 <HAL_RCC_ClockConfig+0x244>)
 800843c:	4313      	orrs	r3, r2
 800843e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008440:	4b0b      	ldr	r3, [pc, #44]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d214      	bcs.n	8008478 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800844e:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f023 020f 	bic.w	r2, r3, #15
 8008456:	4906      	ldr	r1, [pc, #24]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	4313      	orrs	r3, r2
 800845c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800845e:	4b04      	ldr	r3, [pc, #16]	@ (8008470 <HAL_RCC_ClockConfig+0x240>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 030f 	and.w	r3, r3, #15
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d005      	beq.n	8008478 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e086      	b.n	800857e <HAL_RCC_ClockConfig+0x34e>
 8008470:	52002000 	.word	0x52002000
 8008474:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d010      	beq.n	80084a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	4b3f      	ldr	r3, [pc, #252]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008490:	429a      	cmp	r2, r3
 8008492:	d208      	bcs.n	80084a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008494:	4b3c      	ldr	r3, [pc, #240]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	4939      	ldr	r1, [pc, #228]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d010      	beq.n	80084d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	4b34      	ldr	r3, [pc, #208]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084be:	429a      	cmp	r2, r3
 80084c0:	d208      	bcs.n	80084d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084c2:	4b31      	ldr	r3, [pc, #196]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	492e      	ldr	r1, [pc, #184]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0310 	and.w	r3, r3, #16
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d010      	beq.n	8008502 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699a      	ldr	r2, [r3, #24]
 80084e4:	4b28      	ldr	r3, [pc, #160]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d208      	bcs.n	8008502 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084f0:	4b25      	ldr	r3, [pc, #148]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	4922      	ldr	r1, [pc, #136]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d010      	beq.n	8008530 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69da      	ldr	r2, [r3, #28]
 8008512:	4b1d      	ldr	r3, [pc, #116]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800851a:	429a      	cmp	r2, r3
 800851c:	d208      	bcs.n	8008530 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800851e:	4b1a      	ldr	r3, [pc, #104]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	4917      	ldr	r1, [pc, #92]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 800852c:	4313      	orrs	r3, r2
 800852e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008530:	f000 f834 	bl	800859c <HAL_RCC_GetSysClockFreq>
 8008534:	4602      	mov	r2, r0
 8008536:	4b14      	ldr	r3, [pc, #80]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	4912      	ldr	r1, [pc, #72]	@ (800858c <HAL_RCC_ClockConfig+0x35c>)
 8008542:	5ccb      	ldrb	r3, [r1, r3]
 8008544:	f003 031f 	and.w	r3, r3, #31
 8008548:	fa22 f303 	lsr.w	r3, r2, r3
 800854c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <HAL_RCC_ClockConfig+0x358>)
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	4a0d      	ldr	r2, [pc, #52]	@ (800858c <HAL_RCC_ClockConfig+0x35c>)
 8008558:	5cd3      	ldrb	r3, [r2, r3]
 800855a:	f003 031f 	and.w	r3, r3, #31
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	fa22 f303 	lsr.w	r3, r2, r3
 8008564:	4a0a      	ldr	r2, [pc, #40]	@ (8008590 <HAL_RCC_ClockConfig+0x360>)
 8008566:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008568:	4a0a      	ldr	r2, [pc, #40]	@ (8008594 <HAL_RCC_ClockConfig+0x364>)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800856e:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <HAL_RCC_ClockConfig+0x368>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fb facc 	bl	8003b10 <HAL_InitTick>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
 800858c:	0800f8bc 	.word	0x0800f8bc
 8008590:	240000c8 	.word	0x240000c8
 8008594:	240000c4 	.word	0x240000c4
 8008598:	240000cc 	.word	0x240000cc

0800859c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800859c:	b480      	push	{r7}
 800859e:	b089      	sub	sp, #36	@ 0x24
 80085a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085a2:	4bb3      	ldr	r3, [pc, #716]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085aa:	2b18      	cmp	r3, #24
 80085ac:	f200 8155 	bhi.w	800885a <HAL_RCC_GetSysClockFreq+0x2be>
 80085b0:	a201      	add	r2, pc, #4	@ (adr r2, 80085b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	0800861d 	.word	0x0800861d
 80085bc:	0800885b 	.word	0x0800885b
 80085c0:	0800885b 	.word	0x0800885b
 80085c4:	0800885b 	.word	0x0800885b
 80085c8:	0800885b 	.word	0x0800885b
 80085cc:	0800885b 	.word	0x0800885b
 80085d0:	0800885b 	.word	0x0800885b
 80085d4:	0800885b 	.word	0x0800885b
 80085d8:	08008643 	.word	0x08008643
 80085dc:	0800885b 	.word	0x0800885b
 80085e0:	0800885b 	.word	0x0800885b
 80085e4:	0800885b 	.word	0x0800885b
 80085e8:	0800885b 	.word	0x0800885b
 80085ec:	0800885b 	.word	0x0800885b
 80085f0:	0800885b 	.word	0x0800885b
 80085f4:	0800885b 	.word	0x0800885b
 80085f8:	08008649 	.word	0x08008649
 80085fc:	0800885b 	.word	0x0800885b
 8008600:	0800885b 	.word	0x0800885b
 8008604:	0800885b 	.word	0x0800885b
 8008608:	0800885b 	.word	0x0800885b
 800860c:	0800885b 	.word	0x0800885b
 8008610:	0800885b 	.word	0x0800885b
 8008614:	0800885b 	.word	0x0800885b
 8008618:	0800864f 	.word	0x0800864f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800861c:	4b94      	ldr	r3, [pc, #592]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008628:	4b91      	ldr	r3, [pc, #580]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	4a90      	ldr	r2, [pc, #576]	@ (8008874 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
 8008638:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800863a:	e111      	b.n	8008860 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800863c:	4b8d      	ldr	r3, [pc, #564]	@ (8008874 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800863e:	61bb      	str	r3, [r7, #24]
      break;
 8008640:	e10e      	b.n	8008860 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008642:	4b8d      	ldr	r3, [pc, #564]	@ (8008878 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008644:	61bb      	str	r3, [r7, #24]
      break;
 8008646:	e10b      	b.n	8008860 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008648:	4b8c      	ldr	r3, [pc, #560]	@ (800887c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800864a:	61bb      	str	r3, [r7, #24]
      break;
 800864c:	e108      	b.n	8008860 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800864e:	4b88      	ldr	r3, [pc, #544]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008658:	4b85      	ldr	r3, [pc, #532]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865c:	091b      	lsrs	r3, r3, #4
 800865e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008662:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008664:	4b82      	ldr	r3, [pc, #520]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800866e:	4b80      	ldr	r3, [pc, #512]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80e1 	beq.w	8008854 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b02      	cmp	r3, #2
 8008696:	f000 8083 	beq.w	80087a0 <HAL_RCC_GetSysClockFreq+0x204>
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b02      	cmp	r3, #2
 800869e:	f200 80a1 	bhi.w	80087e4 <HAL_RCC_GetSysClockFreq+0x248>
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_RCC_GetSysClockFreq+0x114>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d056      	beq.n	800875c <HAL_RCC_GetSysClockFreq+0x1c0>
 80086ae:	e099      	b.n	80087e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02d      	beq.n	8008718 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	08db      	lsrs	r3, r3, #3
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	4a6b      	ldr	r2, [pc, #428]	@ (8008874 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
 80086cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e6:	4b62      	ldr	r3, [pc, #392]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008716:	e087      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008884 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	4b51      	ldr	r3, [pc, #324]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873a:	ed97 6a02 	vldr	s12, [r7, #8]
 800873e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800875a:	e065      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008888 <HAL_RCC_GetSysClockFreq+0x2ec>
 800876a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876e:	4b40      	ldr	r3, [pc, #256]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008782:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800879e:	e043      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800888c <HAL_RCC_GetSysClockFreq+0x2f0>
 80087ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087e2:	e021      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008888 <HAL_RCC_GetSysClockFreq+0x2ec>
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008806:	ed97 6a02 	vldr	s12, [r7, #8]
 800880a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008880 <HAL_RCC_GetSysClockFreq+0x2e4>
 800880e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800881a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008826:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008828:	4b11      	ldr	r3, [pc, #68]	@ (8008870 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800882a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882c:	0a5b      	lsrs	r3, r3, #9
 800882e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008832:	3301      	adds	r3, #1
 8008834:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	ee07 3a90 	vmov	s15, r3
 800883c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008840:	edd7 6a07 	vldr	s13, [r7, #28]
 8008844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884c:	ee17 3a90 	vmov	r3, s15
 8008850:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008852:	e005      	b.n	8008860 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	61bb      	str	r3, [r7, #24]
      break;
 8008858:	e002      	b.n	8008860 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800885a:	4b07      	ldr	r3, [pc, #28]	@ (8008878 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800885c:	61bb      	str	r3, [r7, #24]
      break;
 800885e:	bf00      	nop
  }

  return sysclockfreq;
 8008860:	69bb      	ldr	r3, [r7, #24]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3724      	adds	r7, #36	@ 0x24
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400
 8008874:	03d09000 	.word	0x03d09000
 8008878:	003d0900 	.word	0x003d0900
 800887c:	017d7840 	.word	0x017d7840
 8008880:	46000000 	.word	0x46000000
 8008884:	4c742400 	.word	0x4c742400
 8008888:	4a742400 	.word	0x4a742400
 800888c:	4bbebc20 	.word	0x4bbebc20

08008890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008896:	f7ff fe81 	bl	800859c <HAL_RCC_GetSysClockFreq>
 800889a:	4602      	mov	r2, r0
 800889c:	4b10      	ldr	r3, [pc, #64]	@ (80088e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	0a1b      	lsrs	r3, r3, #8
 80088a2:	f003 030f 	and.w	r3, r3, #15
 80088a6:	490f      	ldr	r1, [pc, #60]	@ (80088e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80088a8:	5ccb      	ldrb	r3, [r1, r3]
 80088aa:	f003 031f 	and.w	r3, r3, #31
 80088ae:	fa22 f303 	lsr.w	r3, r2, r3
 80088b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088b4:	4b0a      	ldr	r3, [pc, #40]	@ (80088e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	4a09      	ldr	r2, [pc, #36]	@ (80088e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80088be:	5cd3      	ldrb	r3, [r2, r3]
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ca:	4a07      	ldr	r2, [pc, #28]	@ (80088e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80088cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088ce:	4a07      	ldr	r2, [pc, #28]	@ (80088ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80088d4:	4b04      	ldr	r3, [pc, #16]	@ (80088e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80088d6:	681b      	ldr	r3, [r3, #0]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	58024400 	.word	0x58024400
 80088e4:	0800f8bc 	.word	0x0800f8bc
 80088e8:	240000c8 	.word	0x240000c8
 80088ec:	240000c4 	.word	0x240000c4

080088f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80088f4:	f7ff ffcc 	bl	8008890 <HAL_RCC_GetHCLKFreq>
 80088f8:	4602      	mov	r2, r0
 80088fa:	4b06      	ldr	r3, [pc, #24]	@ (8008914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	091b      	lsrs	r3, r3, #4
 8008900:	f003 0307 	and.w	r3, r3, #7
 8008904:	4904      	ldr	r1, [pc, #16]	@ (8008918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008906:	5ccb      	ldrb	r3, [r1, r3]
 8008908:	f003 031f 	and.w	r3, r3, #31
 800890c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008910:	4618      	mov	r0, r3
 8008912:	bd80      	pop	{r7, pc}
 8008914:	58024400 	.word	0x58024400
 8008918:	0800f8bc 	.word	0x0800f8bc

0800891c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008920:	f7ff ffb6 	bl	8008890 <HAL_RCC_GetHCLKFreq>
 8008924:	4602      	mov	r2, r0
 8008926:	4b06      	ldr	r3, [pc, #24]	@ (8008940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	0a1b      	lsrs	r3, r3, #8
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	4904      	ldr	r1, [pc, #16]	@ (8008944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008932:	5ccb      	ldrb	r3, [r1, r3]
 8008934:	f003 031f 	and.w	r3, r3, #31
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	58024400 	.word	0x58024400
 8008944:	0800f8bc 	.word	0x0800f8bc

08008948 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800894c:	b0c6      	sub	sp, #280	@ 0x118
 800894e:	af00      	add	r7, sp, #0
 8008950:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800896c:	2500      	movs	r5, #0
 800896e:	ea54 0305 	orrs.w	r3, r4, r5
 8008972:	d049      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800897a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800897e:	d02f      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008980:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008984:	d828      	bhi.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008986:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800898a:	d01a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800898c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008990:	d822      	bhi.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800899a:	d007      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800899c:	e01c      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800899e:	4bab      	ldr	r3, [pc, #684]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	4aaa      	ldr	r2, [pc, #680]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089aa:	e01a      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b0:	3308      	adds	r3, #8
 80089b2:	2102      	movs	r1, #2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 fa49 	bl	800ae4c <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089c0:	e00f      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c6:	3328      	adds	r3, #40	@ 0x28
 80089c8:	2102      	movs	r1, #2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f002 faf0 	bl	800afb0 <RCCEx_PLL3_Config>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089d6:	e004      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089de:	e000      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80089e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089ea:	4b98      	ldr	r3, [pc, #608]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089f8:	4a94      	ldr	r2, [pc, #592]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089fa:	430b      	orrs	r3, r1
 80089fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80089fe:	e003      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008a14:	f04f 0900 	mov.w	r9, #0
 8008a18:	ea58 0309 	orrs.w	r3, r8, r9
 8008a1c:	d047      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d82a      	bhi.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a28:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a45 	.word	0x08008a45
 8008a34:	08008a53 	.word	0x08008a53
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008a87 	.word	0x08008a87
 8008a40:	08008a87 	.word	0x08008a87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a44:	4b81      	ldr	r3, [pc, #516]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a48:	4a80      	ldr	r2, [pc, #512]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a50:	e01a      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a56:	3308      	adds	r3, #8
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f002 f9f6 	bl	800ae4c <RCCEx_PLL2_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a66:	e00f      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6c:	3328      	adds	r3, #40	@ 0x28
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 fa9d 	bl	800afb0 <RCCEx_PLL3_Config>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a7c:	e004      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a84:	e000      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a90:	4b6e      	ldr	r3, [pc, #440]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a94:	f023 0107 	bic.w	r1, r3, #7
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008aa4:	e003      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008aba:	f04f 0b00 	mov.w	fp, #0
 8008abe:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ac2:	d05b      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008acc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008ad0:	d03b      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008ad2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008ad6:	d834      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008ad8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008adc:	d037      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008ade:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ae2:	d82e      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ae8:	d033      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008aea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008aee:	d828      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008af4:	d01a      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008af6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008afa:	d822      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008b00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b04:	d007      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008b06:	e01c      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b08:	4b50      	ldr	r3, [pc, #320]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b14:	e01e      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f002 f994 	bl	800ae4c <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b2a:	e013      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	3328      	adds	r3, #40	@ 0x28
 8008b32:	2100      	movs	r1, #0
 8008b34:	4618      	mov	r0, r3
 8008b36:	f002 fa3b 	bl	800afb0 <RCCEx_PLL3_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b40:	e008      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b48:	e004      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b4a:	bf00      	nop
 8008b4c:	e002      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b4e:	bf00      	nop
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10b      	bne.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b6c:	4a37      	ldr	r2, [pc, #220]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b72:	e003      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008b96:	460b      	mov	r3, r1
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	d05d      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ba4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ba8:	d03b      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008baa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008bae:	d834      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bb4:	d037      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008bb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bba:	d82e      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008bc0:	d033      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008bc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008bc6:	d828      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bcc:	d01a      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008bce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bd2:	d822      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bdc:	d007      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008bde:	e01c      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be4:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bec:	e01e      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f002 f928 	bl	800ae4c <RCCEx_PLL2_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c02:	e013      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c08:	3328      	adds	r3, #40	@ 0x28
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f002 f9cf 	bl	800afb0 <RCCEx_PLL3_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c18:	e008      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c20:	e004      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c22:	bf00      	nop
 8008c24:	e002      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c26:	bf00      	nop
 8008c28:	e000      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10d      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c34:	4b05      	ldr	r3, [pc, #20]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c44:	4a01      	ldr	r2, [pc, #4]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c46:	430b      	orrs	r3, r1
 8008c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c4a:	e005      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008c64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4313      	orrs	r3, r2
 8008c76:	d03a      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c7e:	2b30      	cmp	r3, #48	@ 0x30
 8008c80:	d01f      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008c82:	2b30      	cmp	r3, #48	@ 0x30
 8008c84:	d819      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d00c      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d815      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d019      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c92:	2b10      	cmp	r3, #16
 8008c94:	d111      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c96:	4baa      	ldr	r3, [pc, #680]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	4aa9      	ldr	r2, [pc, #676]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ca2:	e011      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca8:	3308      	adds	r3, #8
 8008caa:	2102      	movs	r1, #2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 f8cd 	bl	800ae4c <RCCEx_PLL2_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008cb8:	e006      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cc0:	e002      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e000      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cde:	4a98      	ldr	r2, [pc, #608]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ce4:	e003      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	d051      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d18:	d035      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d1e:	d82e      	bhi.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d24:	d031      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d2a:	d828      	bhi.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d30:	d01a      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d36:	d822      	bhi.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d40:	d007      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008d42:	e01c      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d44:	4b7e      	ldr	r3, [pc, #504]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	4a7d      	ldr	r2, [pc, #500]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d50:	e01c      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d56:	3308      	adds	r3, #8
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 f876 	bl	800ae4c <RCCEx_PLL2_Config>
 8008d60:	4603      	mov	r3, r0
 8008d62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d66:	e011      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6c:	3328      	adds	r3, #40	@ 0x28
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f002 f91d 	bl	800afb0 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d7c:	e006      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d84:	e002      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008d86:	bf00      	nop
 8008d88:	e000      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d94:	4b6a      	ldr	r3, [pc, #424]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008da2:	4a67      	ldr	r2, [pc, #412]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008da8:	e003      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008dc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	d053      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ddc:	d033      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008dde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008de2:	d82c      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008de4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008de8:	d02f      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008dea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008dee:	d826      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008df0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008df4:	d02b      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008df6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008dfa:	d820      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e00:	d012      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e06:	d81a      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d022      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e10:	d115      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e16:	3308      	adds	r3, #8
 8008e18:	2101      	movs	r1, #1
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f002 f816 	bl	800ae4c <RCCEx_PLL2_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e26:	e015      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2c:	3328      	adds	r3, #40	@ 0x28
 8008e2e:	2101      	movs	r1, #1
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 f8bd 	bl	800afb0 <RCCEx_PLL3_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e3c:	e00a      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e44:	e006      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e46:	bf00      	nop
 8008e48:	e004      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e4a:	bf00      	nop
 8008e4c:	e002      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10a      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e5c:	4b38      	ldr	r3, [pc, #224]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e6a:	4a35      	ldr	r2, [pc, #212]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e70:	e003      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e94:	460b      	mov	r3, r1
 8008e96:	4313      	orrs	r3, r2
 8008e98:	d058      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ea6:	d033      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eac:	d82c      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb2:	d02f      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eb8:	d826      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008eba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ebe:	d02b      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008ec0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ec4:	d820      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eca:	d012      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed0:	d81a      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d022      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eda:	d115      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f001 ffb1 	bl	800ae4c <RCCEx_PLL2_Config>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ef0:	e015      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef6:	3328      	adds	r3, #40	@ 0x28
 8008ef8:	2101      	movs	r1, #1
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 f858 	bl	800afb0 <RCCEx_PLL3_Config>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008f06:	e00a      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f0e:	e006      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f10:	bf00      	nop
 8008f12:	e004      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f14:	bf00      	nop
 8008f16:	e002      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f18:	bf00      	nop
 8008f1a:	e000      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10e      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f26:	4b06      	ldr	r3, [pc, #24]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008f36:	4a02      	ldr	r2, [pc, #8]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f3c:	e006      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	d037      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f76:	d00e      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7c:	d816      	bhi.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d018      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f86:	d111      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f88:	4bc4      	ldr	r3, [pc, #784]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	4ac3      	ldr	r2, [pc, #780]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f94:	e00f      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 ff54 	bl	800ae4c <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008faa:	e004      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fb2:	e000      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fbe:	4bb7      	ldr	r3, [pc, #732]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fc2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fcc:	4ab3      	ldr	r2, [pc, #716]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fce:	430b      	orrs	r3, r1
 8008fd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ff2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d039      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009002:	2b03      	cmp	r3, #3
 8009004:	d81c      	bhi.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009006:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009049 	.word	0x08009049
 8009010:	0800901d 	.word	0x0800901d
 8009014:	0800902b 	.word	0x0800902b
 8009018:	08009049 	.word	0x08009049
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800901c:	4b9f      	ldr	r3, [pc, #636]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800901e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009020:	4a9e      	ldr	r2, [pc, #632]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009028:	e00f      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800902a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902e:	3308      	adds	r3, #8
 8009030:	2102      	movs	r1, #2
 8009032:	4618      	mov	r0, r3
 8009034:	f001 ff0a 	bl	800ae4c <RCCEx_PLL2_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800903e:	e004      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009046:	e000      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009052:	4b92      	ldr	r3, [pc, #584]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009056:	f023 0103 	bic.w	r1, r3, #3
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009060:	4a8e      	ldr	r2, [pc, #568]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009062:	430b      	orrs	r3, r1
 8009064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009066:	e003      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800906c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800907c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009080:	2300      	movs	r3, #0
 8009082:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009086:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800908a:	460b      	mov	r3, r1
 800908c:	4313      	orrs	r3, r2
 800908e:	f000 8099 	beq.w	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009092:	4b83      	ldr	r3, [pc, #524]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a82      	ldr	r2, [pc, #520]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800909c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800909e:	f7fa fd81 	bl	8003ba4 <HAL_GetTick>
 80090a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090a6:	e00b      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a8:	f7fa fd7c 	bl	8003ba4 <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b64      	cmp	r3, #100	@ 0x64
 80090b6:	d903      	bls.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090be:	e005      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090c0:	4b77      	ldr	r3, [pc, #476]	@ (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0ed      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80090cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d173      	bne.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80090d4:	4b71      	ldr	r3, [pc, #452]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090e0:	4053      	eors	r3, r2
 80090e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d015      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090ea:	4b6c      	ldr	r3, [pc, #432]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090f6:	4b69      	ldr	r3, [pc, #420]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090fa:	4a68      	ldr	r2, [pc, #416]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009100:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009102:	4b66      	ldr	r3, [pc, #408]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009106:	4a65      	ldr	r2, [pc, #404]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800910c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800910e:	4a63      	ldr	r2, [pc, #396]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009114:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800911e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009122:	d118      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009124:	f7fa fd3e 	bl	8003ba4 <HAL_GetTick>
 8009128:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800912c:	e00d      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800912e:	f7fa fd39 	bl	8003ba4 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009138:	1ad2      	subs	r2, r2, r3
 800913a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800913e:	429a      	cmp	r2, r3
 8009140:	d903      	bls.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009148:	e005      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800914a:	4b54      	ldr	r3, [pc, #336]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800914c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0eb      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800915a:	2b00      	cmp	r3, #0
 800915c:	d129      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800915e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800916a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800916e:	d10e      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009170:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009180:	091a      	lsrs	r2, r3, #4
 8009182:	4b48      	ldr	r3, [pc, #288]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009184:	4013      	ands	r3, r2
 8009186:	4a45      	ldr	r2, [pc, #276]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009188:	430b      	orrs	r3, r1
 800918a:	6113      	str	r3, [r2, #16]
 800918c:	e005      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800918e:	4b43      	ldr	r3, [pc, #268]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	4a42      	ldr	r2, [pc, #264]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009194:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009198:	6113      	str	r3, [r2, #16]
 800919a:	4b40      	ldr	r3, [pc, #256]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800919c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80091a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091aa:	4a3c      	ldr	r2, [pc, #240]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091ac:	430b      	orrs	r3, r1
 80091ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80091b0:	e008      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80091ba:	e003      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f002 0301 	and.w	r3, r2, #1
 80091d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091d4:	2300      	movs	r3, #0
 80091d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80091da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f000 808f 	beq.w	8009304 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091ec:	2b28      	cmp	r3, #40	@ 0x28
 80091ee:	d871      	bhi.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80091f0:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	080092dd 	.word	0x080092dd
 80091fc:	080092d5 	.word	0x080092d5
 8009200:	080092d5 	.word	0x080092d5
 8009204:	080092d5 	.word	0x080092d5
 8009208:	080092d5 	.word	0x080092d5
 800920c:	080092d5 	.word	0x080092d5
 8009210:	080092d5 	.word	0x080092d5
 8009214:	080092d5 	.word	0x080092d5
 8009218:	080092a9 	.word	0x080092a9
 800921c:	080092d5 	.word	0x080092d5
 8009220:	080092d5 	.word	0x080092d5
 8009224:	080092d5 	.word	0x080092d5
 8009228:	080092d5 	.word	0x080092d5
 800922c:	080092d5 	.word	0x080092d5
 8009230:	080092d5 	.word	0x080092d5
 8009234:	080092d5 	.word	0x080092d5
 8009238:	080092bf 	.word	0x080092bf
 800923c:	080092d5 	.word	0x080092d5
 8009240:	080092d5 	.word	0x080092d5
 8009244:	080092d5 	.word	0x080092d5
 8009248:	080092d5 	.word	0x080092d5
 800924c:	080092d5 	.word	0x080092d5
 8009250:	080092d5 	.word	0x080092d5
 8009254:	080092d5 	.word	0x080092d5
 8009258:	080092dd 	.word	0x080092dd
 800925c:	080092d5 	.word	0x080092d5
 8009260:	080092d5 	.word	0x080092d5
 8009264:	080092d5 	.word	0x080092d5
 8009268:	080092d5 	.word	0x080092d5
 800926c:	080092d5 	.word	0x080092d5
 8009270:	080092d5 	.word	0x080092d5
 8009274:	080092d5 	.word	0x080092d5
 8009278:	080092dd 	.word	0x080092dd
 800927c:	080092d5 	.word	0x080092d5
 8009280:	080092d5 	.word	0x080092d5
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092d5 	.word	0x080092d5
 800928c:	080092d5 	.word	0x080092d5
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092dd 	.word	0x080092dd
 800929c:	58024400 	.word	0x58024400
 80092a0:	58024800 	.word	0x58024800
 80092a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ac:	3308      	adds	r3, #8
 80092ae:	2101      	movs	r1, #1
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 fdcb 	bl	800ae4c <RCCEx_PLL2_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80092bc:	e00f      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c2:	3328      	adds	r3, #40	@ 0x28
 80092c4:	2101      	movs	r1, #1
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fe72 	bl	800afb0 <RCCEx_PLL3_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80092d2:	e004      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092da:	e000      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80092dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80092e6:	4bbf      	ldr	r3, [pc, #764]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80092ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092f4:	4abb      	ldr	r2, [pc, #748]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092f6:	430b      	orrs	r3, r1
 80092f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80092fa:	e003      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f002 0302 	and.w	r3, r2, #2
 8009310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009314:	2300      	movs	r3, #0
 8009316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800931a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800931e:	460b      	mov	r3, r1
 8009320:	4313      	orrs	r3, r2
 8009322:	d041      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932a:	2b05      	cmp	r3, #5
 800932c:	d824      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800932e:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009381 	.word	0x08009381
 8009338:	0800934d 	.word	0x0800934d
 800933c:	08009363 	.word	0x08009363
 8009340:	08009381 	.word	0x08009381
 8009344:	08009381 	.word	0x08009381
 8009348:	08009381 	.word	0x08009381
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800934c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009350:	3308      	adds	r3, #8
 8009352:	2101      	movs	r1, #1
 8009354:	4618      	mov	r0, r3
 8009356:	f001 fd79 	bl	800ae4c <RCCEx_PLL2_Config>
 800935a:	4603      	mov	r3, r0
 800935c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009360:	e00f      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009366:	3328      	adds	r3, #40	@ 0x28
 8009368:	2101      	movs	r1, #1
 800936a:	4618      	mov	r0, r3
 800936c:	f001 fe20 	bl	800afb0 <RCCEx_PLL3_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009376:	e004      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800937e:	e000      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800938a:	4b96      	ldr	r3, [pc, #600]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800938c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938e:	f023 0107 	bic.w	r1, r3, #7
 8009392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009398:	4a92      	ldr	r2, [pc, #584]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800939a:	430b      	orrs	r3, r1
 800939c:	6553      	str	r3, [r2, #84]	@ 0x54
 800939e:	e003      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f002 0304 	and.w	r3, r2, #4
 80093b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093b8:	2300      	movs	r3, #0
 80093ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80093c2:	460b      	mov	r3, r1
 80093c4:	4313      	orrs	r3, r2
 80093c6:	d044      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80093c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d825      	bhi.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80093d4:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	08009429 	.word	0x08009429
 80093e0:	080093f5 	.word	0x080093f5
 80093e4:	0800940b 	.word	0x0800940b
 80093e8:	08009429 	.word	0x08009429
 80093ec:	08009429 	.word	0x08009429
 80093f0:	08009429 	.word	0x08009429
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f8:	3308      	adds	r3, #8
 80093fa:	2101      	movs	r1, #1
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 fd25 	bl	800ae4c <RCCEx_PLL2_Config>
 8009402:	4603      	mov	r3, r0
 8009404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009408:	e00f      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940e:	3328      	adds	r3, #40	@ 0x28
 8009410:	2101      	movs	r1, #1
 8009412:	4618      	mov	r0, r3
 8009414:	f001 fdcc 	bl	800afb0 <RCCEx_PLL3_Config>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800941e:	e004      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009426:	e000      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800942a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009432:	4b6c      	ldr	r3, [pc, #432]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009436:	f023 0107 	bic.w	r1, r3, #7
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009442:	4a68      	ldr	r2, [pc, #416]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009444:	430b      	orrs	r3, r1
 8009446:	6593      	str	r3, [r2, #88]	@ 0x58
 8009448:	e003      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800944e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f002 0320 	and.w	r3, r2, #32
 800945e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009462:	2300      	movs	r3, #0
 8009464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009468:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800946c:	460b      	mov	r3, r1
 800946e:	4313      	orrs	r3, r2
 8009470:	d055      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800947a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800947e:	d033      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009484:	d82c      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800948a:	d02f      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800948c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009490:	d826      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009492:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009496:	d02b      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009498:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800949c:	d820      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800949e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a2:	d012      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a8:	d81a      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d022      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80094ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094b2:	d115      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b8:	3308      	adds	r3, #8
 80094ba:	2100      	movs	r1, #0
 80094bc:	4618      	mov	r0, r3
 80094be:	f001 fcc5 	bl	800ae4c <RCCEx_PLL2_Config>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80094c8:	e015      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ce:	3328      	adds	r3, #40	@ 0x28
 80094d0:	2102      	movs	r1, #2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fd6c 	bl	800afb0 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80094de:	e00a      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094e6:	e006      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094e8:	bf00      	nop
 80094ea:	e004      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10b      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094fe:	4b39      	ldr	r3, [pc, #228]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009502:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800950a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800950e:	4a35      	ldr	r2, [pc, #212]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009510:	430b      	orrs	r3, r1
 8009512:	6553      	str	r3, [r2, #84]	@ 0x54
 8009514:	e003      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800951a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800952a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800952e:	2300      	movs	r3, #0
 8009530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009534:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009538:	460b      	mov	r3, r1
 800953a:	4313      	orrs	r3, r2
 800953c:	d058      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009546:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800954a:	d033      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800954c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009550:	d82c      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009556:	d02f      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800955c:	d826      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800955e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009562:	d02b      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009568:	d820      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800956a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800956e:	d012      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009574:	d81a      	bhi.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d022      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800957a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800957e:	d115      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009584:	3308      	adds	r3, #8
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fc5f 	bl	800ae4c <RCCEx_PLL2_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009594:	e015      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959a:	3328      	adds	r3, #40	@ 0x28
 800959c:	2102      	movs	r1, #2
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 fd06 	bl	800afb0 <RCCEx_PLL3_Config>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80095aa:	e00a      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095b2:	e006      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095b4:	bf00      	nop
 80095b6:	e004      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095b8:	bf00      	nop
 80095ba:	e002      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095bc:	bf00      	nop
 80095be:	e000      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10e      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095ca:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80095da:	4a02      	ldr	r2, [pc, #8]	@ (80095e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095dc:	430b      	orrs	r3, r1
 80095de:	6593      	str	r3, [r2, #88]	@ 0x58
 80095e0:	e006      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80095e2:	bf00      	nop
 80095e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80095fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009600:	2300      	movs	r3, #0
 8009602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009606:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	d055      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009614:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009618:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800961c:	d033      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800961e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009622:	d82c      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009628:	d02f      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800962a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800962e:	d826      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009630:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009634:	d02b      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009636:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800963a:	d820      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800963c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009640:	d012      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009646:	d81a      	bhi.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009648:	2b00      	cmp	r3, #0
 800964a:	d022      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800964c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009650:	d115      	bne.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009656:	3308      	adds	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f001 fbf6 	bl	800ae4c <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009666:	e015      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966c:	3328      	adds	r3, #40	@ 0x28
 800966e:	2102      	movs	r1, #2
 8009670:	4618      	mov	r0, r3
 8009672:	f001 fc9d 	bl	800afb0 <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800967c:	e00a      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009684:	e006      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009686:	bf00      	nop
 8009688:	e004      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800968a:	bf00      	nop
 800968c:	e002      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800968e:	bf00      	nop
 8009690:	e000      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009694:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10b      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800969c:	4ba0      	ldr	r3, [pc, #640]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800969e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80096a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096ac:	4a9c      	ldr	r2, [pc, #624]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ae:	430b      	orrs	r3, r1
 80096b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80096b2:	e003      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f002 0308 	and.w	r3, r2, #8
 80096c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096cc:	2300      	movs	r3, #0
 80096ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80096d6:	460b      	mov	r3, r1
 80096d8:	4313      	orrs	r3, r2
 80096da:	d01e      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80096dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e8:	d10c      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ee:	3328      	adds	r3, #40	@ 0x28
 80096f0:	2102      	movs	r1, #2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 fc5c 	bl	800afb0 <RCCEx_PLL3_Config>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009704:	4b86      	ldr	r3, [pc, #536]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009708:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009714:	4a82      	ldr	r2, [pc, #520]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009716:	430b      	orrs	r3, r1
 8009718:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800971a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f002 0310 	and.w	r3, r2, #16
 8009726:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800972a:	2300      	movs	r3, #0
 800972c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009730:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009734:	460b      	mov	r3, r1
 8009736:	4313      	orrs	r3, r2
 8009738:	d01e      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009746:	d10c      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974c:	3328      	adds	r3, #40	@ 0x28
 800974e:	2102      	movs	r1, #2
 8009750:	4618      	mov	r0, r3
 8009752:	f001 fc2d 	bl	800afb0 <RCCEx_PLL3_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009762:	4b6f      	ldr	r3, [pc, #444]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009766:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009772:	4a6b      	ldr	r2, [pc, #428]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009774:	430b      	orrs	r3, r1
 8009776:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009786:	2300      	movs	r3, #0
 8009788:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800978a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800978e:	460b      	mov	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	d03e      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800979c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097a0:	d022      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80097a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097a6:	d81b      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b0:	d00b      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80097b2:	e015      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b8:	3308      	adds	r3, #8
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 fb45 	bl	800ae4c <RCCEx_PLL2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80097c8:	e00f      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ce:	3328      	adds	r3, #40	@ 0x28
 80097d0:	2102      	movs	r1, #2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f001 fbec 	bl	800afb0 <RCCEx_PLL3_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80097de:	e004      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097e6:	e000      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80097e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80097fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009802:	4a47      	ldr	r2, [pc, #284]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009804:	430b      	orrs	r3, r1
 8009806:	6593      	str	r3, [r2, #88]	@ 0x58
 8009808:	e003      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800980e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800981e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009820:	2300      	movs	r3, #0
 8009822:	677b      	str	r3, [r7, #116]	@ 0x74
 8009824:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009828:	460b      	mov	r3, r1
 800982a:	4313      	orrs	r3, r2
 800982c:	d03b      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800982e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800983a:	d01f      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800983c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009840:	d818      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009846:	d003      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800984c:	d007      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800984e:	e011      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009850:	4b33      	ldr	r3, [pc, #204]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	4a32      	ldr	r2, [pc, #200]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800985a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800985c:	e00f      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800985e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009862:	3328      	adds	r3, #40	@ 0x28
 8009864:	2101      	movs	r1, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f001 fba2 	bl	800afb0 <RCCEx_PLL3_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009872:	e004      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800987a:	e000      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800987c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800987e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009886:	4b26      	ldr	r3, [pc, #152]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009896:	4a22      	ldr	r2, [pc, #136]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009898:	430b      	orrs	r3, r1
 800989a:	6553      	str	r3, [r2, #84]	@ 0x54
 800989c:	e003      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80098b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098b4:	2300      	movs	r3, #0
 80098b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80098bc:	460b      	mov	r3, r1
 80098be:	4313      	orrs	r3, r2
 80098c0:	d034      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80098c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80098cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098d0:	d007      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80098d2:	e011      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d4:	4b12      	ldr	r3, [pc, #72]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	4a11      	ldr	r2, [pc, #68]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80098e0:	e00e      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	3308      	adds	r3, #8
 80098e8:	2102      	movs	r1, #2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 faae 	bl	800ae4c <RCCEx_PLL2_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80098f6:	e003      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10d      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009908:	4b05      	ldr	r3, [pc, #20]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800990a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800990c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009916:	4a02      	ldr	r2, [pc, #8]	@ (8009920 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009918:	430b      	orrs	r3, r1
 800991a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800991c:	e006      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800991e:	bf00      	nop
 8009920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009938:	663b      	str	r3, [r7, #96]	@ 0x60
 800993a:	2300      	movs	r3, #0
 800993c:	667b      	str	r3, [r7, #100]	@ 0x64
 800993e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009942:	460b      	mov	r3, r1
 8009944:	4313      	orrs	r3, r2
 8009946:	d00c      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994c:	3328      	adds	r3, #40	@ 0x28
 800994e:	2102      	movs	r1, #2
 8009950:	4618      	mov	r0, r3
 8009952:	f001 fb2d 	bl	800afb0 <RCCEx_PLL3_Config>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800996e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009970:	2300      	movs	r3, #0
 8009972:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009974:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009978:	460b      	mov	r3, r1
 800997a:	4313      	orrs	r3, r2
 800997c:	d036      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800997e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009988:	d018      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800998a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800998e:	d811      	bhi.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009994:	d014      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800999a:	d80b      	bhi.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d011      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80099a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099a4:	d106      	bne.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a6:	4bb7      	ldr	r3, [pc, #732]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099aa:	4ab6      	ldr	r2, [pc, #728]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80099b2:	e008      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099ba:	e004      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099bc:	bf00      	nop
 80099be:	e002      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099c0:	bf00      	nop
 80099c2:	e000      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099ce:	4bad      	ldr	r3, [pc, #692]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099dc:	4aa9      	ldr	r2, [pc, #676]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80099f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80099fa:	2300      	movs	r3, #0
 80099fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80099fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009a02:	460b      	mov	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	d009      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a08:	4b9e      	ldr	r3, [pc, #632]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a16:	4a9b      	ldr	r2, [pc, #620]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009a28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009a32:	460b      	mov	r3, r1
 8009a34:	4313      	orrs	r3, r2
 8009a36:	d009      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a38:	4b92      	ldr	r3, [pc, #584]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a46:	4a8f      	ldr	r2, [pc, #572]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009a62:	460b      	mov	r3, r1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d00e      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a68:	4b86      	ldr	r3, [pc, #536]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	4a85      	ldr	r2, [pc, #532]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a72:	6113      	str	r3, [r2, #16]
 8009a74:	4b83      	ldr	r3, [pc, #524]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a76:	6919      	ldr	r1, [r3, #16]
 8009a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a80:	4a80      	ldr	r2, [pc, #512]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a82:	430b      	orrs	r3, r1
 8009a84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a94:	2300      	movs	r3, #0
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	d009      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009aa2:	4b78      	ldr	r3, [pc, #480]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aa6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab0:	4a74      	ldr	r2, [pc, #464]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009acc:	460b      	mov	r3, r1
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	d00a      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae2:	4a68      	ldr	r2, [pc, #416]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	2100      	movs	r1, #0
 8009af2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009afa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009afe:	460b      	mov	r3, r1
 8009b00:	4313      	orrs	r3, r2
 8009b02:	d011      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b08:	3308      	adds	r3, #8
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 f99d 	bl	800ae4c <RCCEx_PLL2_Config>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	2100      	movs	r1, #0
 8009b32:	6239      	str	r1, [r7, #32]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d011      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b48:	3308      	adds	r3, #8
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 f97d 	bl	800ae4c <RCCEx_PLL2_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	2100      	movs	r1, #0
 8009b72:	61b9      	str	r1, [r7, #24]
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	61fb      	str	r3, [r7, #28]
 8009b7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4313      	orrs	r3, r2
 8009b82:	d011      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b88:	3308      	adds	r3, #8
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 f95d 	bl	800ae4c <RCCEx_PLL2_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6139      	str	r1, [r7, #16]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d011      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc8:	3328      	adds	r3, #40	@ 0x28
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f9ef 	bl	800afb0 <RCCEx_PLL3_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4313      	orrs	r3, r2
 8009c02:	d011      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c08:	3328      	adds	r3, #40	@ 0x28
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f001 f9cf 	bl	800afb0 <RCCEx_PLL3_Config>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	2100      	movs	r1, #0
 8009c32:	6039      	str	r1, [r7, #0]
 8009c34:	f003 0320 	and.w	r3, r3, #32
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4313      	orrs	r3, r2
 8009c42:	d011      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c48:	3328      	adds	r3, #40	@ 0x28
 8009c4a:	2102      	movs	r1, #2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 f9af 	bl	800afb0 <RCCEx_PLL3_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009c68:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	e000      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c82:	bf00      	nop
 8009c84:	58024400 	.word	0x58024400

08009c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b090      	sub	sp, #64	@ 0x40
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c96:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	f040 8094 	bne.w	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ca4:	f003 0307 	and.w	r3, r3, #7
 8009ca8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	f200 8087 	bhi.w	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009ccd 	.word	0x08009ccd
 8009cbc:	08009cf5 	.word	0x08009cf5
 8009cc0:	08009d1d 	.word	0x08009d1d
 8009cc4:	08009db9 	.word	0x08009db9
 8009cc8:	08009d45 	.word	0x08009d45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ccc:	4b90      	ldr	r3, [pc, #576]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cd8:	d108      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 ff62 	bl	800aba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce8:	f000 bc93 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf0:	f000 bc8f 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cf4:	4b86      	ldr	r3, [pc, #536]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d00:	d108      	bne.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fca6 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d10:	f000 bc7f 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d18:	f000 bc7b 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d28:	d108      	bne.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d2a:	f107 030c 	add.w	r3, r7, #12
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fde6 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d38:	f000 bc6b 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d40:	f000 bc67 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d44:	4b72      	ldr	r3, [pc, #456]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d4e:	4b70      	ldr	r3, [pc, #448]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0304 	and.w	r3, r3, #4
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d10c      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d109      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d60:	4b6b      	ldr	r3, [pc, #428]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	08db      	lsrs	r3, r3, #3
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	4a6a      	ldr	r2, [pc, #424]	@ (8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d72:	e01f      	b.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d74:	4b66      	ldr	r3, [pc, #408]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d80:	d106      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d88:	d102      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d8a:	4b63      	ldr	r3, [pc, #396]	@ (8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d8e:	e011      	b.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d90:	4b5f      	ldr	r3, [pc, #380]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d9c:	d106      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009da4:	d102      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009da6:	4b5d      	ldr	r3, [pc, #372]	@ (8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009daa:	e003      	b.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009db0:	f000 bc2f 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009db4:	f000 bc2d 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009db8:	4b59      	ldr	r3, [pc, #356]	@ (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dbc:	f000 bc29 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc4:	f000 bc25 	b.w	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dcc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	f040 80a7 	bne.w	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dda:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009dde:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009de6:	d054      	beq.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009dee:	f200 808b 	bhi.w	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009df8:	f000 8083 	beq.w	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e02:	f200 8081 	bhi.w	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e0c:	d02f      	beq.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e14:	d878      	bhi.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e22:	d012      	beq.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009e24:	e070      	b.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e26:	4b3a      	ldr	r3, [pc, #232]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e32:	d107      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 feb5 	bl	800aba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e42:	e3e6      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e48:	e3e3      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e4a:	4b31      	ldr	r3, [pc, #196]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e56:	d107      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e58:	f107 0318 	add.w	r3, r7, #24
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fbfb 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e66:	e3d4      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e6c:	e3d1      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e6e:	4b28      	ldr	r3, [pc, #160]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e7a:	d107      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e7c:	f107 030c 	add.w	r3, r7, #12
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fd3d 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e8a:	e3c2      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e90:	e3bf      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e92:	4b1f      	ldr	r3, [pc, #124]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d10c      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009eae:	4b18      	ldr	r3, [pc, #96]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	08db      	lsrs	r3, r3, #3
 8009eb4:	f003 0303 	and.w	r3, r3, #3
 8009eb8:	4a16      	ldr	r2, [pc, #88]	@ (8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009eba:	fa22 f303 	lsr.w	r3, r2, r3
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ec0:	e01e      	b.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ec2:	4b13      	ldr	r3, [pc, #76]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ece:	d106      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ed6:	d102      	bne.n	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009edc:	e010      	b.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ede:	4b0c      	ldr	r3, [pc, #48]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eea:	d106      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef2:	d102      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ef4:	4b09      	ldr	r3, [pc, #36]	@ (8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ef8:	e002      	b.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009efe:	e388      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f00:	e387      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f02:	4b07      	ldr	r3, [pc, #28]	@ (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f06:	e384      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0c:	e381      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f0e:	bf00      	nop
 8009f10:	58024400 	.word	0x58024400
 8009f14:	03d09000 	.word	0x03d09000
 8009f18:	003d0900 	.word	0x003d0900
 8009f1c:	017d7840 	.word	0x017d7840
 8009f20:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f28:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009f2c:	430b      	orrs	r3, r1
 8009f2e:	f040 809c 	bne.w	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009f32:	4b9e      	ldr	r3, [pc, #632]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f36:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009f3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f42:	d054      	beq.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f4a:	f200 808b 	bhi.w	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f54:	f000 8083 	beq.w	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f5e:	f200 8081 	bhi.w	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f68:	d02f      	beq.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f70:	d878      	bhi.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d004      	beq.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f7e:	d012      	beq.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009f80:	e070      	b.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f82:	4b8a      	ldr	r3, [pc, #552]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f8e:	d107      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fe07 	bl	800aba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f9e:	e338      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa4:	e335      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fa6:	4b81      	ldr	r3, [pc, #516]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fb2:	d107      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb4:	f107 0318 	add.w	r3, r7, #24
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 fb4d 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc2:	e326      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc8:	e323      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fca:	4b78      	ldr	r3, [pc, #480]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd6:	d107      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd8:	f107 030c 	add.w	r3, r7, #12
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 fc8f 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe6:	e314      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fec:	e311      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fee:	4b6f      	ldr	r3, [pc, #444]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ff8:	4b6c      	ldr	r3, [pc, #432]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b04      	cmp	r3, #4
 800a002:	d10c      	bne.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a006:	2b00      	cmp	r3, #0
 800a008:	d109      	bne.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a00a:	4b68      	ldr	r3, [pc, #416]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	08db      	lsrs	r3, r3, #3
 800a010:	f003 0303 	and.w	r3, r3, #3
 800a014:	4a66      	ldr	r2, [pc, #408]	@ (800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a016:	fa22 f303 	lsr.w	r3, r2, r3
 800a01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a01c:	e01e      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a01e:	4b63      	ldr	r3, [pc, #396]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a02a:	d106      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a02e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a032:	d102      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a034:	4b5f      	ldr	r3, [pc, #380]	@ (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a038:	e010      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a03a:	4b5c      	ldr	r3, [pc, #368]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a046:	d106      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a04e:	d102      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a050:	4b59      	ldr	r3, [pc, #356]	@ (800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a054:	e002      	b.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a05a:	e2da      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a05c:	e2d9      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a05e:	4b57      	ldr	r3, [pc, #348]	@ (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a062:	e2d6      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a068:	e2d3      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a06e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a072:	430b      	orrs	r3, r1
 800a074:	f040 80a7 	bne.w	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a078:	4b4c      	ldr	r3, [pc, #304]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a07a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a07c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a080:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a088:	d055      	beq.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a090:	f200 8096 	bhi.w	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a09a:	f000 8084 	beq.w	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0a4:	f200 808c 	bhi.w	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0ae:	d030      	beq.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0b6:	f200 8083 	bhi.w	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0c6:	d012      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a0c8:	e07a      	b.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0ca:	4b38      	ldr	r3, [pc, #224]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0d6:	d107      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 fd63 	bl	800aba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e6:	e294      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ec:	e291      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0fa:	d107      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0fc:	f107 0318 	add.w	r3, r7, #24
 800a100:	4618      	mov	r0, r3
 800a102:	f000 faa9 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a10a:	e282      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a110:	e27f      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a112:	4b26      	ldr	r3, [pc, #152]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a11a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a11e:	d107      	bne.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a120:	f107 030c 	add.w	r3, r7, #12
 800a124:	4618      	mov	r0, r3
 800a126:	f000 fbeb 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a12e:	e270      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a134:	e26d      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a136:	4b1d      	ldr	r3, [pc, #116]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a13a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a13e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a140:	4b1a      	ldr	r3, [pc, #104]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d10c      	bne.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d109      	bne.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a152:	4b16      	ldr	r3, [pc, #88]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	08db      	lsrs	r3, r3, #3
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	4a14      	ldr	r2, [pc, #80]	@ (800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a15e:	fa22 f303 	lsr.w	r3, r2, r3
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a164:	e01e      	b.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a166:	4b11      	ldr	r3, [pc, #68]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a172:	d106      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a17a:	d102      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a17c:	4b0d      	ldr	r3, [pc, #52]	@ (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a180:	e010      	b.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a18a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a18e:	d106      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a196:	d102      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a198:	4b07      	ldr	r3, [pc, #28]	@ (800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a19c:	e002      	b.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1a2:	e236      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1a4:	e235      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1a6:	4b05      	ldr	r3, [pc, #20]	@ (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1aa:	e232      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1ac:	58024400 	.word	0x58024400
 800a1b0:	03d09000 	.word	0x03d09000
 800a1b4:	003d0900 	.word	0x003d0900
 800a1b8:	017d7840 	.word	0x017d7840
 800a1bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c4:	e225      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	f040 8085 	bne.w	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a1d4:	4b9c      	ldr	r3, [pc, #624]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1e4:	d06b      	beq.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1ec:	d874      	bhi.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1f4:	d056      	beq.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1fc:	d86c      	bhi.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a204:	d03b      	beq.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a20c:	d864      	bhi.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a214:	d021      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a21c:	d85c      	bhi.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a220:	2b00      	cmp	r3, #0
 800a222:	d004      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a22a:	d004      	beq.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a22c:	e054      	b.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a22e:	f7fe fb5f 	bl	80088f0 <HAL_RCC_GetPCLK1Freq>
 800a232:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a234:	e1ed      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a236:	4b84      	ldr	r3, [pc, #528]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a23e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a242:	d107      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a244:	f107 0318 	add.w	r3, r7, #24
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fa05 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a252:	e1de      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a258:	e1db      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a25a:	4b7b      	ldr	r3, [pc, #492]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a266:	d107      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a268:	f107 030c 	add.w	r3, r7, #12
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fb47 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a276:	e1cc      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27c:	e1c9      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a27e:	4b72      	ldr	r3, [pc, #456]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0304 	and.w	r3, r3, #4
 800a286:	2b04      	cmp	r3, #4
 800a288:	d109      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a28a:	4b6f      	ldr	r3, [pc, #444]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	08db      	lsrs	r3, r3, #3
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	4a6d      	ldr	r2, [pc, #436]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a296:	fa22 f303 	lsr.w	r3, r2, r3
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29c:	e1b9      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a2:	e1b6      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a2a4:	4b68      	ldr	r3, [pc, #416]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2b0:	d102      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a2b2:	4b67      	ldr	r3, [pc, #412]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2b6:	e1ac      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2bc:	e1a9      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a2be:	4b62      	ldr	r3, [pc, #392]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2ca:	d102      	bne.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a2cc:	4b61      	ldr	r3, [pc, #388]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d0:	e19f      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d6:	e19c      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2dc:	e199      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a2de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	d173      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a2ea:	4b57      	ldr	r3, [pc, #348]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a2f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2fa:	d02f      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a302:	d863      	bhi.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a310:	d012      	beq.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a312:	e05b      	b.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a314:	4b4c      	ldr	r3, [pc, #304]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a31c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a320:	d107      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a322:	f107 0318 	add.w	r3, r7, #24
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f996 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a330:	e16f      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a336:	e16c      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a338:	4b43      	ldr	r3, [pc, #268]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a344:	d107      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a346:	f107 030c 	add.w	r3, r7, #12
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fad8 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a354:	e15d      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a35a:	e15a      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a35c:	4b3a      	ldr	r3, [pc, #232]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a35e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a360:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a364:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a366:	4b38      	ldr	r3, [pc, #224]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0304 	and.w	r3, r3, #4
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d10c      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a374:	2b00      	cmp	r3, #0
 800a376:	d109      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a378:	4b33      	ldr	r3, [pc, #204]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	08db      	lsrs	r3, r3, #3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	4a32      	ldr	r2, [pc, #200]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a38a:	e01e      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a38c:	4b2e      	ldr	r3, [pc, #184]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a398:	d106      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a0:	d102      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a6:	e010      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3a8:	4b27      	ldr	r3, [pc, #156]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3b4:	d106      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3bc:	d102      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3be:	4b25      	ldr	r3, [pc, #148]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3c2:	e002      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3c8:	e123      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3ca:	e122      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d0:	e11f      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	d13c      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a3de:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3f4:	d012      	beq.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a3f6:	e023      	b.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3f8:	4b13      	ldr	r3, [pc, #76]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a404:	d107      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fbcc 	bl	800aba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a414:	e0fd      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a41a:	e0fa      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a41c:	4b0a      	ldr	r3, [pc, #40]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a428:	d107      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a42a:	f107 0318 	add.w	r3, r7, #24
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f912 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a438:	e0eb      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a43e:	e0e8      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a444:	e0e5      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a446:	bf00      	nop
 800a448:	58024400 	.word	0x58024400
 800a44c:	03d09000 	.word	0x03d09000
 800a450:	003d0900 	.word	0x003d0900
 800a454:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a460:	430b      	orrs	r3, r1
 800a462:	f040 8085 	bne.w	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a466:	4b6d      	ldr	r3, [pc, #436]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a46a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a46e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a476:	d06b      	beq.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a47e:	d874      	bhi.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a486:	d056      	beq.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a48e:	d86c      	bhi.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a492:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a496:	d03b      	beq.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a49e:	d864      	bhi.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a6:	d021      	beq.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ae:	d85c      	bhi.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d004      	beq.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4bc:	d004      	beq.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a4be:	e054      	b.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a4c0:	f000 f8b4 	bl	800a62c <HAL_RCCEx_GetD3PCLK1Freq>
 800a4c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4c6:	e0a4      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4c8:	4b54      	ldr	r3, [pc, #336]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4d4:	d107      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d6:	f107 0318 	add.w	r3, r7, #24
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f8bc 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e4:	e095      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ea:	e092      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4ec:	4b4b      	ldr	r3, [pc, #300]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f8:	d107      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4fa:	f107 030c 	add.w	r3, r7, #12
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f9fe 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a508:	e083      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50e:	e080      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a510:	4b42      	ldr	r3, [pc, #264]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d109      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a51c:	4b3f      	ldr	r3, [pc, #252]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	08db      	lsrs	r3, r3, #3
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	4a3e      	ldr	r2, [pc, #248]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
 800a52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52e:	e070      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a534:	e06d      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a536:	4b39      	ldr	r3, [pc, #228]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a53e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a542:	d102      	bne.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a544:	4b37      	ldr	r3, [pc, #220]	@ (800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a548:	e063      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54e:	e060      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a550:	4b32      	ldr	r3, [pc, #200]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a55c:	d102      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a55e:	4b32      	ldr	r3, [pc, #200]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a562:	e056      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a568:	e053      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56e:	e050      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a570:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a574:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a578:	430b      	orrs	r3, r1
 800a57a:	d148      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a57c:	4b27      	ldr	r3, [pc, #156]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a57e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a580:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a584:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a58c:	d02a      	beq.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a594:	d838      	bhi.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a2:	d00d      	beq.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a5a4:	e030      	b.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5b2:	d102      	bne.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a5b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b8:	e02b      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5be:	e028      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5c0:	4b16      	ldr	r3, [pc, #88]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5cc:	d107      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 fae8 	bl	800aba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5dc:	e019      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e2:	e016      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5f0:	d107      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f2:	f107 0318 	add.w	r3, r7, #24
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f82e 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a600:	e007      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a606:	e004      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60c:	e001      	b.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a614:	4618      	mov	r0, r3
 800a616:	3740      	adds	r7, #64	@ 0x40
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	58024400 	.word	0x58024400
 800a620:	03d09000 	.word	0x03d09000
 800a624:	003d0900 	.word	0x003d0900
 800a628:	017d7840 	.word	0x017d7840

0800a62c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a630:	f7fe f92e 	bl	8008890 <HAL_RCC_GetHCLKFreq>
 800a634:	4602      	mov	r2, r0
 800a636:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	091b      	lsrs	r3, r3, #4
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	4904      	ldr	r1, [pc, #16]	@ (800a654 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a642:	5ccb      	ldrb	r3, [r1, r3]
 800a644:	f003 031f 	and.w	r3, r3, #31
 800a648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	58024400 	.word	0x58024400
 800a654:	0800f8bc 	.word	0x0800f8bc

0800a658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a658:	b480      	push	{r7}
 800a65a:	b089      	sub	sp, #36	@ 0x24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a660:	4ba1      	ldr	r3, [pc, #644]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	f003 0303 	and.w	r3, r3, #3
 800a668:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a66a:	4b9f      	ldr	r3, [pc, #636]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66e:	0b1b      	lsrs	r3, r3, #12
 800a670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a674:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a676:	4b9c      	ldr	r3, [pc, #624]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67a:	091b      	lsrs	r3, r3, #4
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a682:	4b99      	ldr	r3, [pc, #612]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a686:	08db      	lsrs	r3, r3, #3
 800a688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	fb02 f303 	mul.w	r3, r2, r3
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 8111 	beq.w	800a8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	f000 8083 	beq.w	800a7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	f200 80a1 	bhi.w	800a7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d056      	beq.n	800a770 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a6c2:	e099      	b.n	800a7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6c4:	4b88      	ldr	r3, [pc, #544]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d02d      	beq.n	800a72c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6d0:	4b85      	ldr	r3, [pc, #532]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	08db      	lsrs	r3, r3, #3
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	4a84      	ldr	r2, [pc, #528]	@ (800a8ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a6dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fa:	4b7b      	ldr	r3, [pc, #492]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a70e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a726:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a72a:	e087      	b.n	800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a736:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a73e:	4b6a      	ldr	r3, [pc, #424]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a752:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a76e:	e065      	b.n	800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a782:	4b59      	ldr	r3, [pc, #356]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a792:	ed97 6a03 	vldr	s12, [r7, #12]
 800a796:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7b2:	e043      	b.n	800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a8fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c6:	4b48      	ldr	r3, [pc, #288]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7f6:	e021      	b.n	800a83c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a802:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a8f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80a:	4b37      	ldr	r3, [pc, #220]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a83a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a83c:	4b2a      	ldr	r3, [pc, #168]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a840:	0a5b      	lsrs	r3, r3, #9
 800a842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a852:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a856:	edd7 6a07 	vldr	s13, [r7, #28]
 800a85a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a85e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a862:	ee17 2a90 	vmov	r2, s15
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a86a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	0c1b      	lsrs	r3, r3, #16
 800a870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a874:	ee07 3a90 	vmov	s15, r3
 800a878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a880:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a884:	edd7 6a07 	vldr	s13, [r7, #28]
 800a888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a890:	ee17 2a90 	vmov	r2, s15
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a898:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89c:	0e1b      	lsrs	r3, r3, #24
 800a89e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8be:	ee17 2a90 	vmov	r2, s15
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8c6:	e008      	b.n	800a8da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	609a      	str	r2, [r3, #8]
}
 800a8da:	bf00      	nop
 800a8dc:	3724      	adds	r7, #36	@ 0x24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	03d09000 	.word	0x03d09000
 800a8f0:	46000000 	.word	0x46000000
 800a8f4:	4c742400 	.word	0x4c742400
 800a8f8:	4a742400 	.word	0x4a742400
 800a8fc:	4bbebc20 	.word	0x4bbebc20

0800a900 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a900:	b480      	push	{r7}
 800a902:	b089      	sub	sp, #36	@ 0x24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a908:	4ba1      	ldr	r3, [pc, #644]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a912:	4b9f      	ldr	r3, [pc, #636]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a916:	0d1b      	lsrs	r3, r3, #20
 800a918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a91c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a91e:	4b9c      	ldr	r3, [pc, #624]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a922:	0a1b      	lsrs	r3, r3, #8
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a92a:	4b99      	ldr	r3, [pc, #612]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a92e:	08db      	lsrs	r3, r3, #3
 800a930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	fb02 f303 	mul.w	r3, r2, r3
 800a93a:	ee07 3a90 	vmov	s15, r3
 800a93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a942:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8111 	beq.w	800ab70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	2b02      	cmp	r3, #2
 800a952:	f000 8083 	beq.w	800aa5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	f200 80a1 	bhi.w	800aaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d056      	beq.n	800aa18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a96a:	e099      	b.n	800aaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a96c:	4b88      	ldr	r3, [pc, #544]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02d      	beq.n	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a978:	4b85      	ldr	r3, [pc, #532]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	08db      	lsrs	r3, r3, #3
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	4a84      	ldr	r2, [pc, #528]	@ (800ab94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a984:	fa22 f303 	lsr.w	r3, r2, r3
 800a988:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a2:	4b7b      	ldr	r3, [pc, #492]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9d2:	e087      	b.n	800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e6:	4b6a      	ldr	r3, [pc, #424]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa16:	e065      	b.n	800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2a:	4b59      	ldr	r3, [pc, #356]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa5a:	e043      	b.n	800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aba4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6e:	4b48      	ldr	r3, [pc, #288]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa9e:	e021      	b.n	800aae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aaae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab2:	4b37      	ldr	r3, [pc, #220]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aae2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aae4:	4b2a      	ldr	r3, [pc, #168]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae8:	0a5b      	lsrs	r3, r3, #9
 800aaea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab0a:	ee17 2a90 	vmov	r2, s15
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ab12:	4b1f      	ldr	r3, [pc, #124]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab38:	ee17 2a90 	vmov	r2, s15
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ab40:	4b13      	ldr	r3, [pc, #76]	@ (800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab44:	0e1b      	lsrs	r3, r3, #24
 800ab46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab66:	ee17 2a90 	vmov	r2, s15
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab6e:	e008      	b.n	800ab82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	609a      	str	r2, [r3, #8]
}
 800ab82:	bf00      	nop
 800ab84:	3724      	adds	r7, #36	@ 0x24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	58024400 	.word	0x58024400
 800ab94:	03d09000 	.word	0x03d09000
 800ab98:	46000000 	.word	0x46000000
 800ab9c:	4c742400 	.word	0x4c742400
 800aba0:	4a742400 	.word	0x4a742400
 800aba4:	4bbebc20 	.word	0x4bbebc20

0800aba8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b089      	sub	sp, #36	@ 0x24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abb0:	4ba0      	ldr	r3, [pc, #640]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb4:	f003 0303 	and.w	r3, r3, #3
 800abb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800abba:	4b9e      	ldr	r3, [pc, #632]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbe:	091b      	lsrs	r3, r3, #4
 800abc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800abc6:	4b9b      	ldr	r3, [pc, #620]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abd0:	4b98      	ldr	r3, [pc, #608]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd4:	08db      	lsrs	r3, r3, #3
 800abd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	fb02 f303 	mul.w	r3, r2, r3
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 8111 	beq.w	800ae16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	f000 8083 	beq.w	800ad02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	f200 80a1 	bhi.w	800ad46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d056      	beq.n	800acbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ac10:	e099      	b.n	800ad46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac12:	4b88      	ldr	r3, [pc, #544]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0320 	and.w	r3, r3, #32
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d02d      	beq.n	800ac7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac1e:	4b85      	ldr	r3, [pc, #532]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	08db      	lsrs	r3, r3, #3
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	4a83      	ldr	r2, [pc, #524]	@ (800ae38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	ee07 3a90 	vmov	s15, r3
 800ac40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac48:	4b7a      	ldr	r3, [pc, #488]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac58:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac5c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac78:	e087      	b.n	800ad8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac84:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ae40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8c:	4b69      	ldr	r3, [pc, #420]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acbc:	e065      	b.n	800ad8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ae44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800accc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd0:	4b58      	ldr	r3, [pc, #352]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd8:	ee07 3a90 	vmov	s15, r3
 800acdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ace4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ace8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad00:	e043      	b.n	800ad8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	ee07 3a90 	vmov	s15, r3
 800ad08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad0c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ae48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ad10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad14:	4b47      	ldr	r3, [pc, #284]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1c:	ee07 3a90 	vmov	s15, r3
 800ad20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad24:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad28:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad44:	e021      	b.n	800ad8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad50:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ae40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad58:	4b36      	ldr	r3, [pc, #216]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad60:	ee07 3a90 	vmov	s15, r3
 800ad64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad68:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad6c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ad8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad8e:	0a5b      	lsrs	r3, r3, #9
 800ad90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ada0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb0:	ee17 2a90 	vmov	r2, s15
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800adb8:	4b1e      	ldr	r3, [pc, #120]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add2:	edd7 6a07 	vldr	s13, [r7, #28]
 800add6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adde:	ee17 2a90 	vmov	r2, s15
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ade6:	4b13      	ldr	r3, [pc, #76]	@ (800ae34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ade8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adea:	0e1b      	lsrs	r3, r3, #24
 800adec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0c:	ee17 2a90 	vmov	r2, s15
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae14:	e008      	b.n	800ae28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	609a      	str	r2, [r3, #8]
}
 800ae28:	bf00      	nop
 800ae2a:	3724      	adds	r7, #36	@ 0x24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr
 800ae34:	58024400 	.word	0x58024400
 800ae38:	03d09000 	.word	0x03d09000
 800ae3c:	46000000 	.word	0x46000000
 800ae40:	4c742400 	.word	0x4c742400
 800ae44:	4a742400 	.word	0x4a742400
 800ae48:	4bbebc20 	.word	0x4bbebc20

0800ae4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae5a:	4b53      	ldr	r3, [pc, #332]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5e:	f003 0303 	and.w	r3, r3, #3
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d101      	bne.n	800ae6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e099      	b.n	800af9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae6a:	4b4f      	ldr	r3, [pc, #316]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a4e      	ldr	r2, [pc, #312]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800ae70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae76:	f7f8 fe95 	bl	8003ba4 <HAL_GetTick>
 800ae7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae7c:	e008      	b.n	800ae90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae7e:	f7f8 fe91 	bl	8003ba4 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d901      	bls.n	800ae90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e086      	b.n	800af9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae90:	4b45      	ldr	r3, [pc, #276]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f0      	bne.n	800ae7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae9c:	4b42      	ldr	r3, [pc, #264]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	031b      	lsls	r3, r3, #12
 800aeaa:	493f      	ldr	r1, [pc, #252]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800aeac:	4313      	orrs	r3, r2
 800aeae:	628b      	str	r3, [r1, #40]	@ 0x28
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	025b      	lsls	r3, r3, #9
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	431a      	orrs	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	041b      	lsls	r3, r3, #16
 800aece:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aed2:	431a      	orrs	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	061b      	lsls	r3, r3, #24
 800aedc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aee0:	4931      	ldr	r1, [pc, #196]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800aee2:	4313      	orrs	r3, r2
 800aee4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aee6:	4b30      	ldr	r3, [pc, #192]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800aee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	492d      	ldr	r1, [pc, #180]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aef8:	4b2b      	ldr	r3, [pc, #172]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800aefa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefc:	f023 0220 	bic.w	r2, r3, #32
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	4928      	ldr	r1, [pc, #160]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af06:	4313      	orrs	r3, r2
 800af08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af0a:	4b27      	ldr	r3, [pc, #156]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af0e:	4a26      	ldr	r2, [pc, #152]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af10:	f023 0310 	bic.w	r3, r3, #16
 800af14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af16:	4b24      	ldr	r3, [pc, #144]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af1a:	4b24      	ldr	r3, [pc, #144]	@ (800afac <RCCEx_PLL2_Config+0x160>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	69d2      	ldr	r2, [r2, #28]
 800af22:	00d2      	lsls	r2, r2, #3
 800af24:	4920      	ldr	r1, [pc, #128]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af26:	4313      	orrs	r3, r2
 800af28:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af2a:	4b1f      	ldr	r3, [pc, #124]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2e:	4a1e      	ldr	r2, [pc, #120]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af30:	f043 0310 	orr.w	r3, r3, #16
 800af34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af3c:	4b1a      	ldr	r3, [pc, #104]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af40:	4a19      	ldr	r2, [pc, #100]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af48:	e00f      	b.n	800af6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d106      	bne.n	800af5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af50:	4b15      	ldr	r3, [pc, #84]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af54:	4a14      	ldr	r2, [pc, #80]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af5c:	e005      	b.n	800af6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af5e:	4b12      	ldr	r3, [pc, #72]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af62:	4a11      	ldr	r2, [pc, #68]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af6a:	4b0f      	ldr	r3, [pc, #60]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a0e      	ldr	r2, [pc, #56]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af76:	f7f8 fe15 	bl	8003ba4 <HAL_GetTick>
 800af7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af7c:	e008      	b.n	800af90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af7e:	f7f8 fe11 	bl	8003ba4 <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d901      	bls.n	800af90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e006      	b.n	800af9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <RCCEx_PLL2_Config+0x15c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0f0      	beq.n	800af7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	58024400 	.word	0x58024400
 800afac:	ffff0007 	.word	0xffff0007

0800afb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afbe:	4b53      	ldr	r3, [pc, #332]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800afc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc2:	f003 0303 	and.w	r3, r3, #3
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d101      	bne.n	800afce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e099      	b.n	800b102 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afce:	4b4f      	ldr	r3, [pc, #316]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a4e      	ldr	r2, [pc, #312]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800afd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afda:	f7f8 fde3 	bl	8003ba4 <HAL_GetTick>
 800afde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afe0:	e008      	b.n	800aff4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afe2:	f7f8 fddf 	bl	8003ba4 <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	2b02      	cmp	r3, #2
 800afee:	d901      	bls.n	800aff4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e086      	b.n	800b102 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aff4:	4b45      	ldr	r3, [pc, #276]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1f0      	bne.n	800afe2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b000:	4b42      	ldr	r3, [pc, #264]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b004:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	051b      	lsls	r3, r3, #20
 800b00e:	493f      	ldr	r1, [pc, #252]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b010:	4313      	orrs	r3, r2
 800b012:	628b      	str	r3, [r1, #40]	@ 0x28
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	3b01      	subs	r3, #1
 800b01a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	3b01      	subs	r3, #1
 800b024:	025b      	lsls	r3, r3, #9
 800b026:	b29b      	uxth	r3, r3
 800b028:	431a      	orrs	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	3b01      	subs	r3, #1
 800b030:	041b      	lsls	r3, r3, #16
 800b032:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	061b      	lsls	r3, r3, #24
 800b040:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b044:	4931      	ldr	r1, [pc, #196]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b046:	4313      	orrs	r3, r2
 800b048:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b04a:	4b30      	ldr	r3, [pc, #192]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	492d      	ldr	r1, [pc, #180]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b05c:	4b2b      	ldr	r3, [pc, #172]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b060:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	4928      	ldr	r1, [pc, #160]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b06a:	4313      	orrs	r3, r2
 800b06c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b06e:	4b27      	ldr	r3, [pc, #156]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b072:	4a26      	ldr	r2, [pc, #152]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b078:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b07a:	4b24      	ldr	r3, [pc, #144]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b07c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b07e:	4b24      	ldr	r3, [pc, #144]	@ (800b110 <RCCEx_PLL3_Config+0x160>)
 800b080:	4013      	ands	r3, r2
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	69d2      	ldr	r2, [r2, #28]
 800b086:	00d2      	lsls	r2, r2, #3
 800b088:	4920      	ldr	r1, [pc, #128]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b08e:	4b1f      	ldr	r3, [pc, #124]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b092:	4a1e      	ldr	r2, [pc, #120]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b098:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d106      	bne.n	800b0ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a4:	4a19      	ldr	r2, [pc, #100]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b0aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b0ac:	e00f      	b.n	800b0ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d106      	bne.n	800b0c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0b4:	4b15      	ldr	r3, [pc, #84]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b8:	4a14      	ldr	r2, [pc, #80]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b0be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b0c0:	e005      	b.n	800b0ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0c2:	4b12      	ldr	r3, [pc, #72]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c6:	4a11      	ldr	r2, [pc, #68]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0da:	f7f8 fd63 	bl	8003ba4 <HAL_GetTick>
 800b0de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0e0:	e008      	b.n	800b0f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0e2:	f7f8 fd5f 	bl	8003ba4 <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d901      	bls.n	800b0f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e006      	b.n	800b102 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0f4:	4b05      	ldr	r3, [pc, #20]	@ (800b10c <RCCEx_PLL3_Config+0x15c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0f0      	beq.n	800b0e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b100:	7bfb      	ldrb	r3, [r7, #15]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	58024400 	.word	0x58024400
 800b110:	ffff0007 	.word	0xffff0007

0800b114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e049      	b.n	800b1ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7f7 ff3e 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2202      	movs	r2, #2
 800b144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3304      	adds	r3, #4
 800b150:	4619      	mov	r1, r3
 800b152:	4610      	mov	r0, r2
 800b154:	f000 fad0 	bl	800b6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e049      	b.n	800b268 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d106      	bne.n	800b1ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7f7 ff0f 	bl	800300c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f000 fa79 	bl	800b6f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d020      	beq.n	800b2d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01b      	beq.n	800b2d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0202 	mvn.w	r2, #2
 800b2a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	f003 0303 	and.w	r3, r3, #3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f9fe 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b2c0:	e005      	b.n	800b2ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f9f0 	bl	800b6a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fa01 	bl	800b6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	f003 0304 	and.w	r3, r3, #4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d020      	beq.n	800b320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01b      	beq.n	800b320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0204 	mvn.w	r2, #4
 800b2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f9d8 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b30c:	e005      	b.n	800b31a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f9ca 	bl	800b6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f9db 	bl	800b6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f003 0308 	and.w	r3, r3, #8
 800b326:	2b00      	cmp	r3, #0
 800b328:	d020      	beq.n	800b36c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f003 0308 	and.w	r3, r3, #8
 800b330:	2b00      	cmp	r3, #0
 800b332:	d01b      	beq.n	800b36c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f06f 0208 	mvn.w	r2, #8
 800b33c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2204      	movs	r2, #4
 800b342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f003 0303 	and.w	r3, r3, #3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f9b2 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b358:	e005      	b.n	800b366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f9a4 	bl	800b6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f9b5 	bl	800b6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f003 0310 	and.w	r3, r3, #16
 800b372:	2b00      	cmp	r3, #0
 800b374:	d020      	beq.n	800b3b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f003 0310 	and.w	r3, r3, #16
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01b      	beq.n	800b3b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f06f 0210 	mvn.w	r2, #16
 800b388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2208      	movs	r2, #8
 800b38e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f98c 	bl	800b6bc <HAL_TIM_IC_CaptureCallback>
 800b3a4:	e005      	b.n	800b3b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f97e 	bl	800b6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f98f 	bl	800b6d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00c      	beq.n	800b3dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d007      	beq.n	800b3dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f06f 0201 	mvn.w	r2, #1
 800b3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7f7 fa28 	bl	800282c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d104      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00c      	beq.n	800b40a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fd9f 	bl	800bf48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00c      	beq.n	800b42e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d007      	beq.n	800b42e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fd97 	bl	800bf5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00c      	beq.n	800b452 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d007      	beq.n	800b452 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b44a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f949 	bl	800b6e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00c      	beq.n	800b476 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f003 0320 	and.w	r3, r3, #32
 800b462:	2b00      	cmp	r3, #0
 800b464:	d007      	beq.n	800b476 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f06f 0220 	mvn.w	r2, #32
 800b46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fd5f 	bl	800bf34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e0ff      	b.n	800b69e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b14      	cmp	r3, #20
 800b4aa:	f200 80f0 	bhi.w	800b68e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b4:	0800b509 	.word	0x0800b509
 800b4b8:	0800b68f 	.word	0x0800b68f
 800b4bc:	0800b68f 	.word	0x0800b68f
 800b4c0:	0800b68f 	.word	0x0800b68f
 800b4c4:	0800b549 	.word	0x0800b549
 800b4c8:	0800b68f 	.word	0x0800b68f
 800b4cc:	0800b68f 	.word	0x0800b68f
 800b4d0:	0800b68f 	.word	0x0800b68f
 800b4d4:	0800b58b 	.word	0x0800b58b
 800b4d8:	0800b68f 	.word	0x0800b68f
 800b4dc:	0800b68f 	.word	0x0800b68f
 800b4e0:	0800b68f 	.word	0x0800b68f
 800b4e4:	0800b5cb 	.word	0x0800b5cb
 800b4e8:	0800b68f 	.word	0x0800b68f
 800b4ec:	0800b68f 	.word	0x0800b68f
 800b4f0:	0800b68f 	.word	0x0800b68f
 800b4f4:	0800b60d 	.word	0x0800b60d
 800b4f8:	0800b68f 	.word	0x0800b68f
 800b4fc:	0800b68f 	.word	0x0800b68f
 800b500:	0800b68f 	.word	0x0800b68f
 800b504:	0800b64d 	.word	0x0800b64d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68b9      	ldr	r1, [r7, #8]
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f99e 	bl	800b850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699a      	ldr	r2, [r3, #24]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f042 0208 	orr.w	r2, r2, #8
 800b522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f022 0204 	bic.w	r2, r2, #4
 800b532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6999      	ldr	r1, [r3, #24]
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	691a      	ldr	r2, [r3, #16]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	619a      	str	r2, [r3, #24]
      break;
 800b546:	e0a5      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fa0e 	bl	800b970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	699a      	ldr	r2, [r3, #24]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6999      	ldr	r1, [r3, #24]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	021a      	lsls	r2, r3, #8
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	619a      	str	r2, [r3, #24]
      break;
 800b588:	e084      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	4618      	mov	r0, r3
 800b592:	f000 fa77 	bl	800ba84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	69da      	ldr	r2, [r3, #28]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f042 0208 	orr.w	r2, r2, #8
 800b5a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	69da      	ldr	r2, [r3, #28]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f022 0204 	bic.w	r2, r2, #4
 800b5b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	69d9      	ldr	r1, [r3, #28]
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	691a      	ldr	r2, [r3, #16]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	61da      	str	r2, [r3, #28]
      break;
 800b5c8:	e064      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68b9      	ldr	r1, [r7, #8]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 fadf 	bl	800bb94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	69da      	ldr	r2, [r3, #28]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	69da      	ldr	r2, [r3, #28]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69d9      	ldr	r1, [r3, #28]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	021a      	lsls	r2, r3, #8
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	61da      	str	r2, [r3, #28]
      break;
 800b60a:	e043      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	4618      	mov	r0, r3
 800b614:	f000 fb28 	bl	800bc68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f042 0208 	orr.w	r2, r2, #8
 800b626:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f022 0204 	bic.w	r2, r2, #4
 800b636:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	691a      	ldr	r2, [r3, #16]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b64a:	e023      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 fb6c 	bl	800bd30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b666:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b676:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	021a      	lsls	r2, r3, #8
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b68c:	e002      	b.n	800b694 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	75fb      	strb	r3, [r7, #23]
      break;
 800b692:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop

0800b6a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a47      	ldr	r2, [pc, #284]	@ (800b828 <TIM_Base_SetConfig+0x130>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d013      	beq.n	800b738 <TIM_Base_SetConfig+0x40>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b716:	d00f      	beq.n	800b738 <TIM_Base_SetConfig+0x40>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a44      	ldr	r2, [pc, #272]	@ (800b82c <TIM_Base_SetConfig+0x134>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d00b      	beq.n	800b738 <TIM_Base_SetConfig+0x40>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a43      	ldr	r2, [pc, #268]	@ (800b830 <TIM_Base_SetConfig+0x138>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d007      	beq.n	800b738 <TIM_Base_SetConfig+0x40>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a42      	ldr	r2, [pc, #264]	@ (800b834 <TIM_Base_SetConfig+0x13c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d003      	beq.n	800b738 <TIM_Base_SetConfig+0x40>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a41      	ldr	r2, [pc, #260]	@ (800b838 <TIM_Base_SetConfig+0x140>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d108      	bne.n	800b74a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b73e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a36      	ldr	r2, [pc, #216]	@ (800b828 <TIM_Base_SetConfig+0x130>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d027      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b758:	d023      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a33      	ldr	r2, [pc, #204]	@ (800b82c <TIM_Base_SetConfig+0x134>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01f      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a32      	ldr	r2, [pc, #200]	@ (800b830 <TIM_Base_SetConfig+0x138>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d01b      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a31      	ldr	r2, [pc, #196]	@ (800b834 <TIM_Base_SetConfig+0x13c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d017      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a30      	ldr	r2, [pc, #192]	@ (800b838 <TIM_Base_SetConfig+0x140>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d013      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a2f      	ldr	r2, [pc, #188]	@ (800b83c <TIM_Base_SetConfig+0x144>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00f      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a2e      	ldr	r2, [pc, #184]	@ (800b840 <TIM_Base_SetConfig+0x148>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a2d      	ldr	r2, [pc, #180]	@ (800b844 <TIM_Base_SetConfig+0x14c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d007      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a2c      	ldr	r2, [pc, #176]	@ (800b848 <TIM_Base_SetConfig+0x150>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d003      	beq.n	800b7a2 <TIM_Base_SetConfig+0xaa>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a2b      	ldr	r2, [pc, #172]	@ (800b84c <TIM_Base_SetConfig+0x154>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d108      	bne.n	800b7b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	689a      	ldr	r2, [r3, #8]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a14      	ldr	r2, [pc, #80]	@ (800b828 <TIM_Base_SetConfig+0x130>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00f      	beq.n	800b7fa <TIM_Base_SetConfig+0x102>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a16      	ldr	r2, [pc, #88]	@ (800b838 <TIM_Base_SetConfig+0x140>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00b      	beq.n	800b7fa <TIM_Base_SetConfig+0x102>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a15      	ldr	r2, [pc, #84]	@ (800b83c <TIM_Base_SetConfig+0x144>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d007      	beq.n	800b7fa <TIM_Base_SetConfig+0x102>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a14      	ldr	r2, [pc, #80]	@ (800b840 <TIM_Base_SetConfig+0x148>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d003      	beq.n	800b7fa <TIM_Base_SetConfig+0x102>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a13      	ldr	r2, [pc, #76]	@ (800b844 <TIM_Base_SetConfig+0x14c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d103      	bne.n	800b802 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	691a      	ldr	r2, [r3, #16]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f043 0204 	orr.w	r2, r3, #4
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	601a      	str	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	40010000 	.word	0x40010000
 800b82c:	40000400 	.word	0x40000400
 800b830:	40000800 	.word	0x40000800
 800b834:	40000c00 	.word	0x40000c00
 800b838:	40010400 	.word	0x40010400
 800b83c:	40014000 	.word	0x40014000
 800b840:	40014400 	.word	0x40014400
 800b844:	40014800 	.word	0x40014800
 800b848:	4000e000 	.word	0x4000e000
 800b84c:	4000e400 	.word	0x4000e400

0800b850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	f023 0201 	bic.w	r2, r3, #1
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4b37      	ldr	r3, [pc, #220]	@ (800b958 <TIM_OC1_SetConfig+0x108>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f023 0302 	bic.w	r3, r3, #2
 800b898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a2d      	ldr	r2, [pc, #180]	@ (800b95c <TIM_OC1_SetConfig+0x10c>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d00f      	beq.n	800b8cc <TIM_OC1_SetConfig+0x7c>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a2c      	ldr	r2, [pc, #176]	@ (800b960 <TIM_OC1_SetConfig+0x110>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d00b      	beq.n	800b8cc <TIM_OC1_SetConfig+0x7c>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a2b      	ldr	r2, [pc, #172]	@ (800b964 <TIM_OC1_SetConfig+0x114>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d007      	beq.n	800b8cc <TIM_OC1_SetConfig+0x7c>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a2a      	ldr	r2, [pc, #168]	@ (800b968 <TIM_OC1_SetConfig+0x118>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d003      	beq.n	800b8cc <TIM_OC1_SetConfig+0x7c>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a29      	ldr	r2, [pc, #164]	@ (800b96c <TIM_OC1_SetConfig+0x11c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d10c      	bne.n	800b8e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f023 0308 	bic.w	r3, r3, #8
 800b8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f023 0304 	bic.w	r3, r3, #4
 800b8e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b95c <TIM_OC1_SetConfig+0x10c>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d00f      	beq.n	800b90e <TIM_OC1_SetConfig+0xbe>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a1b      	ldr	r2, [pc, #108]	@ (800b960 <TIM_OC1_SetConfig+0x110>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d00b      	beq.n	800b90e <TIM_OC1_SetConfig+0xbe>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a1a      	ldr	r2, [pc, #104]	@ (800b964 <TIM_OC1_SetConfig+0x114>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d007      	beq.n	800b90e <TIM_OC1_SetConfig+0xbe>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a19      	ldr	r2, [pc, #100]	@ (800b968 <TIM_OC1_SetConfig+0x118>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d003      	beq.n	800b90e <TIM_OC1_SetConfig+0xbe>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a18      	ldr	r2, [pc, #96]	@ (800b96c <TIM_OC1_SetConfig+0x11c>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d111      	bne.n	800b932 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	695b      	ldr	r3, [r3, #20]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	4313      	orrs	r3, r2
 800b926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	4313      	orrs	r3, r2
 800b930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	621a      	str	r2, [r3, #32]
}
 800b94c:	bf00      	nop
 800b94e:	371c      	adds	r7, #28
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	fffeff8f 	.word	0xfffeff8f
 800b95c:	40010000 	.word	0x40010000
 800b960:	40010400 	.word	0x40010400
 800b964:	40014000 	.word	0x40014000
 800b968:	40014400 	.word	0x40014400
 800b96c:	40014800 	.word	0x40014800

0800b970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b970:	b480      	push	{r7}
 800b972:	b087      	sub	sp, #28
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a1b      	ldr	r3, [r3, #32]
 800b984:	f023 0210 	bic.w	r2, r3, #16
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	4b34      	ldr	r3, [pc, #208]	@ (800ba6c <TIM_OC2_SetConfig+0xfc>)
 800b99c:	4013      	ands	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f023 0320 	bic.w	r3, r3, #32
 800b9ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	011b      	lsls	r3, r3, #4
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a29      	ldr	r2, [pc, #164]	@ (800ba70 <TIM_OC2_SetConfig+0x100>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d003      	beq.n	800b9d8 <TIM_OC2_SetConfig+0x68>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a28      	ldr	r2, [pc, #160]	@ (800ba74 <TIM_OC2_SetConfig+0x104>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d10d      	bne.n	800b9f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba70 <TIM_OC2_SetConfig+0x100>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d00f      	beq.n	800ba1c <TIM_OC2_SetConfig+0xac>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a1d      	ldr	r2, [pc, #116]	@ (800ba74 <TIM_OC2_SetConfig+0x104>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d00b      	beq.n	800ba1c <TIM_OC2_SetConfig+0xac>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a1c      	ldr	r2, [pc, #112]	@ (800ba78 <TIM_OC2_SetConfig+0x108>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d007      	beq.n	800ba1c <TIM_OC2_SetConfig+0xac>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a1b      	ldr	r2, [pc, #108]	@ (800ba7c <TIM_OC2_SetConfig+0x10c>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d003      	beq.n	800ba1c <TIM_OC2_SetConfig+0xac>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a1a      	ldr	r2, [pc, #104]	@ (800ba80 <TIM_OC2_SetConfig+0x110>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d113      	bne.n	800ba44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	693a      	ldr	r2, [r7, #16]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	621a      	str	r2, [r3, #32]
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	feff8fff 	.word	0xfeff8fff
 800ba70:	40010000 	.word	0x40010000
 800ba74:	40010400 	.word	0x40010400
 800ba78:	40014000 	.word	0x40014000
 800ba7c:	40014400 	.word	0x40014400
 800ba80:	40014800 	.word	0x40014800

0800ba84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4b33      	ldr	r3, [pc, #204]	@ (800bb7c <TIM_OC3_SetConfig+0xf8>)
 800bab0:	4013      	ands	r3, r2
 800bab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f023 0303 	bic.w	r3, r3, #3
 800baba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bacc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	021b      	lsls	r3, r3, #8
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a28      	ldr	r2, [pc, #160]	@ (800bb80 <TIM_OC3_SetConfig+0xfc>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d003      	beq.n	800baea <TIM_OC3_SetConfig+0x66>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a27      	ldr	r2, [pc, #156]	@ (800bb84 <TIM_OC3_SetConfig+0x100>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d10d      	bne.n	800bb06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800baf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a1d      	ldr	r2, [pc, #116]	@ (800bb80 <TIM_OC3_SetConfig+0xfc>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d00f      	beq.n	800bb2e <TIM_OC3_SetConfig+0xaa>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a1c      	ldr	r2, [pc, #112]	@ (800bb84 <TIM_OC3_SetConfig+0x100>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d00b      	beq.n	800bb2e <TIM_OC3_SetConfig+0xaa>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a1b      	ldr	r2, [pc, #108]	@ (800bb88 <TIM_OC3_SetConfig+0x104>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d007      	beq.n	800bb2e <TIM_OC3_SetConfig+0xaa>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a1a      	ldr	r2, [pc, #104]	@ (800bb8c <TIM_OC3_SetConfig+0x108>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d003      	beq.n	800bb2e <TIM_OC3_SetConfig+0xaa>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a19      	ldr	r2, [pc, #100]	@ (800bb90 <TIM_OC3_SetConfig+0x10c>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d113      	bne.n	800bb56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	011b      	lsls	r3, r3, #4
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	011b      	lsls	r3, r3, #4
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	685a      	ldr	r2, [r3, #4]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	621a      	str	r2, [r3, #32]
}
 800bb70:	bf00      	nop
 800bb72:	371c      	adds	r7, #28
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	fffeff8f 	.word	0xfffeff8f
 800bb80:	40010000 	.word	0x40010000
 800bb84:	40010400 	.word	0x40010400
 800bb88:	40014000 	.word	0x40014000
 800bb8c:	40014400 	.word	0x40014400
 800bb90:	40014800 	.word	0x40014800

0800bb94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	4b24      	ldr	r3, [pc, #144]	@ (800bc50 <TIM_OC4_SetConfig+0xbc>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	021b      	lsls	r3, r3, #8
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	031b      	lsls	r3, r3, #12
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a19      	ldr	r2, [pc, #100]	@ (800bc54 <TIM_OC4_SetConfig+0xc0>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00f      	beq.n	800bc14 <TIM_OC4_SetConfig+0x80>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a18      	ldr	r2, [pc, #96]	@ (800bc58 <TIM_OC4_SetConfig+0xc4>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d00b      	beq.n	800bc14 <TIM_OC4_SetConfig+0x80>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a17      	ldr	r2, [pc, #92]	@ (800bc5c <TIM_OC4_SetConfig+0xc8>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d007      	beq.n	800bc14 <TIM_OC4_SetConfig+0x80>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a16      	ldr	r2, [pc, #88]	@ (800bc60 <TIM_OC4_SetConfig+0xcc>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d003      	beq.n	800bc14 <TIM_OC4_SetConfig+0x80>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a15      	ldr	r2, [pc, #84]	@ (800bc64 <TIM_OC4_SetConfig+0xd0>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d109      	bne.n	800bc28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	019b      	lsls	r3, r3, #6
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	feff8fff 	.word	0xfeff8fff
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40010400 	.word	0x40010400
 800bc5c:	40014000 	.word	0x40014000
 800bc60:	40014400 	.word	0x40014400
 800bc64:	40014800 	.word	0x40014800

0800bc68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4b21      	ldr	r3, [pc, #132]	@ (800bd18 <TIM_OC5_SetConfig+0xb0>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	041b      	lsls	r3, r3, #16
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a18      	ldr	r2, [pc, #96]	@ (800bd1c <TIM_OC5_SetConfig+0xb4>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d00f      	beq.n	800bcde <TIM_OC5_SetConfig+0x76>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a17      	ldr	r2, [pc, #92]	@ (800bd20 <TIM_OC5_SetConfig+0xb8>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d00b      	beq.n	800bcde <TIM_OC5_SetConfig+0x76>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a16      	ldr	r2, [pc, #88]	@ (800bd24 <TIM_OC5_SetConfig+0xbc>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d007      	beq.n	800bcde <TIM_OC5_SetConfig+0x76>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a15      	ldr	r2, [pc, #84]	@ (800bd28 <TIM_OC5_SetConfig+0xc0>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d003      	beq.n	800bcde <TIM_OC5_SetConfig+0x76>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a14      	ldr	r2, [pc, #80]	@ (800bd2c <TIM_OC5_SetConfig+0xc4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d109      	bne.n	800bcf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	021b      	lsls	r3, r3, #8
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	621a      	str	r2, [r3, #32]
}
 800bd0c:	bf00      	nop
 800bd0e:	371c      	adds	r7, #28
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	fffeff8f 	.word	0xfffeff8f
 800bd1c:	40010000 	.word	0x40010000
 800bd20:	40010400 	.word	0x40010400
 800bd24:	40014000 	.word	0x40014000
 800bd28:	40014400 	.word	0x40014400
 800bd2c:	40014800 	.word	0x40014800

0800bd30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	4b22      	ldr	r3, [pc, #136]	@ (800bde4 <TIM_OC6_SetConfig+0xb4>)
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	021b      	lsls	r3, r3, #8
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	051b      	lsls	r3, r3, #20
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a19      	ldr	r2, [pc, #100]	@ (800bde8 <TIM_OC6_SetConfig+0xb8>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00f      	beq.n	800bda8 <TIM_OC6_SetConfig+0x78>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a18      	ldr	r2, [pc, #96]	@ (800bdec <TIM_OC6_SetConfig+0xbc>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00b      	beq.n	800bda8 <TIM_OC6_SetConfig+0x78>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a17      	ldr	r2, [pc, #92]	@ (800bdf0 <TIM_OC6_SetConfig+0xc0>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d007      	beq.n	800bda8 <TIM_OC6_SetConfig+0x78>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a16      	ldr	r2, [pc, #88]	@ (800bdf4 <TIM_OC6_SetConfig+0xc4>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d003      	beq.n	800bda8 <TIM_OC6_SetConfig+0x78>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a15      	ldr	r2, [pc, #84]	@ (800bdf8 <TIM_OC6_SetConfig+0xc8>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d109      	bne.n	800bdbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	029b      	lsls	r3, r3, #10
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	685a      	ldr	r2, [r3, #4]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	621a      	str	r2, [r3, #32]
}
 800bdd6:	bf00      	nop
 800bdd8:	371c      	adds	r7, #28
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	feff8fff 	.word	0xfeff8fff
 800bde8:	40010000 	.word	0x40010000
 800bdec:	40010400 	.word	0x40010400
 800bdf0:	40014000 	.word	0x40014000
 800bdf4:	40014400 	.word	0x40014400
 800bdf8:	40014800 	.word	0x40014800

0800bdfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d101      	bne.n	800be14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be10:	2302      	movs	r3, #2
 800be12:	e077      	b.n	800bf04 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2202      	movs	r2, #2
 800be20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a35      	ldr	r2, [pc, #212]	@ (800bf10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d004      	beq.n	800be48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a34      	ldr	r2, [pc, #208]	@ (800bf14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d108      	bne.n	800be5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4313      	orrs	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	4313      	orrs	r3, r2
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a25      	ldr	r2, [pc, #148]	@ (800bf10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d02c      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be86:	d027      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a22      	ldr	r2, [pc, #136]	@ (800bf18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d022      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a21      	ldr	r2, [pc, #132]	@ (800bf1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d01d      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a1f      	ldr	r2, [pc, #124]	@ (800bf20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d018      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a1a      	ldr	r2, [pc, #104]	@ (800bf14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d013      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d00e      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a1a      	ldr	r2, [pc, #104]	@ (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d009      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a18      	ldr	r2, [pc, #96]	@ (800bf2c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d004      	beq.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a17      	ldr	r2, [pc, #92]	@ (800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d10c      	bne.n	800bef2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	40010000 	.word	0x40010000
 800bf14:	40010400 	.word	0x40010400
 800bf18:	40000400 	.word	0x40000400
 800bf1c:	40000800 	.word	0x40000800
 800bf20:	40000c00 	.word	0x40000c00
 800bf24:	40001800 	.word	0x40001800
 800bf28:	40014000 	.word	0x40014000
 800bf2c:	4000e000 	.word	0x4000e000
 800bf30:	4000e400 	.word	0x4000e400

0800bf34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e042      	b.n	800c008 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7f7 fa11 	bl	80033bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2224      	movs	r2, #36	@ 0x24
 800bf9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f022 0201 	bic.w	r2, r2, #1
 800bfb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f001 fb68 	bl	800d690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fcf9 	bl	800c9b8 <UART_SetConfig>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e01b      	b.n	800c008 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bfde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	689a      	ldr	r2, [r3, #8]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bfee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0201 	orr.w	r2, r2, #1
 800bffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 fbe7 	bl	800d7d4 <UART_CheckIdleState>
 800c006:	4603      	mov	r3, r0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08a      	sub	sp, #40	@ 0x28
 800c014:	af02      	add	r7, sp, #8
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	4613      	mov	r3, r2
 800c01e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c026:	2b20      	cmp	r3, #32
 800c028:	d17b      	bne.n	800c122 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <HAL_UART_Transmit+0x26>
 800c030:	88fb      	ldrh	r3, [r7, #6]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e074      	b.n	800c124 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2221      	movs	r2, #33	@ 0x21
 800c046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c04a:	f7f7 fdab 	bl	8003ba4 <HAL_GetTick>
 800c04e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	88fa      	ldrh	r2, [r7, #6]
 800c054:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	88fa      	ldrh	r2, [r7, #6]
 800c05c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c068:	d108      	bne.n	800c07c <HAL_UART_Transmit+0x6c>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d104      	bne.n	800c07c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	e003      	b.n	800c084 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c080:	2300      	movs	r3, #0
 800c082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c084:	e030      	b.n	800c0e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2200      	movs	r2, #0
 800c08e:	2180      	movs	r1, #128	@ 0x80
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f001 fc49 	bl	800d928 <UART_WaitOnFlagUntilTimeout>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d005      	beq.n	800c0a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2220      	movs	r2, #32
 800c0a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e03d      	b.n	800c124 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10b      	bne.n	800c0c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	3302      	adds	r3, #2
 800c0c2:	61bb      	str	r3, [r7, #24]
 800c0c4:	e007      	b.n	800c0d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1c8      	bne.n	800c086 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	2140      	movs	r1, #64	@ 0x40
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f001 fc12 	bl	800d928 <UART_WaitOnFlagUntilTimeout>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d005      	beq.n	800c116 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e006      	b.n	800c124 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2220      	movs	r2, #32
 800c11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	e000      	b.n	800c124 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c122:	2302      	movs	r3, #2
  }
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08a      	sub	sp, #40	@ 0x28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4613      	mov	r3, r2
 800c138:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c140:	2b20      	cmp	r3, #32
 800c142:	d137      	bne.n	800c1b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d002      	beq.n	800c150 <HAL_UART_Receive_IT+0x24>
 800c14a:	88fb      	ldrh	r3, [r7, #6]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e030      	b.n	800c1b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a18      	ldr	r2, [pc, #96]	@ (800c1c0 <HAL_UART_Receive_IT+0x94>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d01f      	beq.n	800c1a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d018      	beq.n	800c1a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	e853 3f00 	ldrex	r3, [r3]
 800c17e:	613b      	str	r3, [r7, #16]
   return(result);
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c186:	627b      	str	r3, [r7, #36]	@ 0x24
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	461a      	mov	r2, r3
 800c18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c190:	623b      	str	r3, [r7, #32]
 800c192:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c194:	69f9      	ldr	r1, [r7, #28]
 800c196:	6a3a      	ldr	r2, [r7, #32]
 800c198:	e841 2300 	strex	r3, r2, [r1]
 800c19c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1e6      	bne.n	800c172 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c1a4:	88fb      	ldrh	r3, [r7, #6]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f001 fc2a 	bl	800da04 <UART_Start_Receive_IT>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	e000      	b.n	800c1b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c1b4:	2302      	movs	r3, #2
  }
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3728      	adds	r7, #40	@ 0x28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	58000c00 	.word	0x58000c00

0800c1c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b0ba      	sub	sp, #232	@ 0xe8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c1ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c1f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d11b      	bne.n	800c238 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c204:	f003 0320 	and.w	r3, r3, #32
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d015      	beq.n	800c238 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	d105      	bne.n	800c224 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c21c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d009      	beq.n	800c238 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 8393 	beq.w	800c954 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	4798      	blx	r3
      }
      return;
 800c236:	e38d      	b.n	800c954 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 8123 	beq.w	800c488 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c242:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c246:	4b8d      	ldr	r3, [pc, #564]	@ (800c47c <HAL_UART_IRQHandler+0x2b8>)
 800c248:	4013      	ands	r3, r2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c24e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c252:	4b8b      	ldr	r3, [pc, #556]	@ (800c480 <HAL_UART_IRQHandler+0x2bc>)
 800c254:	4013      	ands	r3, r2
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 8116 	beq.w	800c488 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	2b00      	cmp	r3, #0
 800c266:	d011      	beq.n	800c28c <HAL_UART_IRQHandler+0xc8>
 800c268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c26c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2201      	movs	r2, #1
 800c27a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c282:	f043 0201 	orr.w	r2, r3, #1
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c290:	f003 0302 	and.w	r3, r3, #2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d011      	beq.n	800c2bc <HAL_UART_IRQHandler+0xf8>
 800c298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00b      	beq.n	800c2bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b2:	f043 0204 	orr.w	r2, r3, #4
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c0:	f003 0304 	and.w	r3, r3, #4
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d011      	beq.n	800c2ec <HAL_UART_IRQHandler+0x128>
 800c2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2204      	movs	r2, #4
 800c2da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e2:	f043 0202 	orr.w	r2, r3, #2
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d017      	beq.n	800c328 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2fc:	f003 0320 	and.w	r3, r3, #32
 800c300:	2b00      	cmp	r3, #0
 800c302:	d105      	bne.n	800c310 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c304:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c308:	4b5c      	ldr	r3, [pc, #368]	@ (800c47c <HAL_UART_IRQHandler+0x2b8>)
 800c30a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2208      	movs	r2, #8
 800c316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c31e:	f043 0208 	orr.w	r2, r3, #8
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c32c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c330:	2b00      	cmp	r3, #0
 800c332:	d012      	beq.n	800c35a <HAL_UART_IRQHandler+0x196>
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c338:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00c      	beq.n	800c35a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c350:	f043 0220 	orr.w	r2, r3, #32
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 82f9 	beq.w	800c958 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d013      	beq.n	800c39a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d105      	bne.n	800c38a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c386:	2b00      	cmp	r3, #0
 800c388:	d007      	beq.n	800c39a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ae:	2b40      	cmp	r3, #64	@ 0x40
 800c3b0:	d005      	beq.n	800c3be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c3b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c3b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d054      	beq.n	800c468 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f001 fc42 	bl	800dc48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ce:	2b40      	cmp	r3, #64	@ 0x40
 800c3d0:	d146      	bne.n	800c460 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c3fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c40a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c40e:	e841 2300 	strex	r3, r2, [r1]
 800c412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1d9      	bne.n	800c3d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c424:	2b00      	cmp	r3, #0
 800c426:	d017      	beq.n	800c458 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c42e:	4a15      	ldr	r2, [pc, #84]	@ (800c484 <HAL_UART_IRQHandler+0x2c0>)
 800c430:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f9 fbdb 	bl	8005bf4 <HAL_DMA_Abort_IT>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d019      	beq.n	800c478 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c452:	4610      	mov	r0, r2
 800c454:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c456:	e00f      	b.n	800c478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7f6 fb27 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c45e:	e00b      	b.n	800c478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7f6 fb23 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c466:	e007      	b.n	800c478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7f6 fb1f 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c476:	e26f      	b.n	800c958 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c478:	bf00      	nop
    return;
 800c47a:	e26d      	b.n	800c958 <HAL_UART_IRQHandler+0x794>
 800c47c:	10000001 	.word	0x10000001
 800c480:	04000120 	.word	0x04000120
 800c484:	0800dd15 	.word	0x0800dd15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	f040 8203 	bne.w	800c898 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c496:	f003 0310 	and.w	r3, r3, #16
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 81fc 	beq.w	800c898 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4a4:	f003 0310 	and.w	r3, r3, #16
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 81f5 	beq.w	800c898 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2210      	movs	r2, #16
 800c4b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4c0:	2b40      	cmp	r3, #64	@ 0x40
 800c4c2:	f040 816d 	bne.w	800c7a0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4aa4      	ldr	r2, [pc, #656]	@ (800c760 <HAL_UART_IRQHandler+0x59c>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d068      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4aa1      	ldr	r2, [pc, #644]	@ (800c764 <HAL_UART_IRQHandler+0x5a0>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d061      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a9f      	ldr	r2, [pc, #636]	@ (800c768 <HAL_UART_IRQHandler+0x5a4>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d05a      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a9c      	ldr	r2, [pc, #624]	@ (800c76c <HAL_UART_IRQHandler+0x5a8>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d053      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a9a      	ldr	r2, [pc, #616]	@ (800c770 <HAL_UART_IRQHandler+0x5ac>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d04c      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a97      	ldr	r2, [pc, #604]	@ (800c774 <HAL_UART_IRQHandler+0x5b0>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d045      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a95      	ldr	r2, [pc, #596]	@ (800c778 <HAL_UART_IRQHandler+0x5b4>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d03e      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a92      	ldr	r2, [pc, #584]	@ (800c77c <HAL_UART_IRQHandler+0x5b8>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d037      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a90      	ldr	r2, [pc, #576]	@ (800c780 <HAL_UART_IRQHandler+0x5bc>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d030      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a8d      	ldr	r2, [pc, #564]	@ (800c784 <HAL_UART_IRQHandler+0x5c0>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d029      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a8b      	ldr	r2, [pc, #556]	@ (800c788 <HAL_UART_IRQHandler+0x5c4>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d022      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a88      	ldr	r2, [pc, #544]	@ (800c78c <HAL_UART_IRQHandler+0x5c8>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d01b      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a86      	ldr	r2, [pc, #536]	@ (800c790 <HAL_UART_IRQHandler+0x5cc>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d014      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a83      	ldr	r2, [pc, #524]	@ (800c794 <HAL_UART_IRQHandler+0x5d0>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d00d      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a81      	ldr	r2, [pc, #516]	@ (800c798 <HAL_UART_IRQHandler+0x5d4>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d006      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x3e2>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a7e      	ldr	r2, [pc, #504]	@ (800c79c <HAL_UART_IRQHandler+0x5d8>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d106      	bne.n	800c5b4 <HAL_UART_IRQHandler+0x3f0>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	e005      	b.n	800c5c0 <HAL_UART_IRQHandler+0x3fc>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c5c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 80ad 	beq.w	800c728 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	f080 80a5 	bcs.w	800c728 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c5e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5ee:	69db      	ldr	r3, [r3, #28]
 800c5f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5f4:	f000 8087 	beq.w	800c706 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c60c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	461a      	mov	r2, r3
 800c61e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c622:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c626:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c62e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c632:	e841 2300 	strex	r3, r2, [r1]
 800c636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c63a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1da      	bne.n	800c5f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c654:	f023 0301 	bic.w	r3, r3, #1
 800c658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3308      	adds	r3, #8
 800c662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c666:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c66a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c66e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c672:	e841 2300 	strex	r3, r2, [r1]
 800c676:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1e1      	bne.n	800c642 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3308      	adds	r3, #8
 800c684:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c68e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3308      	adds	r3, #8
 800c69e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c6a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c6a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c6a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c6aa:	e841 2300 	strex	r3, r2, [r1]
 800c6ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c6b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e3      	bne.n	800c67e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6cc:	e853 3f00 	ldrex	r3, [r3]
 800c6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c6d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6d4:	f023 0310 	bic.w	r3, r3, #16
 800c6d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6ee:	e841 2300 	strex	r3, r2, [r1]
 800c6f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c6f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1e4      	bne.n	800c6c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c700:	4618      	mov	r0, r3
 800c702:	f7f8 ff59 	bl	80055b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2202      	movs	r2, #2
 800c70a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c718:	b29b      	uxth	r3, r3
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f92f 	bl	800c984 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c726:	e119      	b.n	800c95c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c72e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c732:	429a      	cmp	r2, r3
 800c734:	f040 8112 	bne.w	800c95c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c744:	f040 810a 	bne.w	800c95c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2202      	movs	r2, #2
 800c74c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f914 	bl	800c984 <HAL_UARTEx_RxEventCallback>
      return;
 800c75c:	e0fe      	b.n	800c95c <HAL_UART_IRQHandler+0x798>
 800c75e:	bf00      	nop
 800c760:	40020010 	.word	0x40020010
 800c764:	40020028 	.word	0x40020028
 800c768:	40020040 	.word	0x40020040
 800c76c:	40020058 	.word	0x40020058
 800c770:	40020070 	.word	0x40020070
 800c774:	40020088 	.word	0x40020088
 800c778:	400200a0 	.word	0x400200a0
 800c77c:	400200b8 	.word	0x400200b8
 800c780:	40020410 	.word	0x40020410
 800c784:	40020428 	.word	0x40020428
 800c788:	40020440 	.word	0x40020440
 800c78c:	40020458 	.word	0x40020458
 800c790:	40020470 	.word	0x40020470
 800c794:	40020488 	.word	0x40020488
 800c798:	400204a0 	.word	0x400204a0
 800c79c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 80cf 	beq.w	800c960 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800c7c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80ca 	beq.w	800c960 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c7e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7f0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7f6:	e841 2300 	strex	r3, r2, [r1]
 800c7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1e4      	bne.n	800c7cc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3308      	adds	r3, #8
 800c808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80c:	e853 3f00 	ldrex	r3, [r3]
 800c810:	623b      	str	r3, [r7, #32]
   return(result);
 800c812:	6a3a      	ldr	r2, [r7, #32]
 800c814:	4b55      	ldr	r3, [pc, #340]	@ (800c96c <HAL_UART_IRQHandler+0x7a8>)
 800c816:	4013      	ands	r3, r2
 800c818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3308      	adds	r3, #8
 800c822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c826:	633a      	str	r2, [r7, #48]	@ 0x30
 800c828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c82c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c82e:	e841 2300 	strex	r3, r2, [r1]
 800c832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1e3      	bne.n	800c802 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2220      	movs	r2, #32
 800c83e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	e853 3f00 	ldrex	r3, [r3]
 800c85a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f023 0310 	bic.w	r3, r3, #16
 800c862:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c870:	61fb      	str	r3, [r7, #28]
 800c872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c874:	69b9      	ldr	r1, [r7, #24]
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	e841 2300 	strex	r3, r2, [r1]
 800c87c:	617b      	str	r3, [r7, #20]
   return(result);
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e4      	bne.n	800c84e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2202      	movs	r2, #2
 800c888:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c88a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f877 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c896:	e063      	b.n	800c960 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c89c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00e      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x6fe>
 800c8a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d008      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c8b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f001 ff88 	bl	800e7d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8c0:	e051      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d014      	beq.n	800c8f8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c8ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d105      	bne.n	800c8e6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c8da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d008      	beq.n	800c8f8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d03a      	beq.n	800c964 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	4798      	blx	r3
    }
    return;
 800c8f6:	e035      	b.n	800c964 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c900:	2b00      	cmp	r3, #0
 800c902:	d009      	beq.n	800c918 <HAL_UART_IRQHandler+0x754>
 800c904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d003      	beq.n	800c918 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f001 fa11 	bl	800dd38 <UART_EndTransmit_IT>
    return;
 800c916:	e026      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c91c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c920:	2b00      	cmp	r3, #0
 800c922:	d009      	beq.n	800c938 <HAL_UART_IRQHandler+0x774>
 800c924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c928:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f001 ff61 	bl	800e7f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c936:	e016      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c93c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d010      	beq.n	800c966 <HAL_UART_IRQHandler+0x7a2>
 800c944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da0c      	bge.n	800c966 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 ff49 	bl	800e7e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c952:	e008      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c954:	bf00      	nop
 800c956:	e006      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
    return;
 800c958:	bf00      	nop
 800c95a:	e004      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c95c:	bf00      	nop
 800c95e:	e002      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c960:	bf00      	nop
 800c962:	e000      	b.n	800c966 <HAL_UART_IRQHandler+0x7a2>
    return;
 800c964:	bf00      	nop
  }
}
 800c966:	37e8      	adds	r7, #232	@ 0xe8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	effffffe 	.word	0xeffffffe

0800c970 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
	...

0800c9b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9bc:	b092      	sub	sp, #72	@ 0x48
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	689a      	ldr	r2, [r3, #8]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	69db      	ldr	r3, [r3, #28]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	4bbe      	ldr	r3, [pc, #760]	@ (800cce0 <UART_SetConfig+0x328>)
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	6812      	ldr	r2, [r2, #0]
 800c9ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c9f0:	430b      	orrs	r3, r1
 800c9f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	68da      	ldr	r2, [r3, #12]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	430a      	orrs	r2, r1
 800ca08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4ab3      	ldr	r2, [pc, #716]	@ (800cce4 <UART_SetConfig+0x32c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d004      	beq.n	800ca24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca20:	4313      	orrs	r3, r2
 800ca22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689a      	ldr	r2, [r3, #8]
 800ca2a:	4baf      	ldr	r3, [pc, #700]	@ (800cce8 <UART_SetConfig+0x330>)
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	6812      	ldr	r2, [r2, #0]
 800ca32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca34:	430b      	orrs	r3, r1
 800ca36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3e:	f023 010f 	bic.w	r1, r3, #15
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	430a      	orrs	r2, r1
 800ca4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4aa6      	ldr	r2, [pc, #664]	@ (800ccec <UART_SetConfig+0x334>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d177      	bne.n	800cb48 <UART_SetConfig+0x190>
 800ca58:	4ba5      	ldr	r3, [pc, #660]	@ (800ccf0 <UART_SetConfig+0x338>)
 800ca5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca60:	2b28      	cmp	r3, #40	@ 0x28
 800ca62:	d86d      	bhi.n	800cb40 <UART_SetConfig+0x188>
 800ca64:	a201      	add	r2, pc, #4	@ (adr r2, 800ca6c <UART_SetConfig+0xb4>)
 800ca66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6a:	bf00      	nop
 800ca6c:	0800cb11 	.word	0x0800cb11
 800ca70:	0800cb41 	.word	0x0800cb41
 800ca74:	0800cb41 	.word	0x0800cb41
 800ca78:	0800cb41 	.word	0x0800cb41
 800ca7c:	0800cb41 	.word	0x0800cb41
 800ca80:	0800cb41 	.word	0x0800cb41
 800ca84:	0800cb41 	.word	0x0800cb41
 800ca88:	0800cb41 	.word	0x0800cb41
 800ca8c:	0800cb19 	.word	0x0800cb19
 800ca90:	0800cb41 	.word	0x0800cb41
 800ca94:	0800cb41 	.word	0x0800cb41
 800ca98:	0800cb41 	.word	0x0800cb41
 800ca9c:	0800cb41 	.word	0x0800cb41
 800caa0:	0800cb41 	.word	0x0800cb41
 800caa4:	0800cb41 	.word	0x0800cb41
 800caa8:	0800cb41 	.word	0x0800cb41
 800caac:	0800cb21 	.word	0x0800cb21
 800cab0:	0800cb41 	.word	0x0800cb41
 800cab4:	0800cb41 	.word	0x0800cb41
 800cab8:	0800cb41 	.word	0x0800cb41
 800cabc:	0800cb41 	.word	0x0800cb41
 800cac0:	0800cb41 	.word	0x0800cb41
 800cac4:	0800cb41 	.word	0x0800cb41
 800cac8:	0800cb41 	.word	0x0800cb41
 800cacc:	0800cb29 	.word	0x0800cb29
 800cad0:	0800cb41 	.word	0x0800cb41
 800cad4:	0800cb41 	.word	0x0800cb41
 800cad8:	0800cb41 	.word	0x0800cb41
 800cadc:	0800cb41 	.word	0x0800cb41
 800cae0:	0800cb41 	.word	0x0800cb41
 800cae4:	0800cb41 	.word	0x0800cb41
 800cae8:	0800cb41 	.word	0x0800cb41
 800caec:	0800cb31 	.word	0x0800cb31
 800caf0:	0800cb41 	.word	0x0800cb41
 800caf4:	0800cb41 	.word	0x0800cb41
 800caf8:	0800cb41 	.word	0x0800cb41
 800cafc:	0800cb41 	.word	0x0800cb41
 800cb00:	0800cb41 	.word	0x0800cb41
 800cb04:	0800cb41 	.word	0x0800cb41
 800cb08:	0800cb41 	.word	0x0800cb41
 800cb0c:	0800cb39 	.word	0x0800cb39
 800cb10:	2301      	movs	r3, #1
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb16:	e326      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb18:	2304      	movs	r3, #4
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1e:	e322      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb20:	2308      	movs	r3, #8
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb26:	e31e      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2e:	e31a      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb30:	2320      	movs	r3, #32
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb36:	e316      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb38:	2340      	movs	r3, #64	@ 0x40
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3e:	e312      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb40:	2380      	movs	r3, #128	@ 0x80
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb46:	e30e      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a69      	ldr	r2, [pc, #420]	@ (800ccf4 <UART_SetConfig+0x33c>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d130      	bne.n	800cbb4 <UART_SetConfig+0x1fc>
 800cb52:	4b67      	ldr	r3, [pc, #412]	@ (800ccf0 <UART_SetConfig+0x338>)
 800cb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb56:	f003 0307 	and.w	r3, r3, #7
 800cb5a:	2b05      	cmp	r3, #5
 800cb5c:	d826      	bhi.n	800cbac <UART_SetConfig+0x1f4>
 800cb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb64 <UART_SetConfig+0x1ac>)
 800cb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb64:	0800cb7d 	.word	0x0800cb7d
 800cb68:	0800cb85 	.word	0x0800cb85
 800cb6c:	0800cb8d 	.word	0x0800cb8d
 800cb70:	0800cb95 	.word	0x0800cb95
 800cb74:	0800cb9d 	.word	0x0800cb9d
 800cb78:	0800cba5 	.word	0x0800cba5
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb82:	e2f0      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb84:	2304      	movs	r3, #4
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8a:	e2ec      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb8c:	2308      	movs	r3, #8
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb92:	e2e8      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb94:	2310      	movs	r3, #16
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9a:	e2e4      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cb9c:	2320      	movs	r3, #32
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba2:	e2e0      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cba4:	2340      	movs	r3, #64	@ 0x40
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbaa:	e2dc      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cbac:	2380      	movs	r3, #128	@ 0x80
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb2:	e2d8      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a4f      	ldr	r2, [pc, #316]	@ (800ccf8 <UART_SetConfig+0x340>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d130      	bne.n	800cc20 <UART_SetConfig+0x268>
 800cbbe:	4b4c      	ldr	r3, [pc, #304]	@ (800ccf0 <UART_SetConfig+0x338>)
 800cbc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbc2:	f003 0307 	and.w	r3, r3, #7
 800cbc6:	2b05      	cmp	r3, #5
 800cbc8:	d826      	bhi.n	800cc18 <UART_SetConfig+0x260>
 800cbca:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd0 <UART_SetConfig+0x218>)
 800cbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd0:	0800cbe9 	.word	0x0800cbe9
 800cbd4:	0800cbf1 	.word	0x0800cbf1
 800cbd8:	0800cbf9 	.word	0x0800cbf9
 800cbdc:	0800cc01 	.word	0x0800cc01
 800cbe0:	0800cc09 	.word	0x0800cc09
 800cbe4:	0800cc11 	.word	0x0800cc11
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbee:	e2ba      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cbf0:	2304      	movs	r3, #4
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf6:	e2b6      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cbf8:	2308      	movs	r3, #8
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfe:	e2b2      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc00:	2310      	movs	r3, #16
 800cc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc06:	e2ae      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc08:	2320      	movs	r3, #32
 800cc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0e:	e2aa      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc10:	2340      	movs	r3, #64	@ 0x40
 800cc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc16:	e2a6      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc18:	2380      	movs	r3, #128	@ 0x80
 800cc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1e:	e2a2      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a35      	ldr	r2, [pc, #212]	@ (800ccfc <UART_SetConfig+0x344>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d130      	bne.n	800cc8c <UART_SetConfig+0x2d4>
 800cc2a:	4b31      	ldr	r3, [pc, #196]	@ (800ccf0 <UART_SetConfig+0x338>)
 800cc2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc2e:	f003 0307 	and.w	r3, r3, #7
 800cc32:	2b05      	cmp	r3, #5
 800cc34:	d826      	bhi.n	800cc84 <UART_SetConfig+0x2cc>
 800cc36:	a201      	add	r2, pc, #4	@ (adr r2, 800cc3c <UART_SetConfig+0x284>)
 800cc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3c:	0800cc55 	.word	0x0800cc55
 800cc40:	0800cc5d 	.word	0x0800cc5d
 800cc44:	0800cc65 	.word	0x0800cc65
 800cc48:	0800cc6d 	.word	0x0800cc6d
 800cc4c:	0800cc75 	.word	0x0800cc75
 800cc50:	0800cc7d 	.word	0x0800cc7d
 800cc54:	2300      	movs	r3, #0
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5a:	e284      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc62:	e280      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc64:	2308      	movs	r3, #8
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6a:	e27c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc6c:	2310      	movs	r3, #16
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc72:	e278      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc74:	2320      	movs	r3, #32
 800cc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7a:	e274      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc7c:	2340      	movs	r3, #64	@ 0x40
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc82:	e270      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc84:	2380      	movs	r3, #128	@ 0x80
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8a:	e26c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a1b      	ldr	r2, [pc, #108]	@ (800cd00 <UART_SetConfig+0x348>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d142      	bne.n	800cd1c <UART_SetConfig+0x364>
 800cc96:	4b16      	ldr	r3, [pc, #88]	@ (800ccf0 <UART_SetConfig+0x338>)
 800cc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9a:	f003 0307 	and.w	r3, r3, #7
 800cc9e:	2b05      	cmp	r3, #5
 800cca0:	d838      	bhi.n	800cd14 <UART_SetConfig+0x35c>
 800cca2:	a201      	add	r2, pc, #4	@ (adr r2, 800cca8 <UART_SetConfig+0x2f0>)
 800cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca8:	0800ccc1 	.word	0x0800ccc1
 800ccac:	0800ccc9 	.word	0x0800ccc9
 800ccb0:	0800ccd1 	.word	0x0800ccd1
 800ccb4:	0800ccd9 	.word	0x0800ccd9
 800ccb8:	0800cd05 	.word	0x0800cd05
 800ccbc:	0800cd0d 	.word	0x0800cd0d
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc6:	e24e      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ccc8:	2304      	movs	r3, #4
 800ccca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccce:	e24a      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ccd0:	2308      	movs	r3, #8
 800ccd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd6:	e246      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ccd8:	2310      	movs	r3, #16
 800ccda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccde:	e242      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cce0:	cfff69f3 	.word	0xcfff69f3
 800cce4:	58000c00 	.word	0x58000c00
 800cce8:	11fff4ff 	.word	0x11fff4ff
 800ccec:	40011000 	.word	0x40011000
 800ccf0:	58024400 	.word	0x58024400
 800ccf4:	40004400 	.word	0x40004400
 800ccf8:	40004800 	.word	0x40004800
 800ccfc:	40004c00 	.word	0x40004c00
 800cd00:	40005000 	.word	0x40005000
 800cd04:	2320      	movs	r3, #32
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0a:	e22c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cd0c:	2340      	movs	r3, #64	@ 0x40
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd12:	e228      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cd14:	2380      	movs	r3, #128	@ 0x80
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1a:	e224      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4ab1      	ldr	r2, [pc, #708]	@ (800cfe8 <UART_SetConfig+0x630>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d176      	bne.n	800ce14 <UART_SetConfig+0x45c>
 800cd26:	4bb1      	ldr	r3, [pc, #708]	@ (800cfec <UART_SetConfig+0x634>)
 800cd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd2e:	2b28      	cmp	r3, #40	@ 0x28
 800cd30:	d86c      	bhi.n	800ce0c <UART_SetConfig+0x454>
 800cd32:	a201      	add	r2, pc, #4	@ (adr r2, 800cd38 <UART_SetConfig+0x380>)
 800cd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd38:	0800cddd 	.word	0x0800cddd
 800cd3c:	0800ce0d 	.word	0x0800ce0d
 800cd40:	0800ce0d 	.word	0x0800ce0d
 800cd44:	0800ce0d 	.word	0x0800ce0d
 800cd48:	0800ce0d 	.word	0x0800ce0d
 800cd4c:	0800ce0d 	.word	0x0800ce0d
 800cd50:	0800ce0d 	.word	0x0800ce0d
 800cd54:	0800ce0d 	.word	0x0800ce0d
 800cd58:	0800cde5 	.word	0x0800cde5
 800cd5c:	0800ce0d 	.word	0x0800ce0d
 800cd60:	0800ce0d 	.word	0x0800ce0d
 800cd64:	0800ce0d 	.word	0x0800ce0d
 800cd68:	0800ce0d 	.word	0x0800ce0d
 800cd6c:	0800ce0d 	.word	0x0800ce0d
 800cd70:	0800ce0d 	.word	0x0800ce0d
 800cd74:	0800ce0d 	.word	0x0800ce0d
 800cd78:	0800cded 	.word	0x0800cded
 800cd7c:	0800ce0d 	.word	0x0800ce0d
 800cd80:	0800ce0d 	.word	0x0800ce0d
 800cd84:	0800ce0d 	.word	0x0800ce0d
 800cd88:	0800ce0d 	.word	0x0800ce0d
 800cd8c:	0800ce0d 	.word	0x0800ce0d
 800cd90:	0800ce0d 	.word	0x0800ce0d
 800cd94:	0800ce0d 	.word	0x0800ce0d
 800cd98:	0800cdf5 	.word	0x0800cdf5
 800cd9c:	0800ce0d 	.word	0x0800ce0d
 800cda0:	0800ce0d 	.word	0x0800ce0d
 800cda4:	0800ce0d 	.word	0x0800ce0d
 800cda8:	0800ce0d 	.word	0x0800ce0d
 800cdac:	0800ce0d 	.word	0x0800ce0d
 800cdb0:	0800ce0d 	.word	0x0800ce0d
 800cdb4:	0800ce0d 	.word	0x0800ce0d
 800cdb8:	0800cdfd 	.word	0x0800cdfd
 800cdbc:	0800ce0d 	.word	0x0800ce0d
 800cdc0:	0800ce0d 	.word	0x0800ce0d
 800cdc4:	0800ce0d 	.word	0x0800ce0d
 800cdc8:	0800ce0d 	.word	0x0800ce0d
 800cdcc:	0800ce0d 	.word	0x0800ce0d
 800cdd0:	0800ce0d 	.word	0x0800ce0d
 800cdd4:	0800ce0d 	.word	0x0800ce0d
 800cdd8:	0800ce05 	.word	0x0800ce05
 800cddc:	2301      	movs	r3, #1
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde2:	e1c0      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cde4:	2304      	movs	r3, #4
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdea:	e1bc      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cdec:	2308      	movs	r3, #8
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e1b8      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfa:	e1b4      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cdfc:	2320      	movs	r3, #32
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce02:	e1b0      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce04:	2340      	movs	r3, #64	@ 0x40
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0a:	e1ac      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce0c:	2380      	movs	r3, #128	@ 0x80
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce12:	e1a8      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a75      	ldr	r2, [pc, #468]	@ (800cff0 <UART_SetConfig+0x638>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d130      	bne.n	800ce80 <UART_SetConfig+0x4c8>
 800ce1e:	4b73      	ldr	r3, [pc, #460]	@ (800cfec <UART_SetConfig+0x634>)
 800ce20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce22:	f003 0307 	and.w	r3, r3, #7
 800ce26:	2b05      	cmp	r3, #5
 800ce28:	d826      	bhi.n	800ce78 <UART_SetConfig+0x4c0>
 800ce2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce30 <UART_SetConfig+0x478>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce49 	.word	0x0800ce49
 800ce34:	0800ce51 	.word	0x0800ce51
 800ce38:	0800ce59 	.word	0x0800ce59
 800ce3c:	0800ce61 	.word	0x0800ce61
 800ce40:	0800ce69 	.word	0x0800ce69
 800ce44:	0800ce71 	.word	0x0800ce71
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4e:	e18a      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce50:	2304      	movs	r3, #4
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce56:	e186      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce58:	2308      	movs	r3, #8
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5e:	e182      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce60:	2310      	movs	r3, #16
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce66:	e17e      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce68:	2320      	movs	r3, #32
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6e:	e17a      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce70:	2340      	movs	r3, #64	@ 0x40
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce76:	e176      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce78:	2380      	movs	r3, #128	@ 0x80
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7e:	e172      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a5b      	ldr	r2, [pc, #364]	@ (800cff4 <UART_SetConfig+0x63c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d130      	bne.n	800ceec <UART_SetConfig+0x534>
 800ce8a:	4b58      	ldr	r3, [pc, #352]	@ (800cfec <UART_SetConfig+0x634>)
 800ce8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce8e:	f003 0307 	and.w	r3, r3, #7
 800ce92:	2b05      	cmp	r3, #5
 800ce94:	d826      	bhi.n	800cee4 <UART_SetConfig+0x52c>
 800ce96:	a201      	add	r2, pc, #4	@ (adr r2, 800ce9c <UART_SetConfig+0x4e4>)
 800ce98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9c:	0800ceb5 	.word	0x0800ceb5
 800cea0:	0800cebd 	.word	0x0800cebd
 800cea4:	0800cec5 	.word	0x0800cec5
 800cea8:	0800cecd 	.word	0x0800cecd
 800ceac:	0800ced5 	.word	0x0800ced5
 800ceb0:	0800cedd 	.word	0x0800cedd
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceba:	e154      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cebc:	2304      	movs	r3, #4
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec2:	e150      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cec4:	2308      	movs	r3, #8
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceca:	e14c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cecc:	2310      	movs	r3, #16
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced2:	e148      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ced4:	2320      	movs	r3, #32
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceda:	e144      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cedc:	2340      	movs	r3, #64	@ 0x40
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee2:	e140      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cee4:	2380      	movs	r3, #128	@ 0x80
 800cee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceea:	e13c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a41      	ldr	r2, [pc, #260]	@ (800cff8 <UART_SetConfig+0x640>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	f040 8082 	bne.w	800cffc <UART_SetConfig+0x644>
 800cef8:	4b3c      	ldr	r3, [pc, #240]	@ (800cfec <UART_SetConfig+0x634>)
 800cefa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cefc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf00:	2b28      	cmp	r3, #40	@ 0x28
 800cf02:	d86d      	bhi.n	800cfe0 <UART_SetConfig+0x628>
 800cf04:	a201      	add	r2, pc, #4	@ (adr r2, 800cf0c <UART_SetConfig+0x554>)
 800cf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0a:	bf00      	nop
 800cf0c:	0800cfb1 	.word	0x0800cfb1
 800cf10:	0800cfe1 	.word	0x0800cfe1
 800cf14:	0800cfe1 	.word	0x0800cfe1
 800cf18:	0800cfe1 	.word	0x0800cfe1
 800cf1c:	0800cfe1 	.word	0x0800cfe1
 800cf20:	0800cfe1 	.word	0x0800cfe1
 800cf24:	0800cfe1 	.word	0x0800cfe1
 800cf28:	0800cfe1 	.word	0x0800cfe1
 800cf2c:	0800cfb9 	.word	0x0800cfb9
 800cf30:	0800cfe1 	.word	0x0800cfe1
 800cf34:	0800cfe1 	.word	0x0800cfe1
 800cf38:	0800cfe1 	.word	0x0800cfe1
 800cf3c:	0800cfe1 	.word	0x0800cfe1
 800cf40:	0800cfe1 	.word	0x0800cfe1
 800cf44:	0800cfe1 	.word	0x0800cfe1
 800cf48:	0800cfe1 	.word	0x0800cfe1
 800cf4c:	0800cfc1 	.word	0x0800cfc1
 800cf50:	0800cfe1 	.word	0x0800cfe1
 800cf54:	0800cfe1 	.word	0x0800cfe1
 800cf58:	0800cfe1 	.word	0x0800cfe1
 800cf5c:	0800cfe1 	.word	0x0800cfe1
 800cf60:	0800cfe1 	.word	0x0800cfe1
 800cf64:	0800cfe1 	.word	0x0800cfe1
 800cf68:	0800cfe1 	.word	0x0800cfe1
 800cf6c:	0800cfc9 	.word	0x0800cfc9
 800cf70:	0800cfe1 	.word	0x0800cfe1
 800cf74:	0800cfe1 	.word	0x0800cfe1
 800cf78:	0800cfe1 	.word	0x0800cfe1
 800cf7c:	0800cfe1 	.word	0x0800cfe1
 800cf80:	0800cfe1 	.word	0x0800cfe1
 800cf84:	0800cfe1 	.word	0x0800cfe1
 800cf88:	0800cfe1 	.word	0x0800cfe1
 800cf8c:	0800cfd1 	.word	0x0800cfd1
 800cf90:	0800cfe1 	.word	0x0800cfe1
 800cf94:	0800cfe1 	.word	0x0800cfe1
 800cf98:	0800cfe1 	.word	0x0800cfe1
 800cf9c:	0800cfe1 	.word	0x0800cfe1
 800cfa0:	0800cfe1 	.word	0x0800cfe1
 800cfa4:	0800cfe1 	.word	0x0800cfe1
 800cfa8:	0800cfe1 	.word	0x0800cfe1
 800cfac:	0800cfd9 	.word	0x0800cfd9
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e0d6      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfb8:	2304      	movs	r3, #4
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e0d2      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfc0:	2308      	movs	r3, #8
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc6:	e0ce      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfc8:	2310      	movs	r3, #16
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfce:	e0ca      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfd0:	2320      	movs	r3, #32
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfd6:	e0c6      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfd8:	2340      	movs	r3, #64	@ 0x40
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfde:	e0c2      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfe0:	2380      	movs	r3, #128	@ 0x80
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfe6:	e0be      	b.n	800d166 <UART_SetConfig+0x7ae>
 800cfe8:	40011400 	.word	0x40011400
 800cfec:	58024400 	.word	0x58024400
 800cff0:	40007800 	.word	0x40007800
 800cff4:	40007c00 	.word	0x40007c00
 800cff8:	40011800 	.word	0x40011800
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4aad      	ldr	r2, [pc, #692]	@ (800d2b8 <UART_SetConfig+0x900>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d176      	bne.n	800d0f4 <UART_SetConfig+0x73c>
 800d006:	4bad      	ldr	r3, [pc, #692]	@ (800d2bc <UART_SetConfig+0x904>)
 800d008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d00a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d00e:	2b28      	cmp	r3, #40	@ 0x28
 800d010:	d86c      	bhi.n	800d0ec <UART_SetConfig+0x734>
 800d012:	a201      	add	r2, pc, #4	@ (adr r2, 800d018 <UART_SetConfig+0x660>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d0bd 	.word	0x0800d0bd
 800d01c:	0800d0ed 	.word	0x0800d0ed
 800d020:	0800d0ed 	.word	0x0800d0ed
 800d024:	0800d0ed 	.word	0x0800d0ed
 800d028:	0800d0ed 	.word	0x0800d0ed
 800d02c:	0800d0ed 	.word	0x0800d0ed
 800d030:	0800d0ed 	.word	0x0800d0ed
 800d034:	0800d0ed 	.word	0x0800d0ed
 800d038:	0800d0c5 	.word	0x0800d0c5
 800d03c:	0800d0ed 	.word	0x0800d0ed
 800d040:	0800d0ed 	.word	0x0800d0ed
 800d044:	0800d0ed 	.word	0x0800d0ed
 800d048:	0800d0ed 	.word	0x0800d0ed
 800d04c:	0800d0ed 	.word	0x0800d0ed
 800d050:	0800d0ed 	.word	0x0800d0ed
 800d054:	0800d0ed 	.word	0x0800d0ed
 800d058:	0800d0cd 	.word	0x0800d0cd
 800d05c:	0800d0ed 	.word	0x0800d0ed
 800d060:	0800d0ed 	.word	0x0800d0ed
 800d064:	0800d0ed 	.word	0x0800d0ed
 800d068:	0800d0ed 	.word	0x0800d0ed
 800d06c:	0800d0ed 	.word	0x0800d0ed
 800d070:	0800d0ed 	.word	0x0800d0ed
 800d074:	0800d0ed 	.word	0x0800d0ed
 800d078:	0800d0d5 	.word	0x0800d0d5
 800d07c:	0800d0ed 	.word	0x0800d0ed
 800d080:	0800d0ed 	.word	0x0800d0ed
 800d084:	0800d0ed 	.word	0x0800d0ed
 800d088:	0800d0ed 	.word	0x0800d0ed
 800d08c:	0800d0ed 	.word	0x0800d0ed
 800d090:	0800d0ed 	.word	0x0800d0ed
 800d094:	0800d0ed 	.word	0x0800d0ed
 800d098:	0800d0dd 	.word	0x0800d0dd
 800d09c:	0800d0ed 	.word	0x0800d0ed
 800d0a0:	0800d0ed 	.word	0x0800d0ed
 800d0a4:	0800d0ed 	.word	0x0800d0ed
 800d0a8:	0800d0ed 	.word	0x0800d0ed
 800d0ac:	0800d0ed 	.word	0x0800d0ed
 800d0b0:	0800d0ed 	.word	0x0800d0ed
 800d0b4:	0800d0ed 	.word	0x0800d0ed
 800d0b8:	0800d0e5 	.word	0x0800d0e5
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c2:	e050      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e04c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e048      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e044      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0dc:	2320      	movs	r3, #32
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e040      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0e4:	2340      	movs	r3, #64	@ 0x40
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e03c      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0ec:	2380      	movs	r3, #128	@ 0x80
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e038      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a71      	ldr	r2, [pc, #452]	@ (800d2c0 <UART_SetConfig+0x908>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d130      	bne.n	800d160 <UART_SetConfig+0x7a8>
 800d0fe:	4b6f      	ldr	r3, [pc, #444]	@ (800d2bc <UART_SetConfig+0x904>)
 800d100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	2b05      	cmp	r3, #5
 800d108:	d826      	bhi.n	800d158 <UART_SetConfig+0x7a0>
 800d10a:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <UART_SetConfig+0x758>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d131 	.word	0x0800d131
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d141 	.word	0x0800d141
 800d120:	0800d149 	.word	0x0800d149
 800d124:	0800d151 	.word	0x0800d151
 800d128:	2302      	movs	r3, #2
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12e:	e01a      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d130:	2304      	movs	r3, #4
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d136:	e016      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13e:	e012      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d140:	2310      	movs	r3, #16
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d146:	e00e      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d148:	2320      	movs	r3, #32
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14e:	e00a      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d150:	2340      	movs	r3, #64	@ 0x40
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d156:	e006      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d158:	2380      	movs	r3, #128	@ 0x80
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15e:	e002      	b.n	800d166 <UART_SetConfig+0x7ae>
 800d160:	2380      	movs	r3, #128	@ 0x80
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a55      	ldr	r2, [pc, #340]	@ (800d2c0 <UART_SetConfig+0x908>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	f040 80f8 	bne.w	800d362 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d172:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d176:	2b20      	cmp	r3, #32
 800d178:	dc46      	bgt.n	800d208 <UART_SetConfig+0x850>
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	db75      	blt.n	800d26a <UART_SetConfig+0x8b2>
 800d17e:	3b02      	subs	r3, #2
 800d180:	2b1e      	cmp	r3, #30
 800d182:	d872      	bhi.n	800d26a <UART_SetConfig+0x8b2>
 800d184:	a201      	add	r2, pc, #4	@ (adr r2, 800d18c <UART_SetConfig+0x7d4>)
 800d186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18a:	bf00      	nop
 800d18c:	0800d20f 	.word	0x0800d20f
 800d190:	0800d26b 	.word	0x0800d26b
 800d194:	0800d217 	.word	0x0800d217
 800d198:	0800d26b 	.word	0x0800d26b
 800d19c:	0800d26b 	.word	0x0800d26b
 800d1a0:	0800d26b 	.word	0x0800d26b
 800d1a4:	0800d227 	.word	0x0800d227
 800d1a8:	0800d26b 	.word	0x0800d26b
 800d1ac:	0800d26b 	.word	0x0800d26b
 800d1b0:	0800d26b 	.word	0x0800d26b
 800d1b4:	0800d26b 	.word	0x0800d26b
 800d1b8:	0800d26b 	.word	0x0800d26b
 800d1bc:	0800d26b 	.word	0x0800d26b
 800d1c0:	0800d26b 	.word	0x0800d26b
 800d1c4:	0800d237 	.word	0x0800d237
 800d1c8:	0800d26b 	.word	0x0800d26b
 800d1cc:	0800d26b 	.word	0x0800d26b
 800d1d0:	0800d26b 	.word	0x0800d26b
 800d1d4:	0800d26b 	.word	0x0800d26b
 800d1d8:	0800d26b 	.word	0x0800d26b
 800d1dc:	0800d26b 	.word	0x0800d26b
 800d1e0:	0800d26b 	.word	0x0800d26b
 800d1e4:	0800d26b 	.word	0x0800d26b
 800d1e8:	0800d26b 	.word	0x0800d26b
 800d1ec:	0800d26b 	.word	0x0800d26b
 800d1f0:	0800d26b 	.word	0x0800d26b
 800d1f4:	0800d26b 	.word	0x0800d26b
 800d1f8:	0800d26b 	.word	0x0800d26b
 800d1fc:	0800d26b 	.word	0x0800d26b
 800d200:	0800d26b 	.word	0x0800d26b
 800d204:	0800d25d 	.word	0x0800d25d
 800d208:	2b40      	cmp	r3, #64	@ 0x40
 800d20a:	d02a      	beq.n	800d262 <UART_SetConfig+0x8aa>
 800d20c:	e02d      	b.n	800d26a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d20e:	f7fd fa0d 	bl	800a62c <HAL_RCCEx_GetD3PCLK1Freq>
 800d212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d214:	e02f      	b.n	800d276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fd fa1c 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d224:	e027      	b.n	800d276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d226:	f107 0318 	add.w	r3, r7, #24
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fd fb68 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d234:	e01f      	b.n	800d276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d236:	4b21      	ldr	r3, [pc, #132]	@ (800d2bc <UART_SetConfig+0x904>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 0320 	and.w	r3, r3, #32
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d009      	beq.n	800d256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d242:	4b1e      	ldr	r3, [pc, #120]	@ (800d2bc <UART_SetConfig+0x904>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	08db      	lsrs	r3, r3, #3
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2c4 <UART_SetConfig+0x90c>)
 800d24e:	fa22 f303 	lsr.w	r3, r2, r3
 800d252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d254:	e00f      	b.n	800d276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d256:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c4 <UART_SetConfig+0x90c>)
 800d258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d25a:	e00c      	b.n	800d276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d25c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2c8 <UART_SetConfig+0x910>)
 800d25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d260:	e009      	b.n	800d276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d268:	e005      	b.n	800d276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d26a:	2300      	movs	r3, #0
 800d26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 81ee 	beq.w	800d65a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d282:	4a12      	ldr	r2, [pc, #72]	@ (800d2cc <UART_SetConfig+0x914>)
 800d284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d288:	461a      	mov	r2, r3
 800d28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d290:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	4613      	mov	r3, r2
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4413      	add	r3, r2
 800d29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d305      	bcc.n	800d2ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d910      	bls.n	800d2d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d2b4:	e1d1      	b.n	800d65a <UART_SetConfig+0xca2>
 800d2b6:	bf00      	nop
 800d2b8:	40011c00 	.word	0x40011c00
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	58000c00 	.word	0x58000c00
 800d2c4:	03d09000 	.word	0x03d09000
 800d2c8:	003d0900 	.word	0x003d0900
 800d2cc:	0800f8dc 	.word	0x0800f8dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	60bb      	str	r3, [r7, #8]
 800d2d6:	60fa      	str	r2, [r7, #12]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2dc:	4ac0      	ldr	r2, [pc, #768]	@ (800d5e0 <UART_SetConfig+0xc28>)
 800d2de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	603b      	str	r3, [r7, #0]
 800d2e8:	607a      	str	r2, [r7, #4]
 800d2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2f2:	f7f3 f875 	bl	80003e0 <__aeabi_uldivmod>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	f04f 0200 	mov.w	r2, #0
 800d302:	f04f 0300 	mov.w	r3, #0
 800d306:	020b      	lsls	r3, r1, #8
 800d308:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d30c:	0202      	lsls	r2, r0, #8
 800d30e:	6979      	ldr	r1, [r7, #20]
 800d310:	6849      	ldr	r1, [r1, #4]
 800d312:	0849      	lsrs	r1, r1, #1
 800d314:	2000      	movs	r0, #0
 800d316:	460c      	mov	r4, r1
 800d318:	4605      	mov	r5, r0
 800d31a:	eb12 0804 	adds.w	r8, r2, r4
 800d31e:	eb43 0905 	adc.w	r9, r3, r5
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	469a      	mov	sl, r3
 800d32a:	4693      	mov	fp, r2
 800d32c:	4652      	mov	r2, sl
 800d32e:	465b      	mov	r3, fp
 800d330:	4640      	mov	r0, r8
 800d332:	4649      	mov	r1, r9
 800d334:	f7f3 f854 	bl	80003e0 <__aeabi_uldivmod>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4613      	mov	r3, r2
 800d33e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d346:	d308      	bcc.n	800d35a <UART_SetConfig+0x9a2>
 800d348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d34e:	d204      	bcs.n	800d35a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d356:	60da      	str	r2, [r3, #12]
 800d358:	e17f      	b.n	800d65a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d360:	e17b      	b.n	800d65a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d36a:	f040 80bd 	bne.w	800d4e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d36e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d372:	2b20      	cmp	r3, #32
 800d374:	dc48      	bgt.n	800d408 <UART_SetConfig+0xa50>
 800d376:	2b00      	cmp	r3, #0
 800d378:	db7b      	blt.n	800d472 <UART_SetConfig+0xaba>
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d879      	bhi.n	800d472 <UART_SetConfig+0xaba>
 800d37e:	a201      	add	r2, pc, #4	@ (adr r2, 800d384 <UART_SetConfig+0x9cc>)
 800d380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d384:	0800d40f 	.word	0x0800d40f
 800d388:	0800d417 	.word	0x0800d417
 800d38c:	0800d473 	.word	0x0800d473
 800d390:	0800d473 	.word	0x0800d473
 800d394:	0800d41f 	.word	0x0800d41f
 800d398:	0800d473 	.word	0x0800d473
 800d39c:	0800d473 	.word	0x0800d473
 800d3a0:	0800d473 	.word	0x0800d473
 800d3a4:	0800d42f 	.word	0x0800d42f
 800d3a8:	0800d473 	.word	0x0800d473
 800d3ac:	0800d473 	.word	0x0800d473
 800d3b0:	0800d473 	.word	0x0800d473
 800d3b4:	0800d473 	.word	0x0800d473
 800d3b8:	0800d473 	.word	0x0800d473
 800d3bc:	0800d473 	.word	0x0800d473
 800d3c0:	0800d473 	.word	0x0800d473
 800d3c4:	0800d43f 	.word	0x0800d43f
 800d3c8:	0800d473 	.word	0x0800d473
 800d3cc:	0800d473 	.word	0x0800d473
 800d3d0:	0800d473 	.word	0x0800d473
 800d3d4:	0800d473 	.word	0x0800d473
 800d3d8:	0800d473 	.word	0x0800d473
 800d3dc:	0800d473 	.word	0x0800d473
 800d3e0:	0800d473 	.word	0x0800d473
 800d3e4:	0800d473 	.word	0x0800d473
 800d3e8:	0800d473 	.word	0x0800d473
 800d3ec:	0800d473 	.word	0x0800d473
 800d3f0:	0800d473 	.word	0x0800d473
 800d3f4:	0800d473 	.word	0x0800d473
 800d3f8:	0800d473 	.word	0x0800d473
 800d3fc:	0800d473 	.word	0x0800d473
 800d400:	0800d473 	.word	0x0800d473
 800d404:	0800d465 	.word	0x0800d465
 800d408:	2b40      	cmp	r3, #64	@ 0x40
 800d40a:	d02e      	beq.n	800d46a <UART_SetConfig+0xab2>
 800d40c:	e031      	b.n	800d472 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d40e:	f7fb fa6f 	bl	80088f0 <HAL_RCC_GetPCLK1Freq>
 800d412:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d414:	e033      	b.n	800d47e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d416:	f7fb fa81 	bl	800891c <HAL_RCC_GetPCLK2Freq>
 800d41a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d41c:	e02f      	b.n	800d47e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d41e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d422:	4618      	mov	r0, r3
 800d424:	f7fd f918 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d42c:	e027      	b.n	800d47e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d42e:	f107 0318 	add.w	r3, r7, #24
 800d432:	4618      	mov	r0, r3
 800d434:	f7fd fa64 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d43c:	e01f      	b.n	800d47e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d43e:	4b69      	ldr	r3, [pc, #420]	@ (800d5e4 <UART_SetConfig+0xc2c>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 0320 	and.w	r3, r3, #32
 800d446:	2b00      	cmp	r3, #0
 800d448:	d009      	beq.n	800d45e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d44a:	4b66      	ldr	r3, [pc, #408]	@ (800d5e4 <UART_SetConfig+0xc2c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	08db      	lsrs	r3, r3, #3
 800d450:	f003 0303 	and.w	r3, r3, #3
 800d454:	4a64      	ldr	r2, [pc, #400]	@ (800d5e8 <UART_SetConfig+0xc30>)
 800d456:	fa22 f303 	lsr.w	r3, r2, r3
 800d45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d45c:	e00f      	b.n	800d47e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d45e:	4b62      	ldr	r3, [pc, #392]	@ (800d5e8 <UART_SetConfig+0xc30>)
 800d460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d462:	e00c      	b.n	800d47e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d464:	4b61      	ldr	r3, [pc, #388]	@ (800d5ec <UART_SetConfig+0xc34>)
 800d466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d468:	e009      	b.n	800d47e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d46a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d470:	e005      	b.n	800d47e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d472:	2300      	movs	r3, #0
 800d474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d47c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 80ea 	beq.w	800d65a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d48a:	4a55      	ldr	r2, [pc, #340]	@ (800d5e0 <UART_SetConfig+0xc28>)
 800d48c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d490:	461a      	mov	r2, r3
 800d492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d494:	fbb3 f3f2 	udiv	r3, r3, r2
 800d498:	005a      	lsls	r2, r3, #1
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	085b      	lsrs	r3, r3, #1
 800d4a0:	441a      	add	r2, r3
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ae:	2b0f      	cmp	r3, #15
 800d4b0:	d916      	bls.n	800d4e0 <UART_SetConfig+0xb28>
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4b8:	d212      	bcs.n	800d4e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f023 030f 	bic.w	r3, r3, #15
 800d4c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c6:	085b      	lsrs	r3, r3, #1
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	f003 0307 	and.w	r3, r3, #7
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d4dc:	60da      	str	r2, [r3, #12]
 800d4de:	e0bc      	b.n	800d65a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4e6:	e0b8      	b.n	800d65a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d4e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d4ec:	2b20      	cmp	r3, #32
 800d4ee:	dc4b      	bgt.n	800d588 <UART_SetConfig+0xbd0>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f2c0 8087 	blt.w	800d604 <UART_SetConfig+0xc4c>
 800d4f6:	2b20      	cmp	r3, #32
 800d4f8:	f200 8084 	bhi.w	800d604 <UART_SetConfig+0xc4c>
 800d4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d504 <UART_SetConfig+0xb4c>)
 800d4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d502:	bf00      	nop
 800d504:	0800d58f 	.word	0x0800d58f
 800d508:	0800d597 	.word	0x0800d597
 800d50c:	0800d605 	.word	0x0800d605
 800d510:	0800d605 	.word	0x0800d605
 800d514:	0800d59f 	.word	0x0800d59f
 800d518:	0800d605 	.word	0x0800d605
 800d51c:	0800d605 	.word	0x0800d605
 800d520:	0800d605 	.word	0x0800d605
 800d524:	0800d5af 	.word	0x0800d5af
 800d528:	0800d605 	.word	0x0800d605
 800d52c:	0800d605 	.word	0x0800d605
 800d530:	0800d605 	.word	0x0800d605
 800d534:	0800d605 	.word	0x0800d605
 800d538:	0800d605 	.word	0x0800d605
 800d53c:	0800d605 	.word	0x0800d605
 800d540:	0800d605 	.word	0x0800d605
 800d544:	0800d5bf 	.word	0x0800d5bf
 800d548:	0800d605 	.word	0x0800d605
 800d54c:	0800d605 	.word	0x0800d605
 800d550:	0800d605 	.word	0x0800d605
 800d554:	0800d605 	.word	0x0800d605
 800d558:	0800d605 	.word	0x0800d605
 800d55c:	0800d605 	.word	0x0800d605
 800d560:	0800d605 	.word	0x0800d605
 800d564:	0800d605 	.word	0x0800d605
 800d568:	0800d605 	.word	0x0800d605
 800d56c:	0800d605 	.word	0x0800d605
 800d570:	0800d605 	.word	0x0800d605
 800d574:	0800d605 	.word	0x0800d605
 800d578:	0800d605 	.word	0x0800d605
 800d57c:	0800d605 	.word	0x0800d605
 800d580:	0800d605 	.word	0x0800d605
 800d584:	0800d5f7 	.word	0x0800d5f7
 800d588:	2b40      	cmp	r3, #64	@ 0x40
 800d58a:	d037      	beq.n	800d5fc <UART_SetConfig+0xc44>
 800d58c:	e03a      	b.n	800d604 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d58e:	f7fb f9af 	bl	80088f0 <HAL_RCC_GetPCLK1Freq>
 800d592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d594:	e03c      	b.n	800d610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d596:	f7fb f9c1 	bl	800891c <HAL_RCC_GetPCLK2Freq>
 800d59a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d59c:	e038      	b.n	800d610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d59e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fd f858 	bl	800a658 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5ac:	e030      	b.n	800d610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5ae:	f107 0318 	add.w	r3, r7, #24
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7fd f9a4 	bl	800a900 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5bc:	e028      	b.n	800d610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5be:	4b09      	ldr	r3, [pc, #36]	@ (800d5e4 <UART_SetConfig+0xc2c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0320 	and.w	r3, r3, #32
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d012      	beq.n	800d5f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5ca:	4b06      	ldr	r3, [pc, #24]	@ (800d5e4 <UART_SetConfig+0xc2c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	08db      	lsrs	r3, r3, #3
 800d5d0:	f003 0303 	and.w	r3, r3, #3
 800d5d4:	4a04      	ldr	r2, [pc, #16]	@ (800d5e8 <UART_SetConfig+0xc30>)
 800d5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5dc:	e018      	b.n	800d610 <UART_SetConfig+0xc58>
 800d5de:	bf00      	nop
 800d5e0:	0800f8dc 	.word	0x0800f8dc
 800d5e4:	58024400 	.word	0x58024400
 800d5e8:	03d09000 	.word	0x03d09000
 800d5ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d5f0:	4b24      	ldr	r3, [pc, #144]	@ (800d684 <UART_SetConfig+0xccc>)
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f4:	e00c      	b.n	800d610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5f6:	4b24      	ldr	r3, [pc, #144]	@ (800d688 <UART_SetConfig+0xcd0>)
 800d5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5fa:	e009      	b.n	800d610 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d602:	e005      	b.n	800d610 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d604:	2300      	movs	r3, #0
 800d606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d60e:	bf00      	nop
    }

    if (pclk != 0U)
 800d610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d612:	2b00      	cmp	r3, #0
 800d614:	d021      	beq.n	800d65a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d61a:	4a1c      	ldr	r2, [pc, #112]	@ (800d68c <UART_SetConfig+0xcd4>)
 800d61c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d620:	461a      	mov	r2, r3
 800d622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d624:	fbb3 f2f2 	udiv	r2, r3, r2
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	085b      	lsrs	r3, r3, #1
 800d62e:	441a      	add	r2, r3
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	fbb2 f3f3 	udiv	r3, r2, r3
 800d638:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63c:	2b0f      	cmp	r3, #15
 800d63e:	d909      	bls.n	800d654 <UART_SetConfig+0xc9c>
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d646:	d205      	bcs.n	800d654 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	60da      	str	r2, [r3, #12]
 800d652:	e002      	b.n	800d65a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2201      	movs	r2, #1
 800d666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2200      	movs	r2, #0
 800d66e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2200      	movs	r2, #0
 800d674:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d676:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3748      	adds	r7, #72	@ 0x48
 800d67e:	46bd      	mov	sp, r7
 800d680:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d684:	03d09000 	.word	0x03d09000
 800d688:	003d0900 	.word	0x003d0900
 800d68c:	0800f8dc 	.word	0x0800f8dc

0800d690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d69c:	f003 0308 	and.w	r3, r3, #8
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00a      	beq.n	800d6ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	430a      	orrs	r2, r1
 800d6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	430a      	orrs	r2, r1
 800d6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e0:	f003 0302 	and.w	r3, r3, #2
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00a      	beq.n	800d6fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	430a      	orrs	r2, r1
 800d6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d702:	f003 0304 	and.w	r3, r3, #4
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	430a      	orrs	r2, r1
 800d71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d724:	f003 0310 	and.w	r3, r3, #16
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00a      	beq.n	800d742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d746:	f003 0320 	and.w	r3, r3, #32
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00a      	beq.n	800d764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	430a      	orrs	r2, r1
 800d762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d01a      	beq.n	800d7a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d78a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d78e:	d10a      	bne.n	800d7a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	430a      	orrs	r2, r1
 800d7a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00a      	beq.n	800d7c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	430a      	orrs	r2, r1
 800d7c6:	605a      	str	r2, [r3, #4]
  }
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b098      	sub	sp, #96	@ 0x60
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7e4:	f7f6 f9de 	bl	8003ba4 <HAL_GetTick>
 800d7e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f003 0308 	and.w	r3, r3, #8
 800d7f4:	2b08      	cmp	r3, #8
 800d7f6:	d12f      	bne.n	800d858 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d800:	2200      	movs	r2, #0
 800d802:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f88e 	bl	800d928 <UART_WaitOnFlagUntilTimeout>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d022      	beq.n	800d858 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81a:	e853 3f00 	ldrex	r3, [r3]
 800d81e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d826:	653b      	str	r3, [r7, #80]	@ 0x50
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	461a      	mov	r2, r3
 800d82e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d830:	647b      	str	r3, [r7, #68]	@ 0x44
 800d832:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d834:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d838:	e841 2300 	strex	r3, r2, [r1]
 800d83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1e6      	bne.n	800d812 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2220      	movs	r2, #32
 800d848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e063      	b.n	800d920 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f003 0304 	and.w	r3, r3, #4
 800d862:	2b04      	cmp	r3, #4
 800d864:	d149      	bne.n	800d8fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d866:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d86e:	2200      	movs	r2, #0
 800d870:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f857 	bl	800d928 <UART_WaitOnFlagUntilTimeout>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d03c      	beq.n	800d8fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d888:	e853 3f00 	ldrex	r3, [r3]
 800d88c:	623b      	str	r3, [r7, #32]
   return(result);
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d89e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8a6:	e841 2300 	strex	r3, r2, [r1]
 800d8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1e6      	bne.n	800d880 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	e853 3f00 	ldrex	r3, [r3]
 800d8c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f023 0301 	bic.w	r3, r3, #1
 800d8c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8d2:	61fa      	str	r2, [r7, #28]
 800d8d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	69b9      	ldr	r1, [r7, #24]
 800d8d8:	69fa      	ldr	r2, [r7, #28]
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	617b      	str	r3, [r7, #20]
   return(result);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e5      	bne.n	800d8b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e012      	b.n	800d920 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2220      	movs	r2, #32
 800d8fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2220      	movs	r2, #32
 800d906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3758      	adds	r7, #88	@ 0x58
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	603b      	str	r3, [r7, #0]
 800d934:	4613      	mov	r3, r2
 800d936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d938:	e04f      	b.n	800d9da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d940:	d04b      	beq.n	800d9da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d942:	f7f6 f92f 	bl	8003ba4 <HAL_GetTick>
 800d946:	4602      	mov	r2, r0
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d302      	bcc.n	800d958 <UART_WaitOnFlagUntilTimeout+0x30>
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d958:	2303      	movs	r3, #3
 800d95a:	e04e      	b.n	800d9fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 0304 	and.w	r3, r3, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	d037      	beq.n	800d9da <UART_WaitOnFlagUntilTimeout+0xb2>
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b80      	cmp	r3, #128	@ 0x80
 800d96e:	d034      	beq.n	800d9da <UART_WaitOnFlagUntilTimeout+0xb2>
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	2b40      	cmp	r3, #64	@ 0x40
 800d974:	d031      	beq.n	800d9da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	69db      	ldr	r3, [r3, #28]
 800d97c:	f003 0308 	and.w	r3, r3, #8
 800d980:	2b08      	cmp	r3, #8
 800d982:	d110      	bne.n	800d9a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2208      	movs	r2, #8
 800d98a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 f95b 	bl	800dc48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2208      	movs	r2, #8
 800d996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e029      	b.n	800d9fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9b4:	d111      	bne.n	800d9da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f000 f941 	bl	800dc48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2220      	movs	r2, #32
 800d9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	e00f      	b.n	800d9fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69da      	ldr	r2, [r3, #28]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	bf0c      	ite	eq
 800d9ea:	2301      	moveq	r3, #1
 800d9ec:	2300      	movne	r3, #0
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d0a0      	beq.n	800d93a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da04:	b480      	push	{r7}
 800da06:	b0a3      	sub	sp, #140	@ 0x8c
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	4613      	mov	r3, r2
 800da10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	88fa      	ldrh	r2, [r7, #6]
 800da1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	88fa      	ldrh	r2, [r7, #6]
 800da24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da36:	d10e      	bne.n	800da56 <UART_Start_Receive_IT+0x52>
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d105      	bne.n	800da4c <UART_Start_Receive_IT+0x48>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800da46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da4a:	e02d      	b.n	800daa8 <UART_Start_Receive_IT+0xa4>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	22ff      	movs	r2, #255	@ 0xff
 800da50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da54:	e028      	b.n	800daa8 <UART_Start_Receive_IT+0xa4>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10d      	bne.n	800da7a <UART_Start_Receive_IT+0x76>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d104      	bne.n	800da70 <UART_Start_Receive_IT+0x6c>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	22ff      	movs	r2, #255	@ 0xff
 800da6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da6e:	e01b      	b.n	800daa8 <UART_Start_Receive_IT+0xa4>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	227f      	movs	r2, #127	@ 0x7f
 800da74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da78:	e016      	b.n	800daa8 <UART_Start_Receive_IT+0xa4>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da82:	d10d      	bne.n	800daa0 <UART_Start_Receive_IT+0x9c>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d104      	bne.n	800da96 <UART_Start_Receive_IT+0x92>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	227f      	movs	r2, #127	@ 0x7f
 800da90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da94:	e008      	b.n	800daa8 <UART_Start_Receive_IT+0xa4>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	223f      	movs	r2, #63	@ 0x3f
 800da9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da9e:	e003      	b.n	800daa8 <UART_Start_Receive_IT+0xa4>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2222      	movs	r2, #34	@ 0x22
 800dab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3308      	adds	r3, #8
 800dabe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dac2:	e853 3f00 	ldrex	r3, [r3]
 800dac6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800daca:	f043 0301 	orr.w	r3, r3, #1
 800dace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3308      	adds	r3, #8
 800dad8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dadc:	673a      	str	r2, [r7, #112]	@ 0x70
 800dade:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800dae2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800dae4:	e841 2300 	strex	r3, r2, [r1]
 800dae8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800daea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1e3      	bne.n	800dab8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800daf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800daf8:	d14f      	bne.n	800db9a <UART_Start_Receive_IT+0x196>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800db00:	88fa      	ldrh	r2, [r7, #6]
 800db02:	429a      	cmp	r2, r3
 800db04:	d349      	bcc.n	800db9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db0e:	d107      	bne.n	800db20 <UART_Start_Receive_IT+0x11c>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d103      	bne.n	800db20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4a47      	ldr	r2, [pc, #284]	@ (800dc38 <UART_Start_Receive_IT+0x234>)
 800db1c:	675a      	str	r2, [r3, #116]	@ 0x74
 800db1e:	e002      	b.n	800db26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	4a46      	ldr	r2, [pc, #280]	@ (800dc3c <UART_Start_Receive_IT+0x238>)
 800db24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	691b      	ldr	r3, [r3, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d01a      	beq.n	800db64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db36:	e853 3f00 	ldrex	r3, [r3]
 800db3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db52:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800db58:	e841 2300 	strex	r3, r2, [r1]
 800db5c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800db5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1e4      	bne.n	800db2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3308      	adds	r3, #8
 800db6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db6e:	e853 3f00 	ldrex	r3, [r3]
 800db72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	3308      	adds	r3, #8
 800db82:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800db84:	64ba      	str	r2, [r7, #72]	@ 0x48
 800db86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db8c:	e841 2300 	strex	r3, r2, [r1]
 800db90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800db92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1e5      	bne.n	800db64 <UART_Start_Receive_IT+0x160>
 800db98:	e046      	b.n	800dc28 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dba2:	d107      	bne.n	800dbb4 <UART_Start_Receive_IT+0x1b0>
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d103      	bne.n	800dbb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4a24      	ldr	r2, [pc, #144]	@ (800dc40 <UART_Start_Receive_IT+0x23c>)
 800dbb0:	675a      	str	r2, [r3, #116]	@ 0x74
 800dbb2:	e002      	b.n	800dbba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	4a23      	ldr	r2, [pc, #140]	@ (800dc44 <UART_Start_Receive_IT+0x240>)
 800dbb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d019      	beq.n	800dbf6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbca:	e853 3f00 	ldrex	r3, [r3]
 800dbce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dbd6:	677b      	str	r3, [r7, #116]	@ 0x74
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dbe0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbe2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dbe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbe8:	e841 2300 	strex	r3, r2, [r1]
 800dbec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1e6      	bne.n	800dbc2 <UART_Start_Receive_IT+0x1be>
 800dbf4:	e018      	b.n	800dc28 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	e853 3f00 	ldrex	r3, [r3]
 800dc02:	613b      	str	r3, [r7, #16]
   return(result);
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f043 0320 	orr.w	r3, r3, #32
 800dc0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	461a      	mov	r2, r3
 800dc12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc14:	623b      	str	r3, [r7, #32]
 800dc16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc18:	69f9      	ldr	r1, [r7, #28]
 800dc1a:	6a3a      	ldr	r2, [r7, #32]
 800dc1c:	e841 2300 	strex	r3, r2, [r1]
 800dc20:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1e6      	bne.n	800dbf6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	378c      	adds	r7, #140	@ 0x8c
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	0800e465 	.word	0x0800e465
 800dc3c:	0800e101 	.word	0x0800e101
 800dc40:	0800df49 	.word	0x0800df49
 800dc44:	0800dd91 	.word	0x0800dd91

0800dc48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b095      	sub	sp, #84	@ 0x54
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc58:	e853 3f00 	ldrex	r3, [r3]
 800dc5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc76:	e841 2300 	strex	r3, r2, [r1]
 800dc7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1e6      	bne.n	800dc50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3308      	adds	r3, #8
 800dc88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	e853 3f00 	ldrex	r3, [r3]
 800dc90:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc92:	69fa      	ldr	r2, [r7, #28]
 800dc94:	4b1e      	ldr	r3, [pc, #120]	@ (800dd10 <UART_EndRxTransfer+0xc8>)
 800dc96:	4013      	ands	r3, r2
 800dc98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3308      	adds	r3, #8
 800dca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcaa:	e841 2300 	strex	r3, r2, [r1]
 800dcae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1e5      	bne.n	800dc82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d118      	bne.n	800dcf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	e853 3f00 	ldrex	r3, [r3]
 800dcca:	60bb      	str	r3, [r7, #8]
   return(result);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	f023 0310 	bic.w	r3, r3, #16
 800dcd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcdc:	61bb      	str	r3, [r7, #24]
 800dcde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce0:	6979      	ldr	r1, [r7, #20]
 800dce2:	69ba      	ldr	r2, [r7, #24]
 800dce4:	e841 2300 	strex	r3, r2, [r1]
 800dce8:	613b      	str	r3, [r7, #16]
   return(result);
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e6      	bne.n	800dcbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2220      	movs	r2, #32
 800dcf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dd04:	bf00      	nop
 800dd06:	3754      	adds	r7, #84	@ 0x54
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	effffffe 	.word	0xeffffffe

0800dd14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7f4 febe 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd30:	bf00      	nop
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	e853 3f00 	ldrex	r3, [r3]
 800dd4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd54:	61fb      	str	r3, [r7, #28]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	61bb      	str	r3, [r7, #24]
 800dd60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd62:	6979      	ldr	r1, [r7, #20]
 800dd64:	69ba      	ldr	r2, [r7, #24]
 800dd66:	e841 2300 	strex	r3, r2, [r1]
 800dd6a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e6      	bne.n	800dd40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7fe fdf5 	bl	800c970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd86:	bf00      	nop
 800dd88:	3720      	adds	r7, #32
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
	...

0800dd90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b09c      	sub	sp, #112	@ 0x70
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dda8:	2b22      	cmp	r3, #34	@ 0x22
 800ddaa:	f040 80be 	bne.w	800df2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ddb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ddbc:	b2d9      	uxtb	r1, r3
 800ddbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddc8:	400a      	ands	r2, r1
 800ddca:	b2d2      	uxtb	r2, r2
 800ddcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	3b01      	subs	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f040 80a1 	bne.w	800df3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de00:	e853 3f00 	ldrex	r3, [r3]
 800de04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de16:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de1e:	e841 2300 	strex	r3, r2, [r1]
 800de22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1e6      	bne.n	800ddf8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3308      	adds	r3, #8
 800de30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de34:	e853 3f00 	ldrex	r3, [r3]
 800de38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de3c:	f023 0301 	bic.w	r3, r3, #1
 800de40:	667b      	str	r3, [r7, #100]	@ 0x64
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	3308      	adds	r3, #8
 800de48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800de4a:	647a      	str	r2, [r7, #68]	@ 0x44
 800de4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800de50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800de52:	e841 2300 	strex	r3, r2, [r1]
 800de56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800de58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1e5      	bne.n	800de2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2220      	movs	r2, #32
 800de62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a33      	ldr	r2, [pc, #204]	@ (800df44 <UART_RxISR_8BIT+0x1b4>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d01f      	beq.n	800debc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d018      	beq.n	800debc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	623b      	str	r3, [r7, #32]
   return(result);
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de9e:	663b      	str	r3, [r7, #96]	@ 0x60
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	461a      	mov	r2, r3
 800dea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dea8:	633b      	str	r3, [r7, #48]	@ 0x30
 800deaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800deae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800deb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e6      	bne.n	800de8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d12e      	bne.n	800df22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	e853 3f00 	ldrex	r3, [r3]
 800ded6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f023 0310 	bic.w	r3, r3, #16
 800dede:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	461a      	mov	r2, r3
 800dee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dee8:	61fb      	str	r3, [r7, #28]
 800deea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deec:	69b9      	ldr	r1, [r7, #24]
 800deee:	69fa      	ldr	r2, [r7, #28]
 800def0:	e841 2300 	strex	r3, r2, [r1]
 800def4:	617b      	str	r3, [r7, #20]
   return(result);
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e6      	bne.n	800deca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	f003 0310 	and.w	r3, r3, #16
 800df06:	2b10      	cmp	r3, #16
 800df08:	d103      	bne.n	800df12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2210      	movs	r2, #16
 800df10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df18:	4619      	mov	r1, r3
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7fe fd32 	bl	800c984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df20:	e00b      	b.n	800df3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7f4 fcfc 	bl	8002920 <HAL_UART_RxCpltCallback>
}
 800df28:	e007      	b.n	800df3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	699a      	ldr	r2, [r3, #24]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f042 0208 	orr.w	r2, r2, #8
 800df38:	619a      	str	r2, [r3, #24]
}
 800df3a:	bf00      	nop
 800df3c:	3770      	adds	r7, #112	@ 0x70
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	58000c00 	.word	0x58000c00

0800df48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b09c      	sub	sp, #112	@ 0x70
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df60:	2b22      	cmp	r3, #34	@ 0x22
 800df62:	f040 80be 	bne.w	800e0e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800df76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800df7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800df7e:	4013      	ands	r3, r2
 800df80:	b29a      	uxth	r2, r3
 800df82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df8a:	1c9a      	adds	r2, r3, #2
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df96:	b29b      	uxth	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f040 80a1 	bne.w	800e0f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dfbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfc4:	667b      	str	r3, [r7, #100]	@ 0x64
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfce:	657b      	str	r3, [r7, #84]	@ 0x54
 800dfd0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dfd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dfd6:	e841 2300 	strex	r3, r2, [r1]
 800dfda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dfdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1e6      	bne.n	800dfb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfec:	e853 3f00 	ldrex	r3, [r3]
 800dff0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff4:	f023 0301 	bic.w	r3, r3, #1
 800dff8:	663b      	str	r3, [r7, #96]	@ 0x60
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3308      	adds	r3, #8
 800e000:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e002:	643a      	str	r2, [r7, #64]	@ 0x40
 800e004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e00a:	e841 2300 	strex	r3, r2, [r1]
 800e00e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1e5      	bne.n	800dfe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a33      	ldr	r2, [pc, #204]	@ (800e0fc <UART_RxISR_16BIT+0x1b4>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d01f      	beq.n	800e074 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d018      	beq.n	800e074 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	e853 3f00 	ldrex	r3, [r3]
 800e04e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e056:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e062:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e068:	e841 2300 	strex	r3, r2, [r1]
 800e06c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1e6      	bne.n	800e042 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d12e      	bne.n	800e0da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	e853 3f00 	ldrex	r3, [r3]
 800e08e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	f023 0310 	bic.w	r3, r3, #16
 800e096:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	461a      	mov	r2, r3
 800e09e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0a0:	61bb      	str	r3, [r7, #24]
 800e0a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a4:	6979      	ldr	r1, [r7, #20]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	e841 2300 	strex	r3, r2, [r1]
 800e0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1e6      	bne.n	800e082 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	f003 0310 	and.w	r3, r3, #16
 800e0be:	2b10      	cmp	r3, #16
 800e0c0:	d103      	bne.n	800e0ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2210      	movs	r2, #16
 800e0c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7fe fc56 	bl	800c984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e0d8:	e00b      	b.n	800e0f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f4 fc20 	bl	8002920 <HAL_UART_RxCpltCallback>
}
 800e0e0:	e007      	b.n	800e0f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	699a      	ldr	r2, [r3, #24]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f042 0208 	orr.w	r2, r2, #8
 800e0f0:	619a      	str	r2, [r3, #24]
}
 800e0f2:	bf00      	nop
 800e0f4:	3770      	adds	r7, #112	@ 0x70
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	58000c00 	.word	0x58000c00

0800e100 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b0ac      	sub	sp, #176	@ 0xb0
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e10e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e136:	2b22      	cmp	r3, #34	@ 0x22
 800e138:	f040 8181 	bne.w	800e43e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e142:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e146:	e124      	b.n	800e392 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e152:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e156:	b2d9      	uxtb	r1, r3
 800e158:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e162:	400a      	ands	r2, r1
 800e164:	b2d2      	uxtb	r2, r2
 800e166:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b01      	subs	r3, #1
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b00      	cmp	r3, #0
 800e198:	d053      	beq.n	800e242 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d011      	beq.n	800e1ca <UART_RxISR_8BIT_FIFOEN+0xca>
 800e1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00b      	beq.n	800e1ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1c0:	f043 0201 	orr.w	r2, r3, #1
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d011      	beq.n	800e1fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e1d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00b      	beq.n	800e1fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1f0:	f043 0204 	orr.w	r2, r3, #4
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1fe:	f003 0304 	and.w	r3, r3, #4
 800e202:	2b00      	cmp	r3, #0
 800e204:	d011      	beq.n	800e22a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00b      	beq.n	800e22a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2204      	movs	r2, #4
 800e218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e220:	f043 0202 	orr.w	r2, r3, #2
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e230:	2b00      	cmp	r3, #0
 800e232:	d006      	beq.n	800e242 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7f4 fc39 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e248:	b29b      	uxth	r3, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 80a1 	bne.w	800e392 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e258:	e853 3f00 	ldrex	r3, [r3]
 800e25c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	461a      	mov	r2, r3
 800e26e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e274:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e276:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e278:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e27a:	e841 2300 	strex	r3, r2, [r1]
 800e27e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1e4      	bne.n	800e250 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3308      	adds	r3, #8
 800e28c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e28e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e290:	e853 3f00 	ldrex	r3, [r3]
 800e294:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e298:	4b6f      	ldr	r3, [pc, #444]	@ (800e458 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800e29a:	4013      	ands	r3, r2
 800e29c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e2aa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e2ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e2b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e2b2:	e841 2300 	strex	r3, r2, [r1]
 800e2b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e2b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1e3      	bne.n	800e286 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2220      	movs	r2, #32
 800e2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4a61      	ldr	r2, [pc, #388]	@ (800e45c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d021      	beq.n	800e320 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d01a      	beq.n	800e320 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2f2:	e853 3f00 	ldrex	r3, [r3]
 800e2f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e2f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e2fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e30c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e30e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e310:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e314:	e841 2300 	strex	r3, r2, [r1]
 800e318:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d1e4      	bne.n	800e2ea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e324:	2b01      	cmp	r3, #1
 800e326:	d130      	bne.n	800e38a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e336:	e853 3f00 	ldrex	r3, [r3]
 800e33a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33e:	f023 0310 	bic.w	r3, r3, #16
 800e342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e350:	643b      	str	r3, [r7, #64]	@ 0x40
 800e352:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e358:	e841 2300 	strex	r3, r2, [r1]
 800e35c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1e4      	bne.n	800e32e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	69db      	ldr	r3, [r3, #28]
 800e36a:	f003 0310 	and.w	r3, r3, #16
 800e36e:	2b10      	cmp	r3, #16
 800e370:	d103      	bne.n	800e37a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2210      	movs	r2, #16
 800e378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7fe fafe 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e388:	e00e      	b.n	800e3a8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7f4 fac8 	bl	8002920 <HAL_UART_RxCpltCallback>
        break;
 800e390:	e00a      	b.n	800e3a8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e392:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e396:	2b00      	cmp	r3, #0
 800e398:	d006      	beq.n	800e3a8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800e39a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e39e:	f003 0320 	and.w	r3, r3, #32
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f47f aed0 	bne.w	800e148 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e3ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e3b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d049      	beq.n	800e44e <UART_RxISR_8BIT_FIFOEN+0x34e>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e3c0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d242      	bcs.n	800e44e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3308      	adds	r3, #8
 800e3ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	e853 3f00 	ldrex	r3, [r3]
 800e3d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e3de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e3ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e3ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3f4:	e841 2300 	strex	r3, r2, [r1]
 800e3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d1e3      	bne.n	800e3c8 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4a17      	ldr	r2, [pc, #92]	@ (800e460 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800e404:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	e853 3f00 	ldrex	r3, [r3]
 800e412:	60bb      	str	r3, [r7, #8]
   return(result);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	f043 0320 	orr.w	r3, r3, #32
 800e41a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e428:	61bb      	str	r3, [r7, #24]
 800e42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42c:	6979      	ldr	r1, [r7, #20]
 800e42e:	69ba      	ldr	r2, [r7, #24]
 800e430:	e841 2300 	strex	r3, r2, [r1]
 800e434:	613b      	str	r3, [r7, #16]
   return(result);
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1e4      	bne.n	800e406 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e43c:	e007      	b.n	800e44e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	699a      	ldr	r2, [r3, #24]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f042 0208 	orr.w	r2, r2, #8
 800e44c:	619a      	str	r2, [r3, #24]
}
 800e44e:	bf00      	nop
 800e450:	37b0      	adds	r7, #176	@ 0xb0
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	effffffe 	.word	0xeffffffe
 800e45c:	58000c00 	.word	0x58000c00
 800e460:	0800dd91 	.word	0x0800dd91

0800e464 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b0ae      	sub	sp, #184	@ 0xb8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e472:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	69db      	ldr	r3, [r3, #28]
 800e47c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e49a:	2b22      	cmp	r3, #34	@ 0x22
 800e49c:	f040 8185 	bne.w	800e7aa <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e4a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e4aa:	e128      	b.n	800e6fe <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e4be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e4c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e4ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4d4:	1c9a      	adds	r2, r3, #2
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e4fa:	f003 0307 	and.w	r3, r3, #7
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d053      	beq.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d011      	beq.n	800e532 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e50e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00b      	beq.n	800e532 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2201      	movs	r2, #1
 800e520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e528:	f043 0201 	orr.w	r2, r3, #1
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d011      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e53e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e542:	f003 0301 	and.w	r3, r3, #1
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2202      	movs	r2, #2
 800e550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e558:	f043 0204 	orr.w	r2, r3, #4
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e566:	f003 0304 	and.w	r3, r3, #4
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d011      	beq.n	800e592 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e56e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00b      	beq.n	800e592 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2204      	movs	r2, #4
 800e580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e588:	f043 0202 	orr.w	r2, r3, #2
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d006      	beq.n	800e5aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7f4 fa85 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f040 80a3 	bne.w	800e6fe <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5c0:	e853 3f00 	ldrex	r3, [r3]
 800e5c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e5c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e5c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e5da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e5de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e5e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e5ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1e2      	bne.n	800e5b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3308      	adds	r3, #8
 800e5f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5fc:	e853 3f00 	ldrex	r3, [r3]
 800e600:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e602:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e604:	4b6f      	ldr	r3, [pc, #444]	@ (800e7c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800e606:	4013      	ands	r3, r2
 800e608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	3308      	adds	r3, #8
 800e612:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e616:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e618:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e61c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e61e:	e841 2300 	strex	r3, r2, [r1]
 800e622:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1e3      	bne.n	800e5f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2220      	movs	r2, #32
 800e62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a61      	ldr	r2, [pc, #388]	@ (800e7c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d021      	beq.n	800e68c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e652:	2b00      	cmp	r3, #0
 800e654:	d01a      	beq.n	800e68c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e65e:	e853 3f00 	ldrex	r3, [r3]
 800e662:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e666:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e66a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	461a      	mov	r2, r3
 800e674:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e67a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e67e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e680:	e841 2300 	strex	r3, r2, [r1]
 800e684:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1e4      	bne.n	800e656 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e690:	2b01      	cmp	r3, #1
 800e692:	d130      	bne.n	800e6f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a2:	e853 3f00 	ldrex	r3, [r3]
 800e6a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6aa:	f023 0310 	bic.w	r3, r3, #16
 800e6ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e6bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6c4:	e841 2300 	strex	r3, r2, [r1]
 800e6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d1e4      	bne.n	800e69a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	69db      	ldr	r3, [r3, #28]
 800e6d6:	f003 0310 	and.w	r3, r3, #16
 800e6da:	2b10      	cmp	r3, #16
 800e6dc:	d103      	bne.n	800e6e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2210      	movs	r2, #16
 800e6e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7fe f948 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e6f4:	e00e      	b.n	800e714 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7f4 f912 	bl	8002920 <HAL_UART_RxCpltCallback>
        break;
 800e6fc:	e00a      	b.n	800e714 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6fe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e702:	2b00      	cmp	r3, #0
 800e704:	d006      	beq.n	800e714 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800e706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e70a:	f003 0320 	and.w	r3, r3, #32
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f47f aecc 	bne.w	800e4ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e71a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e71e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e722:	2b00      	cmp	r3, #0
 800e724:	d049      	beq.n	800e7ba <UART_RxISR_16BIT_FIFOEN+0x356>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e72c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e730:	429a      	cmp	r2, r3
 800e732:	d242      	bcs.n	800e7ba <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73e:	e853 3f00 	ldrex	r3, [r3]
 800e742:	623b      	str	r3, [r7, #32]
   return(result);
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e74a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3308      	adds	r3, #8
 800e754:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e758:	633a      	str	r2, [r7, #48]	@ 0x30
 800e75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e760:	e841 2300 	strex	r3, r2, [r1]
 800e764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e3      	bne.n	800e734 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a17      	ldr	r2, [pc, #92]	@ (800e7cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800e770:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	e853 3f00 	ldrex	r3, [r3]
 800e77e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f043 0320 	orr.w	r3, r3, #32
 800e786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	461a      	mov	r2, r3
 800e790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e794:	61fb      	str	r3, [r7, #28]
 800e796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e798:	69b9      	ldr	r1, [r7, #24]
 800e79a:	69fa      	ldr	r2, [r7, #28]
 800e79c:	e841 2300 	strex	r3, r2, [r1]
 800e7a0:	617b      	str	r3, [r7, #20]
   return(result);
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1e4      	bne.n	800e772 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7a8:	e007      	b.n	800e7ba <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	699a      	ldr	r2, [r3, #24]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f042 0208 	orr.w	r2, r2, #8
 800e7b8:	619a      	str	r2, [r3, #24]
}
 800e7ba:	bf00      	nop
 800e7bc:	37b8      	adds	r7, #184	@ 0xb8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	effffffe 	.word	0xeffffffe
 800e7c8:	58000c00 	.word	0x58000c00
 800e7cc:	0800df49 	.word	0x0800df49

0800e7d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d101      	bne.n	800e822 <HAL_UARTEx_DisableFifoMode+0x16>
 800e81e:	2302      	movs	r3, #2
 800e820:	e027      	b.n	800e872 <HAL_UARTEx_DisableFifoMode+0x66>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2224      	movs	r2, #36	@ 0x24
 800e82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f022 0201 	bic.w	r2, r2, #1
 800e848:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2220      	movs	r2, #32
 800e864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b084      	sub	sp, #16
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d101      	bne.n	800e896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e892:	2302      	movs	r3, #2
 800e894:	e02d      	b.n	800e8f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2224      	movs	r2, #36	@ 0x24
 800e8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f022 0201 	bic.w	r2, r2, #1
 800e8bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	683a      	ldr	r2, [r7, #0]
 800e8ce:	430a      	orrs	r2, r1
 800e8d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f850 	bl	800e978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2220      	movs	r2, #32
 800e8e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b084      	sub	sp, #16
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
 800e902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d101      	bne.n	800e912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e90e:	2302      	movs	r3, #2
 800e910:	e02d      	b.n	800e96e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2224      	movs	r2, #36	@ 0x24
 800e91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f022 0201 	bic.w	r2, r2, #1
 800e938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	430a      	orrs	r2, r1
 800e94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f812 	bl	800e978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2220      	movs	r2, #32
 800e960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
	...

0800e978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e984:	2b00      	cmp	r3, #0
 800e986:	d108      	bne.n	800e99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2201      	movs	r2, #1
 800e994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e998:	e031      	b.n	800e9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e99a:	2310      	movs	r3, #16
 800e99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e99e:	2310      	movs	r3, #16
 800e9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	0e5b      	lsrs	r3, r3, #25
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	f003 0307 	and.w	r3, r3, #7
 800e9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	0f5b      	lsrs	r3, r3, #29
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 0307 	and.w	r3, r3, #7
 800e9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	7b3a      	ldrb	r2, [r7, #12]
 800e9c6:	4911      	ldr	r1, [pc, #68]	@ (800ea0c <UARTEx_SetNbDataToProcess+0x94>)
 800e9c8:	5c8a      	ldrb	r2, [r1, r2]
 800e9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9ce:	7b3a      	ldrb	r2, [r7, #12]
 800e9d0:	490f      	ldr	r1, [pc, #60]	@ (800ea10 <UARTEx_SetNbDataToProcess+0x98>)
 800e9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
 800e9e2:	7b7a      	ldrb	r2, [r7, #13]
 800e9e4:	4909      	ldr	r1, [pc, #36]	@ (800ea0c <UARTEx_SetNbDataToProcess+0x94>)
 800e9e6:	5c8a      	ldrb	r2, [r1, r2]
 800e9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9ec:	7b7a      	ldrb	r2, [r7, #13]
 800e9ee:	4908      	ldr	r1, [pc, #32]	@ (800ea10 <UARTEx_SetNbDataToProcess+0x98>)
 800e9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	0800f8f4 	.word	0x0800f8f4
 800ea10:	0800f8fc 	.word	0x0800f8fc

0800ea14 <atoi>:
 800ea14:	220a      	movs	r2, #10
 800ea16:	2100      	movs	r1, #0
 800ea18:	f000 b92a 	b.w	800ec70 <strtol>

0800ea1c <sbrk_aligned>:
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ea5c <sbrk_aligned+0x40>)
 800ea20:	460c      	mov	r4, r1
 800ea22:	6831      	ldr	r1, [r6, #0]
 800ea24:	4605      	mov	r5, r0
 800ea26:	b911      	cbnz	r1, 800ea2e <sbrk_aligned+0x12>
 800ea28:	f000 f976 	bl	800ed18 <_sbrk_r>
 800ea2c:	6030      	str	r0, [r6, #0]
 800ea2e:	4621      	mov	r1, r4
 800ea30:	4628      	mov	r0, r5
 800ea32:	f000 f971 	bl	800ed18 <_sbrk_r>
 800ea36:	1c43      	adds	r3, r0, #1
 800ea38:	d103      	bne.n	800ea42 <sbrk_aligned+0x26>
 800ea3a:	f04f 34ff 	mov.w	r4, #4294967295
 800ea3e:	4620      	mov	r0, r4
 800ea40:	bd70      	pop	{r4, r5, r6, pc}
 800ea42:	1cc4      	adds	r4, r0, #3
 800ea44:	f024 0403 	bic.w	r4, r4, #3
 800ea48:	42a0      	cmp	r0, r4
 800ea4a:	d0f8      	beq.n	800ea3e <sbrk_aligned+0x22>
 800ea4c:	1a21      	subs	r1, r4, r0
 800ea4e:	4628      	mov	r0, r5
 800ea50:	f000 f962 	bl	800ed18 <_sbrk_r>
 800ea54:	3001      	adds	r0, #1
 800ea56:	d1f2      	bne.n	800ea3e <sbrk_aligned+0x22>
 800ea58:	e7ef      	b.n	800ea3a <sbrk_aligned+0x1e>
 800ea5a:	bf00      	nop
 800ea5c:	24001130 	.word	0x24001130

0800ea60 <_malloc_r>:
 800ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea64:	1ccd      	adds	r5, r1, #3
 800ea66:	f025 0503 	bic.w	r5, r5, #3
 800ea6a:	3508      	adds	r5, #8
 800ea6c:	2d0c      	cmp	r5, #12
 800ea6e:	bf38      	it	cc
 800ea70:	250c      	movcc	r5, #12
 800ea72:	2d00      	cmp	r5, #0
 800ea74:	4606      	mov	r6, r0
 800ea76:	db01      	blt.n	800ea7c <_malloc_r+0x1c>
 800ea78:	42a9      	cmp	r1, r5
 800ea7a:	d904      	bls.n	800ea86 <_malloc_r+0x26>
 800ea7c:	230c      	movs	r3, #12
 800ea7e:	6033      	str	r3, [r6, #0]
 800ea80:	2000      	movs	r0, #0
 800ea82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb5c <_malloc_r+0xfc>
 800ea8a:	f000 f869 	bl	800eb60 <__malloc_lock>
 800ea8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea92:	461c      	mov	r4, r3
 800ea94:	bb44      	cbnz	r4, 800eae8 <_malloc_r+0x88>
 800ea96:	4629      	mov	r1, r5
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7ff ffbf 	bl	800ea1c <sbrk_aligned>
 800ea9e:	1c43      	adds	r3, r0, #1
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	d158      	bne.n	800eb56 <_malloc_r+0xf6>
 800eaa4:	f8d8 4000 	ldr.w	r4, [r8]
 800eaa8:	4627      	mov	r7, r4
 800eaaa:	2f00      	cmp	r7, #0
 800eaac:	d143      	bne.n	800eb36 <_malloc_r+0xd6>
 800eaae:	2c00      	cmp	r4, #0
 800eab0:	d04b      	beq.n	800eb4a <_malloc_r+0xea>
 800eab2:	6823      	ldr	r3, [r4, #0]
 800eab4:	4639      	mov	r1, r7
 800eab6:	4630      	mov	r0, r6
 800eab8:	eb04 0903 	add.w	r9, r4, r3
 800eabc:	f000 f92c 	bl	800ed18 <_sbrk_r>
 800eac0:	4581      	cmp	r9, r0
 800eac2:	d142      	bne.n	800eb4a <_malloc_r+0xea>
 800eac4:	6821      	ldr	r1, [r4, #0]
 800eac6:	1a6d      	subs	r5, r5, r1
 800eac8:	4629      	mov	r1, r5
 800eaca:	4630      	mov	r0, r6
 800eacc:	f7ff ffa6 	bl	800ea1c <sbrk_aligned>
 800ead0:	3001      	adds	r0, #1
 800ead2:	d03a      	beq.n	800eb4a <_malloc_r+0xea>
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	442b      	add	r3, r5
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	f8d8 3000 	ldr.w	r3, [r8]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	bb62      	cbnz	r2, 800eb3c <_malloc_r+0xdc>
 800eae2:	f8c8 7000 	str.w	r7, [r8]
 800eae6:	e00f      	b.n	800eb08 <_malloc_r+0xa8>
 800eae8:	6822      	ldr	r2, [r4, #0]
 800eaea:	1b52      	subs	r2, r2, r5
 800eaec:	d420      	bmi.n	800eb30 <_malloc_r+0xd0>
 800eaee:	2a0b      	cmp	r2, #11
 800eaf0:	d917      	bls.n	800eb22 <_malloc_r+0xc2>
 800eaf2:	1961      	adds	r1, r4, r5
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	6025      	str	r5, [r4, #0]
 800eaf8:	bf18      	it	ne
 800eafa:	6059      	strne	r1, [r3, #4]
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	bf08      	it	eq
 800eb00:	f8c8 1000 	streq.w	r1, [r8]
 800eb04:	5162      	str	r2, [r4, r5]
 800eb06:	604b      	str	r3, [r1, #4]
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f000 f82f 	bl	800eb6c <__malloc_unlock>
 800eb0e:	f104 000b 	add.w	r0, r4, #11
 800eb12:	1d23      	adds	r3, r4, #4
 800eb14:	f020 0007 	bic.w	r0, r0, #7
 800eb18:	1ac2      	subs	r2, r0, r3
 800eb1a:	bf1c      	itt	ne
 800eb1c:	1a1b      	subne	r3, r3, r0
 800eb1e:	50a3      	strne	r3, [r4, r2]
 800eb20:	e7af      	b.n	800ea82 <_malloc_r+0x22>
 800eb22:	6862      	ldr	r2, [r4, #4]
 800eb24:	42a3      	cmp	r3, r4
 800eb26:	bf0c      	ite	eq
 800eb28:	f8c8 2000 	streq.w	r2, [r8]
 800eb2c:	605a      	strne	r2, [r3, #4]
 800eb2e:	e7eb      	b.n	800eb08 <_malloc_r+0xa8>
 800eb30:	4623      	mov	r3, r4
 800eb32:	6864      	ldr	r4, [r4, #4]
 800eb34:	e7ae      	b.n	800ea94 <_malloc_r+0x34>
 800eb36:	463c      	mov	r4, r7
 800eb38:	687f      	ldr	r7, [r7, #4]
 800eb3a:	e7b6      	b.n	800eaaa <_malloc_r+0x4a>
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	42a3      	cmp	r3, r4
 800eb42:	d1fb      	bne.n	800eb3c <_malloc_r+0xdc>
 800eb44:	2300      	movs	r3, #0
 800eb46:	6053      	str	r3, [r2, #4]
 800eb48:	e7de      	b.n	800eb08 <_malloc_r+0xa8>
 800eb4a:	230c      	movs	r3, #12
 800eb4c:	6033      	str	r3, [r6, #0]
 800eb4e:	4630      	mov	r0, r6
 800eb50:	f000 f80c 	bl	800eb6c <__malloc_unlock>
 800eb54:	e794      	b.n	800ea80 <_malloc_r+0x20>
 800eb56:	6005      	str	r5, [r0, #0]
 800eb58:	e7d6      	b.n	800eb08 <_malloc_r+0xa8>
 800eb5a:	bf00      	nop
 800eb5c:	24001134 	.word	0x24001134

0800eb60 <__malloc_lock>:
 800eb60:	4801      	ldr	r0, [pc, #4]	@ (800eb68 <__malloc_lock+0x8>)
 800eb62:	f000 b913 	b.w	800ed8c <__retarget_lock_acquire_recursive>
 800eb66:	bf00      	nop
 800eb68:	24001274 	.word	0x24001274

0800eb6c <__malloc_unlock>:
 800eb6c:	4801      	ldr	r0, [pc, #4]	@ (800eb74 <__malloc_unlock+0x8>)
 800eb6e:	f000 b90e 	b.w	800ed8e <__retarget_lock_release_recursive>
 800eb72:	bf00      	nop
 800eb74:	24001274 	.word	0x24001274

0800eb78 <_strtol_l.constprop.0>:
 800eb78:	2b24      	cmp	r3, #36	@ 0x24
 800eb7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb7e:	4686      	mov	lr, r0
 800eb80:	4690      	mov	r8, r2
 800eb82:	d801      	bhi.n	800eb88 <_strtol_l.constprop.0+0x10>
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d106      	bne.n	800eb96 <_strtol_l.constprop.0+0x1e>
 800eb88:	f000 f8d6 	bl	800ed38 <__errno>
 800eb8c:	2316      	movs	r3, #22
 800eb8e:	6003      	str	r3, [r0, #0]
 800eb90:	2000      	movs	r0, #0
 800eb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb96:	4834      	ldr	r0, [pc, #208]	@ (800ec68 <_strtol_l.constprop.0+0xf0>)
 800eb98:	460d      	mov	r5, r1
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eba0:	5d06      	ldrb	r6, [r0, r4]
 800eba2:	f016 0608 	ands.w	r6, r6, #8
 800eba6:	d1f8      	bne.n	800eb9a <_strtol_l.constprop.0+0x22>
 800eba8:	2c2d      	cmp	r4, #45	@ 0x2d
 800ebaa:	d12d      	bne.n	800ec08 <_strtol_l.constprop.0+0x90>
 800ebac:	782c      	ldrb	r4, [r5, #0]
 800ebae:	2601      	movs	r6, #1
 800ebb0:	1c95      	adds	r5, r2, #2
 800ebb2:	f033 0210 	bics.w	r2, r3, #16
 800ebb6:	d109      	bne.n	800ebcc <_strtol_l.constprop.0+0x54>
 800ebb8:	2c30      	cmp	r4, #48	@ 0x30
 800ebba:	d12a      	bne.n	800ec12 <_strtol_l.constprop.0+0x9a>
 800ebbc:	782a      	ldrb	r2, [r5, #0]
 800ebbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ebc2:	2a58      	cmp	r2, #88	@ 0x58
 800ebc4:	d125      	bne.n	800ec12 <_strtol_l.constprop.0+0x9a>
 800ebc6:	786c      	ldrb	r4, [r5, #1]
 800ebc8:	2310      	movs	r3, #16
 800ebca:	3502      	adds	r5, #2
 800ebcc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ebd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	fbbc f9f3 	udiv	r9, ip, r3
 800ebda:	4610      	mov	r0, r2
 800ebdc:	fb03 ca19 	mls	sl, r3, r9, ip
 800ebe0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ebe4:	2f09      	cmp	r7, #9
 800ebe6:	d81b      	bhi.n	800ec20 <_strtol_l.constprop.0+0xa8>
 800ebe8:	463c      	mov	r4, r7
 800ebea:	42a3      	cmp	r3, r4
 800ebec:	dd27      	ble.n	800ec3e <_strtol_l.constprop.0+0xc6>
 800ebee:	1c57      	adds	r7, r2, #1
 800ebf0:	d007      	beq.n	800ec02 <_strtol_l.constprop.0+0x8a>
 800ebf2:	4581      	cmp	r9, r0
 800ebf4:	d320      	bcc.n	800ec38 <_strtol_l.constprop.0+0xc0>
 800ebf6:	d101      	bne.n	800ebfc <_strtol_l.constprop.0+0x84>
 800ebf8:	45a2      	cmp	sl, r4
 800ebfa:	db1d      	blt.n	800ec38 <_strtol_l.constprop.0+0xc0>
 800ebfc:	fb00 4003 	mla	r0, r0, r3, r4
 800ec00:	2201      	movs	r2, #1
 800ec02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec06:	e7eb      	b.n	800ebe0 <_strtol_l.constprop.0+0x68>
 800ec08:	2c2b      	cmp	r4, #43	@ 0x2b
 800ec0a:	bf04      	itt	eq
 800ec0c:	782c      	ldrbeq	r4, [r5, #0]
 800ec0e:	1c95      	addeq	r5, r2, #2
 800ec10:	e7cf      	b.n	800ebb2 <_strtol_l.constprop.0+0x3a>
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d1da      	bne.n	800ebcc <_strtol_l.constprop.0+0x54>
 800ec16:	2c30      	cmp	r4, #48	@ 0x30
 800ec18:	bf0c      	ite	eq
 800ec1a:	2308      	moveq	r3, #8
 800ec1c:	230a      	movne	r3, #10
 800ec1e:	e7d5      	b.n	800ebcc <_strtol_l.constprop.0+0x54>
 800ec20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ec24:	2f19      	cmp	r7, #25
 800ec26:	d801      	bhi.n	800ec2c <_strtol_l.constprop.0+0xb4>
 800ec28:	3c37      	subs	r4, #55	@ 0x37
 800ec2a:	e7de      	b.n	800ebea <_strtol_l.constprop.0+0x72>
 800ec2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ec30:	2f19      	cmp	r7, #25
 800ec32:	d804      	bhi.n	800ec3e <_strtol_l.constprop.0+0xc6>
 800ec34:	3c57      	subs	r4, #87	@ 0x57
 800ec36:	e7d8      	b.n	800ebea <_strtol_l.constprop.0+0x72>
 800ec38:	f04f 32ff 	mov.w	r2, #4294967295
 800ec3c:	e7e1      	b.n	800ec02 <_strtol_l.constprop.0+0x8a>
 800ec3e:	1c53      	adds	r3, r2, #1
 800ec40:	d108      	bne.n	800ec54 <_strtol_l.constprop.0+0xdc>
 800ec42:	2322      	movs	r3, #34	@ 0x22
 800ec44:	f8ce 3000 	str.w	r3, [lr]
 800ec48:	4660      	mov	r0, ip
 800ec4a:	f1b8 0f00 	cmp.w	r8, #0
 800ec4e:	d0a0      	beq.n	800eb92 <_strtol_l.constprop.0+0x1a>
 800ec50:	1e69      	subs	r1, r5, #1
 800ec52:	e006      	b.n	800ec62 <_strtol_l.constprop.0+0xea>
 800ec54:	b106      	cbz	r6, 800ec58 <_strtol_l.constprop.0+0xe0>
 800ec56:	4240      	negs	r0, r0
 800ec58:	f1b8 0f00 	cmp.w	r8, #0
 800ec5c:	d099      	beq.n	800eb92 <_strtol_l.constprop.0+0x1a>
 800ec5e:	2a00      	cmp	r2, #0
 800ec60:	d1f6      	bne.n	800ec50 <_strtol_l.constprop.0+0xd8>
 800ec62:	f8c8 1000 	str.w	r1, [r8]
 800ec66:	e794      	b.n	800eb92 <_strtol_l.constprop.0+0x1a>
 800ec68:	0800f905 	.word	0x0800f905

0800ec6c <_strtol_r>:
 800ec6c:	f7ff bf84 	b.w	800eb78 <_strtol_l.constprop.0>

0800ec70 <strtol>:
 800ec70:	4613      	mov	r3, r2
 800ec72:	460a      	mov	r2, r1
 800ec74:	4601      	mov	r1, r0
 800ec76:	4802      	ldr	r0, [pc, #8]	@ (800ec80 <strtol+0x10>)
 800ec78:	6800      	ldr	r0, [r0, #0]
 800ec7a:	f7ff bf7d 	b.w	800eb78 <_strtol_l.constprop.0>
 800ec7e:	bf00      	nop
 800ec80:	240000d4 	.word	0x240000d4

0800ec84 <siscanf>:
 800ec84:	b40e      	push	{r1, r2, r3}
 800ec86:	b530      	push	{r4, r5, lr}
 800ec88:	b09c      	sub	sp, #112	@ 0x70
 800ec8a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ec8c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ec90:	f854 5b04 	ldr.w	r5, [r4], #4
 800ec94:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ec98:	9002      	str	r0, [sp, #8]
 800ec9a:	9006      	str	r0, [sp, #24]
 800ec9c:	f7f1 fb42 	bl	8000324 <strlen>
 800eca0:	4b0b      	ldr	r3, [pc, #44]	@ (800ecd0 <siscanf+0x4c>)
 800eca2:	9003      	str	r0, [sp, #12]
 800eca4:	9007      	str	r0, [sp, #28]
 800eca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eca8:	480a      	ldr	r0, [pc, #40]	@ (800ecd4 <siscanf+0x50>)
 800ecaa:	9401      	str	r4, [sp, #4]
 800ecac:	2300      	movs	r3, #0
 800ecae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ecb0:	9314      	str	r3, [sp, #80]	@ 0x50
 800ecb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ecb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ecba:	462a      	mov	r2, r5
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	a902      	add	r1, sp, #8
 800ecc0:	6800      	ldr	r0, [r0, #0]
 800ecc2:	f000 f915 	bl	800eef0 <__ssvfiscanf_r>
 800ecc6:	b01c      	add	sp, #112	@ 0x70
 800ecc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eccc:	b003      	add	sp, #12
 800ecce:	4770      	bx	lr
 800ecd0:	0800ecd9 	.word	0x0800ecd9
 800ecd4:	240000d4 	.word	0x240000d4

0800ecd8 <__seofread>:
 800ecd8:	2000      	movs	r0, #0
 800ecda:	4770      	bx	lr

0800ecdc <memset>:
 800ecdc:	4402      	add	r2, r0
 800ecde:	4603      	mov	r3, r0
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d100      	bne.n	800ece6 <memset+0xa>
 800ece4:	4770      	bx	lr
 800ece6:	f803 1b01 	strb.w	r1, [r3], #1
 800ecea:	e7f9      	b.n	800ece0 <memset+0x4>

0800ecec <strstr>:
 800ecec:	780a      	ldrb	r2, [r1, #0]
 800ecee:	b570      	push	{r4, r5, r6, lr}
 800ecf0:	b96a      	cbnz	r2, 800ed0e <strstr+0x22>
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d109      	bne.n	800ed0c <strstr+0x20>
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d0f6      	beq.n	800ecf2 <strstr+0x6>
 800ed04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ed08:	429e      	cmp	r6, r3
 800ed0a:	d0f7      	beq.n	800ecfc <strstr+0x10>
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	7803      	ldrb	r3, [r0, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1ef      	bne.n	800ecf4 <strstr+0x8>
 800ed14:	4618      	mov	r0, r3
 800ed16:	e7ec      	b.n	800ecf2 <strstr+0x6>

0800ed18 <_sbrk_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4d06      	ldr	r5, [pc, #24]	@ (800ed34 <_sbrk_r+0x1c>)
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	4604      	mov	r4, r0
 800ed20:	4608      	mov	r0, r1
 800ed22:	602b      	str	r3, [r5, #0]
 800ed24:	f7f3 ffcc 	bl	8002cc0 <_sbrk>
 800ed28:	1c43      	adds	r3, r0, #1
 800ed2a:	d102      	bne.n	800ed32 <_sbrk_r+0x1a>
 800ed2c:	682b      	ldr	r3, [r5, #0]
 800ed2e:	b103      	cbz	r3, 800ed32 <_sbrk_r+0x1a>
 800ed30:	6023      	str	r3, [r4, #0]
 800ed32:	bd38      	pop	{r3, r4, r5, pc}
 800ed34:	24001270 	.word	0x24001270

0800ed38 <__errno>:
 800ed38:	4b01      	ldr	r3, [pc, #4]	@ (800ed40 <__errno+0x8>)
 800ed3a:	6818      	ldr	r0, [r3, #0]
 800ed3c:	4770      	bx	lr
 800ed3e:	bf00      	nop
 800ed40:	240000d4 	.word	0x240000d4

0800ed44 <__libc_init_array>:
 800ed44:	b570      	push	{r4, r5, r6, lr}
 800ed46:	4d0d      	ldr	r5, [pc, #52]	@ (800ed7c <__libc_init_array+0x38>)
 800ed48:	4c0d      	ldr	r4, [pc, #52]	@ (800ed80 <__libc_init_array+0x3c>)
 800ed4a:	1b64      	subs	r4, r4, r5
 800ed4c:	10a4      	asrs	r4, r4, #2
 800ed4e:	2600      	movs	r6, #0
 800ed50:	42a6      	cmp	r6, r4
 800ed52:	d109      	bne.n	800ed68 <__libc_init_array+0x24>
 800ed54:	4d0b      	ldr	r5, [pc, #44]	@ (800ed84 <__libc_init_array+0x40>)
 800ed56:	4c0c      	ldr	r4, [pc, #48]	@ (800ed88 <__libc_init_array+0x44>)
 800ed58:	f000 fca6 	bl	800f6a8 <_init>
 800ed5c:	1b64      	subs	r4, r4, r5
 800ed5e:	10a4      	asrs	r4, r4, #2
 800ed60:	2600      	movs	r6, #0
 800ed62:	42a6      	cmp	r6, r4
 800ed64:	d105      	bne.n	800ed72 <__libc_init_array+0x2e>
 800ed66:	bd70      	pop	{r4, r5, r6, pc}
 800ed68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed6c:	4798      	blx	r3
 800ed6e:	3601      	adds	r6, #1
 800ed70:	e7ee      	b.n	800ed50 <__libc_init_array+0xc>
 800ed72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed76:	4798      	blx	r3
 800ed78:	3601      	adds	r6, #1
 800ed7a:	e7f2      	b.n	800ed62 <__libc_init_array+0x1e>
 800ed7c:	0800fa2c 	.word	0x0800fa2c
 800ed80:	0800fa2c 	.word	0x0800fa2c
 800ed84:	0800fa2c 	.word	0x0800fa2c
 800ed88:	0800fa30 	.word	0x0800fa30

0800ed8c <__retarget_lock_acquire_recursive>:
 800ed8c:	4770      	bx	lr

0800ed8e <__retarget_lock_release_recursive>:
 800ed8e:	4770      	bx	lr

0800ed90 <memcpy>:
 800ed90:	440a      	add	r2, r1
 800ed92:	4291      	cmp	r1, r2
 800ed94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed98:	d100      	bne.n	800ed9c <memcpy+0xc>
 800ed9a:	4770      	bx	lr
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eda2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eda6:	4291      	cmp	r1, r2
 800eda8:	d1f9      	bne.n	800ed9e <memcpy+0xe>
 800edaa:	bd10      	pop	{r4, pc}

0800edac <_free_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4605      	mov	r5, r0
 800edb0:	2900      	cmp	r1, #0
 800edb2:	d041      	beq.n	800ee38 <_free_r+0x8c>
 800edb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edb8:	1f0c      	subs	r4, r1, #4
 800edba:	2b00      	cmp	r3, #0
 800edbc:	bfb8      	it	lt
 800edbe:	18e4      	addlt	r4, r4, r3
 800edc0:	f7ff fece 	bl	800eb60 <__malloc_lock>
 800edc4:	4a1d      	ldr	r2, [pc, #116]	@ (800ee3c <_free_r+0x90>)
 800edc6:	6813      	ldr	r3, [r2, #0]
 800edc8:	b933      	cbnz	r3, 800edd8 <_free_r+0x2c>
 800edca:	6063      	str	r3, [r4, #4]
 800edcc:	6014      	str	r4, [r2, #0]
 800edce:	4628      	mov	r0, r5
 800edd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edd4:	f7ff beca 	b.w	800eb6c <__malloc_unlock>
 800edd8:	42a3      	cmp	r3, r4
 800edda:	d908      	bls.n	800edee <_free_r+0x42>
 800eddc:	6820      	ldr	r0, [r4, #0]
 800edde:	1821      	adds	r1, r4, r0
 800ede0:	428b      	cmp	r3, r1
 800ede2:	bf01      	itttt	eq
 800ede4:	6819      	ldreq	r1, [r3, #0]
 800ede6:	685b      	ldreq	r3, [r3, #4]
 800ede8:	1809      	addeq	r1, r1, r0
 800edea:	6021      	streq	r1, [r4, #0]
 800edec:	e7ed      	b.n	800edca <_free_r+0x1e>
 800edee:	461a      	mov	r2, r3
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	b10b      	cbz	r3, 800edf8 <_free_r+0x4c>
 800edf4:	42a3      	cmp	r3, r4
 800edf6:	d9fa      	bls.n	800edee <_free_r+0x42>
 800edf8:	6811      	ldr	r1, [r2, #0]
 800edfa:	1850      	adds	r0, r2, r1
 800edfc:	42a0      	cmp	r0, r4
 800edfe:	d10b      	bne.n	800ee18 <_free_r+0x6c>
 800ee00:	6820      	ldr	r0, [r4, #0]
 800ee02:	4401      	add	r1, r0
 800ee04:	1850      	adds	r0, r2, r1
 800ee06:	4283      	cmp	r3, r0
 800ee08:	6011      	str	r1, [r2, #0]
 800ee0a:	d1e0      	bne.n	800edce <_free_r+0x22>
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	6053      	str	r3, [r2, #4]
 800ee12:	4408      	add	r0, r1
 800ee14:	6010      	str	r0, [r2, #0]
 800ee16:	e7da      	b.n	800edce <_free_r+0x22>
 800ee18:	d902      	bls.n	800ee20 <_free_r+0x74>
 800ee1a:	230c      	movs	r3, #12
 800ee1c:	602b      	str	r3, [r5, #0]
 800ee1e:	e7d6      	b.n	800edce <_free_r+0x22>
 800ee20:	6820      	ldr	r0, [r4, #0]
 800ee22:	1821      	adds	r1, r4, r0
 800ee24:	428b      	cmp	r3, r1
 800ee26:	bf04      	itt	eq
 800ee28:	6819      	ldreq	r1, [r3, #0]
 800ee2a:	685b      	ldreq	r3, [r3, #4]
 800ee2c:	6063      	str	r3, [r4, #4]
 800ee2e:	bf04      	itt	eq
 800ee30:	1809      	addeq	r1, r1, r0
 800ee32:	6021      	streq	r1, [r4, #0]
 800ee34:	6054      	str	r4, [r2, #4]
 800ee36:	e7ca      	b.n	800edce <_free_r+0x22>
 800ee38:	bd38      	pop	{r3, r4, r5, pc}
 800ee3a:	bf00      	nop
 800ee3c:	24001134 	.word	0x24001134

0800ee40 <_sungetc_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	1c4b      	adds	r3, r1, #1
 800ee44:	4614      	mov	r4, r2
 800ee46:	d103      	bne.n	800ee50 <_sungetc_r+0x10>
 800ee48:	f04f 35ff 	mov.w	r5, #4294967295
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	8993      	ldrh	r3, [r2, #12]
 800ee52:	f023 0320 	bic.w	r3, r3, #32
 800ee56:	8193      	strh	r3, [r2, #12]
 800ee58:	6853      	ldr	r3, [r2, #4]
 800ee5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ee5c:	b2cd      	uxtb	r5, r1
 800ee5e:	b18a      	cbz	r2, 800ee84 <_sungetc_r+0x44>
 800ee60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ee62:	429a      	cmp	r2, r3
 800ee64:	dd08      	ble.n	800ee78 <_sungetc_r+0x38>
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	1e5a      	subs	r2, r3, #1
 800ee6a:	6022      	str	r2, [r4, #0]
 800ee6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ee70:	6863      	ldr	r3, [r4, #4]
 800ee72:	3301      	adds	r3, #1
 800ee74:	6063      	str	r3, [r4, #4]
 800ee76:	e7e9      	b.n	800ee4c <_sungetc_r+0xc>
 800ee78:	4621      	mov	r1, r4
 800ee7a:	f000 fb34 	bl	800f4e6 <__submore>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d0f1      	beq.n	800ee66 <_sungetc_r+0x26>
 800ee82:	e7e1      	b.n	800ee48 <_sungetc_r+0x8>
 800ee84:	6921      	ldr	r1, [r4, #16]
 800ee86:	6822      	ldr	r2, [r4, #0]
 800ee88:	b141      	cbz	r1, 800ee9c <_sungetc_r+0x5c>
 800ee8a:	4291      	cmp	r1, r2
 800ee8c:	d206      	bcs.n	800ee9c <_sungetc_r+0x5c>
 800ee8e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ee92:	42a9      	cmp	r1, r5
 800ee94:	d102      	bne.n	800ee9c <_sungetc_r+0x5c>
 800ee96:	3a01      	subs	r2, #1
 800ee98:	6022      	str	r2, [r4, #0]
 800ee9a:	e7ea      	b.n	800ee72 <_sungetc_r+0x32>
 800ee9c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800eea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eea4:	6363      	str	r3, [r4, #52]	@ 0x34
 800eea6:	2303      	movs	r3, #3
 800eea8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800eeaa:	4623      	mov	r3, r4
 800eeac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e7de      	b.n	800ee74 <_sungetc_r+0x34>

0800eeb6 <__ssrefill_r>:
 800eeb6:	b510      	push	{r4, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800eebc:	b169      	cbz	r1, 800eeda <__ssrefill_r+0x24>
 800eebe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eec2:	4299      	cmp	r1, r3
 800eec4:	d001      	beq.n	800eeca <__ssrefill_r+0x14>
 800eec6:	f7ff ff71 	bl	800edac <_free_r>
 800eeca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eecc:	6063      	str	r3, [r4, #4]
 800eece:	2000      	movs	r0, #0
 800eed0:	6360      	str	r0, [r4, #52]	@ 0x34
 800eed2:	b113      	cbz	r3, 800eeda <__ssrefill_r+0x24>
 800eed4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	bd10      	pop	{r4, pc}
 800eeda:	6923      	ldr	r3, [r4, #16]
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	2300      	movs	r3, #0
 800eee0:	6063      	str	r3, [r4, #4]
 800eee2:	89a3      	ldrh	r3, [r4, #12]
 800eee4:	f043 0320 	orr.w	r3, r3, #32
 800eee8:	81a3      	strh	r3, [r4, #12]
 800eeea:	f04f 30ff 	mov.w	r0, #4294967295
 800eeee:	e7f3      	b.n	800eed8 <__ssrefill_r+0x22>

0800eef0 <__ssvfiscanf_r>:
 800eef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef4:	460c      	mov	r4, r1
 800eef6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800eefa:	2100      	movs	r1, #0
 800eefc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ef00:	49a5      	ldr	r1, [pc, #660]	@ (800f198 <__ssvfiscanf_r+0x2a8>)
 800ef02:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ef04:	f10d 0804 	add.w	r8, sp, #4
 800ef08:	49a4      	ldr	r1, [pc, #656]	@ (800f19c <__ssvfiscanf_r+0x2ac>)
 800ef0a:	4fa5      	ldr	r7, [pc, #660]	@ (800f1a0 <__ssvfiscanf_r+0x2b0>)
 800ef0c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ef10:	4606      	mov	r6, r0
 800ef12:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	7813      	ldrb	r3, [r2, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 8158 	beq.w	800f1ce <__ssvfiscanf_r+0x2de>
 800ef1e:	5cf9      	ldrb	r1, [r7, r3]
 800ef20:	f011 0108 	ands.w	r1, r1, #8
 800ef24:	f102 0501 	add.w	r5, r2, #1
 800ef28:	d019      	beq.n	800ef5e <__ssvfiscanf_r+0x6e>
 800ef2a:	6863      	ldr	r3, [r4, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dd0f      	ble.n	800ef50 <__ssvfiscanf_r+0x60>
 800ef30:	6823      	ldr	r3, [r4, #0]
 800ef32:	781a      	ldrb	r2, [r3, #0]
 800ef34:	5cba      	ldrb	r2, [r7, r2]
 800ef36:	0712      	lsls	r2, r2, #28
 800ef38:	d401      	bmi.n	800ef3e <__ssvfiscanf_r+0x4e>
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	e7eb      	b.n	800ef16 <__ssvfiscanf_r+0x26>
 800ef3e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ef40:	3201      	adds	r2, #1
 800ef42:	9245      	str	r2, [sp, #276]	@ 0x114
 800ef44:	6862      	ldr	r2, [r4, #4]
 800ef46:	3301      	adds	r3, #1
 800ef48:	3a01      	subs	r2, #1
 800ef4a:	6062      	str	r2, [r4, #4]
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	e7ec      	b.n	800ef2a <__ssvfiscanf_r+0x3a>
 800ef50:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ef52:	4621      	mov	r1, r4
 800ef54:	4630      	mov	r0, r6
 800ef56:	4798      	blx	r3
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	d0e9      	beq.n	800ef30 <__ssvfiscanf_r+0x40>
 800ef5c:	e7ed      	b.n	800ef3a <__ssvfiscanf_r+0x4a>
 800ef5e:	2b25      	cmp	r3, #37	@ 0x25
 800ef60:	d012      	beq.n	800ef88 <__ssvfiscanf_r+0x98>
 800ef62:	4699      	mov	r9, r3
 800ef64:	6863      	ldr	r3, [r4, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f340 8093 	ble.w	800f092 <__ssvfiscanf_r+0x1a2>
 800ef6c:	6822      	ldr	r2, [r4, #0]
 800ef6e:	7813      	ldrb	r3, [r2, #0]
 800ef70:	454b      	cmp	r3, r9
 800ef72:	f040 812c 	bne.w	800f1ce <__ssvfiscanf_r+0x2de>
 800ef76:	6863      	ldr	r3, [r4, #4]
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	6063      	str	r3, [r4, #4]
 800ef7c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ef7e:	3201      	adds	r2, #1
 800ef80:	3301      	adds	r3, #1
 800ef82:	6022      	str	r2, [r4, #0]
 800ef84:	9345      	str	r3, [sp, #276]	@ 0x114
 800ef86:	e7d8      	b.n	800ef3a <__ssvfiscanf_r+0x4a>
 800ef88:	9141      	str	r1, [sp, #260]	@ 0x104
 800ef8a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ef8c:	7853      	ldrb	r3, [r2, #1]
 800ef8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef90:	bf02      	ittt	eq
 800ef92:	2310      	moveq	r3, #16
 800ef94:	1c95      	addeq	r5, r2, #2
 800ef96:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ef98:	220a      	movs	r2, #10
 800ef9a:	46a9      	mov	r9, r5
 800ef9c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800efa0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800efa4:	2b09      	cmp	r3, #9
 800efa6:	d91e      	bls.n	800efe6 <__ssvfiscanf_r+0xf6>
 800efa8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f1a4 <__ssvfiscanf_r+0x2b4>
 800efac:	2203      	movs	r2, #3
 800efae:	4650      	mov	r0, sl
 800efb0:	f7f1 f9c6 	bl	8000340 <memchr>
 800efb4:	b138      	cbz	r0, 800efc6 <__ssvfiscanf_r+0xd6>
 800efb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800efb8:	eba0 000a 	sub.w	r0, r0, sl
 800efbc:	2301      	movs	r3, #1
 800efbe:	4083      	lsls	r3, r0
 800efc0:	4313      	orrs	r3, r2
 800efc2:	9341      	str	r3, [sp, #260]	@ 0x104
 800efc4:	464d      	mov	r5, r9
 800efc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800efca:	2b78      	cmp	r3, #120	@ 0x78
 800efcc:	d806      	bhi.n	800efdc <__ssvfiscanf_r+0xec>
 800efce:	2b57      	cmp	r3, #87	@ 0x57
 800efd0:	d810      	bhi.n	800eff4 <__ssvfiscanf_r+0x104>
 800efd2:	2b25      	cmp	r3, #37	@ 0x25
 800efd4:	d0c5      	beq.n	800ef62 <__ssvfiscanf_r+0x72>
 800efd6:	d857      	bhi.n	800f088 <__ssvfiscanf_r+0x198>
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d065      	beq.n	800f0a8 <__ssvfiscanf_r+0x1b8>
 800efdc:	2303      	movs	r3, #3
 800efde:	9347      	str	r3, [sp, #284]	@ 0x11c
 800efe0:	230a      	movs	r3, #10
 800efe2:	9342      	str	r3, [sp, #264]	@ 0x108
 800efe4:	e078      	b.n	800f0d8 <__ssvfiscanf_r+0x1e8>
 800efe6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800efe8:	fb02 1103 	mla	r1, r2, r3, r1
 800efec:	3930      	subs	r1, #48	@ 0x30
 800efee:	9143      	str	r1, [sp, #268]	@ 0x10c
 800eff0:	464d      	mov	r5, r9
 800eff2:	e7d2      	b.n	800ef9a <__ssvfiscanf_r+0xaa>
 800eff4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800eff8:	2a20      	cmp	r2, #32
 800effa:	d8ef      	bhi.n	800efdc <__ssvfiscanf_r+0xec>
 800effc:	a101      	add	r1, pc, #4	@ (adr r1, 800f004 <__ssvfiscanf_r+0x114>)
 800effe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f002:	bf00      	nop
 800f004:	0800f0b7 	.word	0x0800f0b7
 800f008:	0800efdd 	.word	0x0800efdd
 800f00c:	0800efdd 	.word	0x0800efdd
 800f010:	0800f111 	.word	0x0800f111
 800f014:	0800efdd 	.word	0x0800efdd
 800f018:	0800efdd 	.word	0x0800efdd
 800f01c:	0800efdd 	.word	0x0800efdd
 800f020:	0800efdd 	.word	0x0800efdd
 800f024:	0800efdd 	.word	0x0800efdd
 800f028:	0800efdd 	.word	0x0800efdd
 800f02c:	0800efdd 	.word	0x0800efdd
 800f030:	0800f127 	.word	0x0800f127
 800f034:	0800f10d 	.word	0x0800f10d
 800f038:	0800f08f 	.word	0x0800f08f
 800f03c:	0800f08f 	.word	0x0800f08f
 800f040:	0800f08f 	.word	0x0800f08f
 800f044:	0800efdd 	.word	0x0800efdd
 800f048:	0800f0c9 	.word	0x0800f0c9
 800f04c:	0800efdd 	.word	0x0800efdd
 800f050:	0800efdd 	.word	0x0800efdd
 800f054:	0800efdd 	.word	0x0800efdd
 800f058:	0800efdd 	.word	0x0800efdd
 800f05c:	0800f137 	.word	0x0800f137
 800f060:	0800f0d1 	.word	0x0800f0d1
 800f064:	0800f0af 	.word	0x0800f0af
 800f068:	0800efdd 	.word	0x0800efdd
 800f06c:	0800efdd 	.word	0x0800efdd
 800f070:	0800f133 	.word	0x0800f133
 800f074:	0800efdd 	.word	0x0800efdd
 800f078:	0800f10d 	.word	0x0800f10d
 800f07c:	0800efdd 	.word	0x0800efdd
 800f080:	0800efdd 	.word	0x0800efdd
 800f084:	0800f0b7 	.word	0x0800f0b7
 800f088:	3b45      	subs	r3, #69	@ 0x45
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d8a6      	bhi.n	800efdc <__ssvfiscanf_r+0xec>
 800f08e:	2305      	movs	r3, #5
 800f090:	e021      	b.n	800f0d6 <__ssvfiscanf_r+0x1e6>
 800f092:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f094:	4621      	mov	r1, r4
 800f096:	4630      	mov	r0, r6
 800f098:	4798      	blx	r3
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f43f af66 	beq.w	800ef6c <__ssvfiscanf_r+0x7c>
 800f0a0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f040 808b 	bne.w	800f1be <__ssvfiscanf_r+0x2ce>
 800f0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ac:	e08b      	b.n	800f1c6 <__ssvfiscanf_r+0x2d6>
 800f0ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f0b0:	f042 0220 	orr.w	r2, r2, #32
 800f0b4:	9241      	str	r2, [sp, #260]	@ 0x104
 800f0b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f0b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f0bc:	9241      	str	r2, [sp, #260]	@ 0x104
 800f0be:	2210      	movs	r2, #16
 800f0c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800f0c2:	9242      	str	r2, [sp, #264]	@ 0x108
 800f0c4:	d902      	bls.n	800f0cc <__ssvfiscanf_r+0x1dc>
 800f0c6:	e005      	b.n	800f0d4 <__ssvfiscanf_r+0x1e4>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9342      	str	r3, [sp, #264]	@ 0x108
 800f0cc:	2303      	movs	r3, #3
 800f0ce:	e002      	b.n	800f0d6 <__ssvfiscanf_r+0x1e6>
 800f0d0:	2308      	movs	r3, #8
 800f0d2:	9342      	str	r3, [sp, #264]	@ 0x108
 800f0d4:	2304      	movs	r3, #4
 800f0d6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f0d8:	6863      	ldr	r3, [r4, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	dd39      	ble.n	800f152 <__ssvfiscanf_r+0x262>
 800f0de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0e0:	0659      	lsls	r1, r3, #25
 800f0e2:	d404      	bmi.n	800f0ee <__ssvfiscanf_r+0x1fe>
 800f0e4:	6823      	ldr	r3, [r4, #0]
 800f0e6:	781a      	ldrb	r2, [r3, #0]
 800f0e8:	5cba      	ldrb	r2, [r7, r2]
 800f0ea:	0712      	lsls	r2, r2, #28
 800f0ec:	d438      	bmi.n	800f160 <__ssvfiscanf_r+0x270>
 800f0ee:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	dc47      	bgt.n	800f184 <__ssvfiscanf_r+0x294>
 800f0f4:	466b      	mov	r3, sp
 800f0f6:	4622      	mov	r2, r4
 800f0f8:	a941      	add	r1, sp, #260	@ 0x104
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f000 f86c 	bl	800f1d8 <_scanf_chars>
 800f100:	2801      	cmp	r0, #1
 800f102:	d064      	beq.n	800f1ce <__ssvfiscanf_r+0x2de>
 800f104:	2802      	cmp	r0, #2
 800f106:	f47f af18 	bne.w	800ef3a <__ssvfiscanf_r+0x4a>
 800f10a:	e7c9      	b.n	800f0a0 <__ssvfiscanf_r+0x1b0>
 800f10c:	220a      	movs	r2, #10
 800f10e:	e7d7      	b.n	800f0c0 <__ssvfiscanf_r+0x1d0>
 800f110:	4629      	mov	r1, r5
 800f112:	4640      	mov	r0, r8
 800f114:	f000 f9ae 	bl	800f474 <__sccl>
 800f118:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f11a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f11e:	9341      	str	r3, [sp, #260]	@ 0x104
 800f120:	4605      	mov	r5, r0
 800f122:	2301      	movs	r3, #1
 800f124:	e7d7      	b.n	800f0d6 <__ssvfiscanf_r+0x1e6>
 800f126:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f12c:	9341      	str	r3, [sp, #260]	@ 0x104
 800f12e:	2300      	movs	r3, #0
 800f130:	e7d1      	b.n	800f0d6 <__ssvfiscanf_r+0x1e6>
 800f132:	2302      	movs	r3, #2
 800f134:	e7cf      	b.n	800f0d6 <__ssvfiscanf_r+0x1e6>
 800f136:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f138:	06c3      	lsls	r3, r0, #27
 800f13a:	f53f aefe 	bmi.w	800ef3a <__ssvfiscanf_r+0x4a>
 800f13e:	9b00      	ldr	r3, [sp, #0]
 800f140:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f142:	1d19      	adds	r1, r3, #4
 800f144:	9100      	str	r1, [sp, #0]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	07c0      	lsls	r0, r0, #31
 800f14a:	bf4c      	ite	mi
 800f14c:	801a      	strhmi	r2, [r3, #0]
 800f14e:	601a      	strpl	r2, [r3, #0]
 800f150:	e6f3      	b.n	800ef3a <__ssvfiscanf_r+0x4a>
 800f152:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f154:	4621      	mov	r1, r4
 800f156:	4630      	mov	r0, r6
 800f158:	4798      	blx	r3
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d0bf      	beq.n	800f0de <__ssvfiscanf_r+0x1ee>
 800f15e:	e79f      	b.n	800f0a0 <__ssvfiscanf_r+0x1b0>
 800f160:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f162:	3201      	adds	r2, #1
 800f164:	9245      	str	r2, [sp, #276]	@ 0x114
 800f166:	6862      	ldr	r2, [r4, #4]
 800f168:	3a01      	subs	r2, #1
 800f16a:	2a00      	cmp	r2, #0
 800f16c:	6062      	str	r2, [r4, #4]
 800f16e:	dd02      	ble.n	800f176 <__ssvfiscanf_r+0x286>
 800f170:	3301      	adds	r3, #1
 800f172:	6023      	str	r3, [r4, #0]
 800f174:	e7b6      	b.n	800f0e4 <__ssvfiscanf_r+0x1f4>
 800f176:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f178:	4621      	mov	r1, r4
 800f17a:	4630      	mov	r0, r6
 800f17c:	4798      	blx	r3
 800f17e:	2800      	cmp	r0, #0
 800f180:	d0b0      	beq.n	800f0e4 <__ssvfiscanf_r+0x1f4>
 800f182:	e78d      	b.n	800f0a0 <__ssvfiscanf_r+0x1b0>
 800f184:	2b04      	cmp	r3, #4
 800f186:	dc0f      	bgt.n	800f1a8 <__ssvfiscanf_r+0x2b8>
 800f188:	466b      	mov	r3, sp
 800f18a:	4622      	mov	r2, r4
 800f18c:	a941      	add	r1, sp, #260	@ 0x104
 800f18e:	4630      	mov	r0, r6
 800f190:	f000 f87c 	bl	800f28c <_scanf_i>
 800f194:	e7b4      	b.n	800f100 <__ssvfiscanf_r+0x210>
 800f196:	bf00      	nop
 800f198:	0800ee41 	.word	0x0800ee41
 800f19c:	0800eeb7 	.word	0x0800eeb7
 800f1a0:	0800f905 	.word	0x0800f905
 800f1a4:	0800fa05 	.word	0x0800fa05
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d4 <__ssvfiscanf_r+0x2e4>)
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f43f aec5 	beq.w	800ef3a <__ssvfiscanf_r+0x4a>
 800f1b0:	466b      	mov	r3, sp
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	a941      	add	r1, sp, #260	@ 0x104
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f3af 8000 	nop.w
 800f1bc:	e7a0      	b.n	800f100 <__ssvfiscanf_r+0x210>
 800f1be:	89a3      	ldrh	r3, [r4, #12]
 800f1c0:	065b      	lsls	r3, r3, #25
 800f1c2:	f53f af71 	bmi.w	800f0a8 <__ssvfiscanf_r+0x1b8>
 800f1c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ce:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f1d0:	e7f9      	b.n	800f1c6 <__ssvfiscanf_r+0x2d6>
 800f1d2:	bf00      	nop
 800f1d4:	00000000 	.word	0x00000000

0800f1d8 <_scanf_chars>:
 800f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	4615      	mov	r5, r2
 800f1de:	688a      	ldr	r2, [r1, #8]
 800f1e0:	4680      	mov	r8, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	b932      	cbnz	r2, 800f1f4 <_scanf_chars+0x1c>
 800f1e6:	698a      	ldr	r2, [r1, #24]
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	bf14      	ite	ne
 800f1ec:	f04f 32ff 	movne.w	r2, #4294967295
 800f1f0:	2201      	moveq	r2, #1
 800f1f2:	608a      	str	r2, [r1, #8]
 800f1f4:	6822      	ldr	r2, [r4, #0]
 800f1f6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f288 <_scanf_chars+0xb0>
 800f1fa:	06d1      	lsls	r1, r2, #27
 800f1fc:	bf5f      	itttt	pl
 800f1fe:	681a      	ldrpl	r2, [r3, #0]
 800f200:	1d11      	addpl	r1, r2, #4
 800f202:	6019      	strpl	r1, [r3, #0]
 800f204:	6816      	ldrpl	r6, [r2, #0]
 800f206:	2700      	movs	r7, #0
 800f208:	69a0      	ldr	r0, [r4, #24]
 800f20a:	b188      	cbz	r0, 800f230 <_scanf_chars+0x58>
 800f20c:	2801      	cmp	r0, #1
 800f20e:	d107      	bne.n	800f220 <_scanf_chars+0x48>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	781a      	ldrb	r2, [r3, #0]
 800f214:	6963      	ldr	r3, [r4, #20]
 800f216:	5c9b      	ldrb	r3, [r3, r2]
 800f218:	b953      	cbnz	r3, 800f230 <_scanf_chars+0x58>
 800f21a:	2f00      	cmp	r7, #0
 800f21c:	d031      	beq.n	800f282 <_scanf_chars+0xaa>
 800f21e:	e022      	b.n	800f266 <_scanf_chars+0x8e>
 800f220:	2802      	cmp	r0, #2
 800f222:	d120      	bne.n	800f266 <_scanf_chars+0x8e>
 800f224:	682b      	ldr	r3, [r5, #0]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f22c:	071b      	lsls	r3, r3, #28
 800f22e:	d41a      	bmi.n	800f266 <_scanf_chars+0x8e>
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	06da      	lsls	r2, r3, #27
 800f234:	bf5e      	ittt	pl
 800f236:	682b      	ldrpl	r3, [r5, #0]
 800f238:	781b      	ldrbpl	r3, [r3, #0]
 800f23a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f23e:	682a      	ldr	r2, [r5, #0]
 800f240:	686b      	ldr	r3, [r5, #4]
 800f242:	3201      	adds	r2, #1
 800f244:	602a      	str	r2, [r5, #0]
 800f246:	68a2      	ldr	r2, [r4, #8]
 800f248:	3b01      	subs	r3, #1
 800f24a:	3a01      	subs	r2, #1
 800f24c:	606b      	str	r3, [r5, #4]
 800f24e:	3701      	adds	r7, #1
 800f250:	60a2      	str	r2, [r4, #8]
 800f252:	b142      	cbz	r2, 800f266 <_scanf_chars+0x8e>
 800f254:	2b00      	cmp	r3, #0
 800f256:	dcd7      	bgt.n	800f208 <_scanf_chars+0x30>
 800f258:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f25c:	4629      	mov	r1, r5
 800f25e:	4640      	mov	r0, r8
 800f260:	4798      	blx	r3
 800f262:	2800      	cmp	r0, #0
 800f264:	d0d0      	beq.n	800f208 <_scanf_chars+0x30>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	f013 0310 	ands.w	r3, r3, #16
 800f26c:	d105      	bne.n	800f27a <_scanf_chars+0xa2>
 800f26e:	68e2      	ldr	r2, [r4, #12]
 800f270:	3201      	adds	r2, #1
 800f272:	60e2      	str	r2, [r4, #12]
 800f274:	69a2      	ldr	r2, [r4, #24]
 800f276:	b102      	cbz	r2, 800f27a <_scanf_chars+0xa2>
 800f278:	7033      	strb	r3, [r6, #0]
 800f27a:	6923      	ldr	r3, [r4, #16]
 800f27c:	443b      	add	r3, r7
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	2000      	movs	r0, #0
 800f282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f286:	bf00      	nop
 800f288:	0800f905 	.word	0x0800f905

0800f28c <_scanf_i>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	4698      	mov	r8, r3
 800f292:	4b74      	ldr	r3, [pc, #464]	@ (800f464 <_scanf_i+0x1d8>)
 800f294:	460c      	mov	r4, r1
 800f296:	4682      	mov	sl, r0
 800f298:	4616      	mov	r6, r2
 800f29a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f29e:	b087      	sub	sp, #28
 800f2a0:	ab03      	add	r3, sp, #12
 800f2a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f2a6:	4b70      	ldr	r3, [pc, #448]	@ (800f468 <_scanf_i+0x1dc>)
 800f2a8:	69a1      	ldr	r1, [r4, #24]
 800f2aa:	4a70      	ldr	r2, [pc, #448]	@ (800f46c <_scanf_i+0x1e0>)
 800f2ac:	2903      	cmp	r1, #3
 800f2ae:	bf08      	it	eq
 800f2b0:	461a      	moveq	r2, r3
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	9201      	str	r2, [sp, #4]
 800f2b6:	1e5a      	subs	r2, r3, #1
 800f2b8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f2bc:	bf88      	it	hi
 800f2be:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f2c2:	4627      	mov	r7, r4
 800f2c4:	bf82      	ittt	hi
 800f2c6:	eb03 0905 	addhi.w	r9, r3, r5
 800f2ca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f2ce:	60a3      	strhi	r3, [r4, #8]
 800f2d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f2d4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f2d8:	bf98      	it	ls
 800f2da:	f04f 0900 	movls.w	r9, #0
 800f2de:	6023      	str	r3, [r4, #0]
 800f2e0:	463d      	mov	r5, r7
 800f2e2:	f04f 0b00 	mov.w	fp, #0
 800f2e6:	6831      	ldr	r1, [r6, #0]
 800f2e8:	ab03      	add	r3, sp, #12
 800f2ea:	7809      	ldrb	r1, [r1, #0]
 800f2ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f2f0:	2202      	movs	r2, #2
 800f2f2:	f7f1 f825 	bl	8000340 <memchr>
 800f2f6:	b328      	cbz	r0, 800f344 <_scanf_i+0xb8>
 800f2f8:	f1bb 0f01 	cmp.w	fp, #1
 800f2fc:	d159      	bne.n	800f3b2 <_scanf_i+0x126>
 800f2fe:	6862      	ldr	r2, [r4, #4]
 800f300:	b92a      	cbnz	r2, 800f30e <_scanf_i+0x82>
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	2108      	movs	r1, #8
 800f306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f30a:	6061      	str	r1, [r4, #4]
 800f30c:	6022      	str	r2, [r4, #0]
 800f30e:	6822      	ldr	r2, [r4, #0]
 800f310:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f314:	6022      	str	r2, [r4, #0]
 800f316:	68a2      	ldr	r2, [r4, #8]
 800f318:	1e51      	subs	r1, r2, #1
 800f31a:	60a1      	str	r1, [r4, #8]
 800f31c:	b192      	cbz	r2, 800f344 <_scanf_i+0xb8>
 800f31e:	6832      	ldr	r2, [r6, #0]
 800f320:	1c51      	adds	r1, r2, #1
 800f322:	6031      	str	r1, [r6, #0]
 800f324:	7812      	ldrb	r2, [r2, #0]
 800f326:	f805 2b01 	strb.w	r2, [r5], #1
 800f32a:	6872      	ldr	r2, [r6, #4]
 800f32c:	3a01      	subs	r2, #1
 800f32e:	2a00      	cmp	r2, #0
 800f330:	6072      	str	r2, [r6, #4]
 800f332:	dc07      	bgt.n	800f344 <_scanf_i+0xb8>
 800f334:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f338:	4631      	mov	r1, r6
 800f33a:	4650      	mov	r0, sl
 800f33c:	4790      	blx	r2
 800f33e:	2800      	cmp	r0, #0
 800f340:	f040 8085 	bne.w	800f44e <_scanf_i+0x1c2>
 800f344:	f10b 0b01 	add.w	fp, fp, #1
 800f348:	f1bb 0f03 	cmp.w	fp, #3
 800f34c:	d1cb      	bne.n	800f2e6 <_scanf_i+0x5a>
 800f34e:	6863      	ldr	r3, [r4, #4]
 800f350:	b90b      	cbnz	r3, 800f356 <_scanf_i+0xca>
 800f352:	230a      	movs	r3, #10
 800f354:	6063      	str	r3, [r4, #4]
 800f356:	6863      	ldr	r3, [r4, #4]
 800f358:	4945      	ldr	r1, [pc, #276]	@ (800f470 <_scanf_i+0x1e4>)
 800f35a:	6960      	ldr	r0, [r4, #20]
 800f35c:	1ac9      	subs	r1, r1, r3
 800f35e:	f000 f889 	bl	800f474 <__sccl>
 800f362:	f04f 0b00 	mov.w	fp, #0
 800f366:	68a3      	ldr	r3, [r4, #8]
 800f368:	6822      	ldr	r2, [r4, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d03d      	beq.n	800f3ea <_scanf_i+0x15e>
 800f36e:	6831      	ldr	r1, [r6, #0]
 800f370:	6960      	ldr	r0, [r4, #20]
 800f372:	f891 c000 	ldrb.w	ip, [r1]
 800f376:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d035      	beq.n	800f3ea <_scanf_i+0x15e>
 800f37e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f382:	d124      	bne.n	800f3ce <_scanf_i+0x142>
 800f384:	0510      	lsls	r0, r2, #20
 800f386:	d522      	bpl.n	800f3ce <_scanf_i+0x142>
 800f388:	f10b 0b01 	add.w	fp, fp, #1
 800f38c:	f1b9 0f00 	cmp.w	r9, #0
 800f390:	d003      	beq.n	800f39a <_scanf_i+0x10e>
 800f392:	3301      	adds	r3, #1
 800f394:	f109 39ff 	add.w	r9, r9, #4294967295
 800f398:	60a3      	str	r3, [r4, #8]
 800f39a:	6873      	ldr	r3, [r6, #4]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	6073      	str	r3, [r6, #4]
 800f3a2:	dd1b      	ble.n	800f3dc <_scanf_i+0x150>
 800f3a4:	6833      	ldr	r3, [r6, #0]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	6033      	str	r3, [r6, #0]
 800f3aa:	68a3      	ldr	r3, [r4, #8]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	60a3      	str	r3, [r4, #8]
 800f3b0:	e7d9      	b.n	800f366 <_scanf_i+0xda>
 800f3b2:	f1bb 0f02 	cmp.w	fp, #2
 800f3b6:	d1ae      	bne.n	800f316 <_scanf_i+0x8a>
 800f3b8:	6822      	ldr	r2, [r4, #0]
 800f3ba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f3be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f3c2:	d1bf      	bne.n	800f344 <_scanf_i+0xb8>
 800f3c4:	2110      	movs	r1, #16
 800f3c6:	6061      	str	r1, [r4, #4]
 800f3c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f3cc:	e7a2      	b.n	800f314 <_scanf_i+0x88>
 800f3ce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f3d2:	6022      	str	r2, [r4, #0]
 800f3d4:	780b      	ldrb	r3, [r1, #0]
 800f3d6:	f805 3b01 	strb.w	r3, [r5], #1
 800f3da:	e7de      	b.n	800f39a <_scanf_i+0x10e>
 800f3dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4650      	mov	r0, sl
 800f3e4:	4798      	blx	r3
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d0df      	beq.n	800f3aa <_scanf_i+0x11e>
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	05d9      	lsls	r1, r3, #23
 800f3ee:	d50d      	bpl.n	800f40c <_scanf_i+0x180>
 800f3f0:	42bd      	cmp	r5, r7
 800f3f2:	d909      	bls.n	800f408 <_scanf_i+0x17c>
 800f3f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f3f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3fc:	4632      	mov	r2, r6
 800f3fe:	4650      	mov	r0, sl
 800f400:	4798      	blx	r3
 800f402:	f105 39ff 	add.w	r9, r5, #4294967295
 800f406:	464d      	mov	r5, r9
 800f408:	42bd      	cmp	r5, r7
 800f40a:	d028      	beq.n	800f45e <_scanf_i+0x1d2>
 800f40c:	6822      	ldr	r2, [r4, #0]
 800f40e:	f012 0210 	ands.w	r2, r2, #16
 800f412:	d113      	bne.n	800f43c <_scanf_i+0x1b0>
 800f414:	702a      	strb	r2, [r5, #0]
 800f416:	6863      	ldr	r3, [r4, #4]
 800f418:	9e01      	ldr	r6, [sp, #4]
 800f41a:	4639      	mov	r1, r7
 800f41c:	4650      	mov	r0, sl
 800f41e:	47b0      	blx	r6
 800f420:	f8d8 3000 	ldr.w	r3, [r8]
 800f424:	6821      	ldr	r1, [r4, #0]
 800f426:	1d1a      	adds	r2, r3, #4
 800f428:	f8c8 2000 	str.w	r2, [r8]
 800f42c:	f011 0f20 	tst.w	r1, #32
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	d00f      	beq.n	800f454 <_scanf_i+0x1c8>
 800f434:	6018      	str	r0, [r3, #0]
 800f436:	68e3      	ldr	r3, [r4, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	60e3      	str	r3, [r4, #12]
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	1bed      	subs	r5, r5, r7
 800f440:	445d      	add	r5, fp
 800f442:	442b      	add	r3, r5
 800f444:	6123      	str	r3, [r4, #16]
 800f446:	2000      	movs	r0, #0
 800f448:	b007      	add	sp, #28
 800f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44e:	f04f 0b00 	mov.w	fp, #0
 800f452:	e7ca      	b.n	800f3ea <_scanf_i+0x15e>
 800f454:	07ca      	lsls	r2, r1, #31
 800f456:	bf4c      	ite	mi
 800f458:	8018      	strhmi	r0, [r3, #0]
 800f45a:	6018      	strpl	r0, [r3, #0]
 800f45c:	e7eb      	b.n	800f436 <_scanf_i+0x1aa>
 800f45e:	2001      	movs	r0, #1
 800f460:	e7f2      	b.n	800f448 <_scanf_i+0x1bc>
 800f462:	bf00      	nop
 800f464:	0800f8b0 	.word	0x0800f8b0
 800f468:	0800ec6d 	.word	0x0800ec6d
 800f46c:	0800f695 	.word	0x0800f695
 800f470:	0800fa19 	.word	0x0800fa19

0800f474 <__sccl>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	780b      	ldrb	r3, [r1, #0]
 800f478:	4604      	mov	r4, r0
 800f47a:	2b5e      	cmp	r3, #94	@ 0x5e
 800f47c:	bf0b      	itete	eq
 800f47e:	784b      	ldrbeq	r3, [r1, #1]
 800f480:	1c4a      	addne	r2, r1, #1
 800f482:	1c8a      	addeq	r2, r1, #2
 800f484:	2100      	movne	r1, #0
 800f486:	bf08      	it	eq
 800f488:	2101      	moveq	r1, #1
 800f48a:	3801      	subs	r0, #1
 800f48c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f490:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f494:	42a8      	cmp	r0, r5
 800f496:	d1fb      	bne.n	800f490 <__sccl+0x1c>
 800f498:	b90b      	cbnz	r3, 800f49e <__sccl+0x2a>
 800f49a:	1e50      	subs	r0, r2, #1
 800f49c:	bd70      	pop	{r4, r5, r6, pc}
 800f49e:	f081 0101 	eor.w	r1, r1, #1
 800f4a2:	54e1      	strb	r1, [r4, r3]
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f4ac:	2d2d      	cmp	r5, #45	@ 0x2d
 800f4ae:	d005      	beq.n	800f4bc <__sccl+0x48>
 800f4b0:	2d5d      	cmp	r5, #93	@ 0x5d
 800f4b2:	d016      	beq.n	800f4e2 <__sccl+0x6e>
 800f4b4:	2d00      	cmp	r5, #0
 800f4b6:	d0f1      	beq.n	800f49c <__sccl+0x28>
 800f4b8:	462b      	mov	r3, r5
 800f4ba:	e7f2      	b.n	800f4a2 <__sccl+0x2e>
 800f4bc:	7846      	ldrb	r6, [r0, #1]
 800f4be:	2e5d      	cmp	r6, #93	@ 0x5d
 800f4c0:	d0fa      	beq.n	800f4b8 <__sccl+0x44>
 800f4c2:	42b3      	cmp	r3, r6
 800f4c4:	dcf8      	bgt.n	800f4b8 <__sccl+0x44>
 800f4c6:	3002      	adds	r0, #2
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	3201      	adds	r2, #1
 800f4cc:	4296      	cmp	r6, r2
 800f4ce:	54a1      	strb	r1, [r4, r2]
 800f4d0:	dcfb      	bgt.n	800f4ca <__sccl+0x56>
 800f4d2:	1af2      	subs	r2, r6, r3
 800f4d4:	3a01      	subs	r2, #1
 800f4d6:	1c5d      	adds	r5, r3, #1
 800f4d8:	42b3      	cmp	r3, r6
 800f4da:	bfa8      	it	ge
 800f4dc:	2200      	movge	r2, #0
 800f4de:	18ab      	adds	r3, r5, r2
 800f4e0:	e7e1      	b.n	800f4a6 <__sccl+0x32>
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	e7da      	b.n	800f49c <__sccl+0x28>

0800f4e6 <__submore>:
 800f4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f4ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	d11d      	bne.n	800f532 <__submore+0x4c>
 800f4f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f4fa:	f7ff fab1 	bl	800ea60 <_malloc_r>
 800f4fe:	b918      	cbnz	r0, 800f508 <__submore+0x22>
 800f500:	f04f 30ff 	mov.w	r0, #4294967295
 800f504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f50c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f50e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f512:	6360      	str	r0, [r4, #52]	@ 0x34
 800f514:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f518:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f51c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f520:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f524:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f528:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f52c:	6020      	str	r0, [r4, #0]
 800f52e:	2000      	movs	r0, #0
 800f530:	e7e8      	b.n	800f504 <__submore+0x1e>
 800f532:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f534:	0077      	lsls	r7, r6, #1
 800f536:	463a      	mov	r2, r7
 800f538:	f000 f80f 	bl	800f55a <_realloc_r>
 800f53c:	4605      	mov	r5, r0
 800f53e:	2800      	cmp	r0, #0
 800f540:	d0de      	beq.n	800f500 <__submore+0x1a>
 800f542:	eb00 0806 	add.w	r8, r0, r6
 800f546:	4601      	mov	r1, r0
 800f548:	4632      	mov	r2, r6
 800f54a:	4640      	mov	r0, r8
 800f54c:	f7ff fc20 	bl	800ed90 <memcpy>
 800f550:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f554:	f8c4 8000 	str.w	r8, [r4]
 800f558:	e7e9      	b.n	800f52e <__submore+0x48>

0800f55a <_realloc_r>:
 800f55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f55e:	4680      	mov	r8, r0
 800f560:	4615      	mov	r5, r2
 800f562:	460c      	mov	r4, r1
 800f564:	b921      	cbnz	r1, 800f570 <_realloc_r+0x16>
 800f566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f56a:	4611      	mov	r1, r2
 800f56c:	f7ff ba78 	b.w	800ea60 <_malloc_r>
 800f570:	b92a      	cbnz	r2, 800f57e <_realloc_r+0x24>
 800f572:	f7ff fc1b 	bl	800edac <_free_r>
 800f576:	2400      	movs	r4, #0
 800f578:	4620      	mov	r0, r4
 800f57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57e:	f000 f88b 	bl	800f698 <_malloc_usable_size_r>
 800f582:	4285      	cmp	r5, r0
 800f584:	4606      	mov	r6, r0
 800f586:	d802      	bhi.n	800f58e <_realloc_r+0x34>
 800f588:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f58c:	d8f4      	bhi.n	800f578 <_realloc_r+0x1e>
 800f58e:	4629      	mov	r1, r5
 800f590:	4640      	mov	r0, r8
 800f592:	f7ff fa65 	bl	800ea60 <_malloc_r>
 800f596:	4607      	mov	r7, r0
 800f598:	2800      	cmp	r0, #0
 800f59a:	d0ec      	beq.n	800f576 <_realloc_r+0x1c>
 800f59c:	42b5      	cmp	r5, r6
 800f59e:	462a      	mov	r2, r5
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	bf28      	it	cs
 800f5a4:	4632      	movcs	r2, r6
 800f5a6:	f7ff fbf3 	bl	800ed90 <memcpy>
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	f7ff fbfd 	bl	800edac <_free_r>
 800f5b2:	463c      	mov	r4, r7
 800f5b4:	e7e0      	b.n	800f578 <_realloc_r+0x1e>
	...

0800f5b8 <_strtoul_l.constprop.0>:
 800f5b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5bc:	4e34      	ldr	r6, [pc, #208]	@ (800f690 <_strtoul_l.constprop.0+0xd8>)
 800f5be:	4686      	mov	lr, r0
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f5c8:	5d37      	ldrb	r7, [r6, r4]
 800f5ca:	f017 0708 	ands.w	r7, r7, #8
 800f5ce:	d1f8      	bne.n	800f5c2 <_strtoul_l.constprop.0+0xa>
 800f5d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f5d2:	d12f      	bne.n	800f634 <_strtoul_l.constprop.0+0x7c>
 800f5d4:	782c      	ldrb	r4, [r5, #0]
 800f5d6:	2701      	movs	r7, #1
 800f5d8:	1c85      	adds	r5, r0, #2
 800f5da:	f033 0010 	bics.w	r0, r3, #16
 800f5de:	d109      	bne.n	800f5f4 <_strtoul_l.constprop.0+0x3c>
 800f5e0:	2c30      	cmp	r4, #48	@ 0x30
 800f5e2:	d12c      	bne.n	800f63e <_strtoul_l.constprop.0+0x86>
 800f5e4:	7828      	ldrb	r0, [r5, #0]
 800f5e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f5ea:	2858      	cmp	r0, #88	@ 0x58
 800f5ec:	d127      	bne.n	800f63e <_strtoul_l.constprop.0+0x86>
 800f5ee:	786c      	ldrb	r4, [r5, #1]
 800f5f0:	2310      	movs	r3, #16
 800f5f2:	3502      	adds	r5, #2
 800f5f4:	f04f 38ff 	mov.w	r8, #4294967295
 800f5f8:	2600      	movs	r6, #0
 800f5fa:	fbb8 f8f3 	udiv	r8, r8, r3
 800f5fe:	fb03 f908 	mul.w	r9, r3, r8
 800f602:	ea6f 0909 	mvn.w	r9, r9
 800f606:	4630      	mov	r0, r6
 800f608:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f60c:	f1bc 0f09 	cmp.w	ip, #9
 800f610:	d81c      	bhi.n	800f64c <_strtoul_l.constprop.0+0x94>
 800f612:	4664      	mov	r4, ip
 800f614:	42a3      	cmp	r3, r4
 800f616:	dd2a      	ble.n	800f66e <_strtoul_l.constprop.0+0xb6>
 800f618:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f61c:	d007      	beq.n	800f62e <_strtoul_l.constprop.0+0x76>
 800f61e:	4580      	cmp	r8, r0
 800f620:	d322      	bcc.n	800f668 <_strtoul_l.constprop.0+0xb0>
 800f622:	d101      	bne.n	800f628 <_strtoul_l.constprop.0+0x70>
 800f624:	45a1      	cmp	r9, r4
 800f626:	db1f      	blt.n	800f668 <_strtoul_l.constprop.0+0xb0>
 800f628:	fb00 4003 	mla	r0, r0, r3, r4
 800f62c:	2601      	movs	r6, #1
 800f62e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f632:	e7e9      	b.n	800f608 <_strtoul_l.constprop.0+0x50>
 800f634:	2c2b      	cmp	r4, #43	@ 0x2b
 800f636:	bf04      	itt	eq
 800f638:	782c      	ldrbeq	r4, [r5, #0]
 800f63a:	1c85      	addeq	r5, r0, #2
 800f63c:	e7cd      	b.n	800f5da <_strtoul_l.constprop.0+0x22>
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1d8      	bne.n	800f5f4 <_strtoul_l.constprop.0+0x3c>
 800f642:	2c30      	cmp	r4, #48	@ 0x30
 800f644:	bf0c      	ite	eq
 800f646:	2308      	moveq	r3, #8
 800f648:	230a      	movne	r3, #10
 800f64a:	e7d3      	b.n	800f5f4 <_strtoul_l.constprop.0+0x3c>
 800f64c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f650:	f1bc 0f19 	cmp.w	ip, #25
 800f654:	d801      	bhi.n	800f65a <_strtoul_l.constprop.0+0xa2>
 800f656:	3c37      	subs	r4, #55	@ 0x37
 800f658:	e7dc      	b.n	800f614 <_strtoul_l.constprop.0+0x5c>
 800f65a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f65e:	f1bc 0f19 	cmp.w	ip, #25
 800f662:	d804      	bhi.n	800f66e <_strtoul_l.constprop.0+0xb6>
 800f664:	3c57      	subs	r4, #87	@ 0x57
 800f666:	e7d5      	b.n	800f614 <_strtoul_l.constprop.0+0x5c>
 800f668:	f04f 36ff 	mov.w	r6, #4294967295
 800f66c:	e7df      	b.n	800f62e <_strtoul_l.constprop.0+0x76>
 800f66e:	1c73      	adds	r3, r6, #1
 800f670:	d106      	bne.n	800f680 <_strtoul_l.constprop.0+0xc8>
 800f672:	2322      	movs	r3, #34	@ 0x22
 800f674:	f8ce 3000 	str.w	r3, [lr]
 800f678:	4630      	mov	r0, r6
 800f67a:	b932      	cbnz	r2, 800f68a <_strtoul_l.constprop.0+0xd2>
 800f67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f680:	b107      	cbz	r7, 800f684 <_strtoul_l.constprop.0+0xcc>
 800f682:	4240      	negs	r0, r0
 800f684:	2a00      	cmp	r2, #0
 800f686:	d0f9      	beq.n	800f67c <_strtoul_l.constprop.0+0xc4>
 800f688:	b106      	cbz	r6, 800f68c <_strtoul_l.constprop.0+0xd4>
 800f68a:	1e69      	subs	r1, r5, #1
 800f68c:	6011      	str	r1, [r2, #0]
 800f68e:	e7f5      	b.n	800f67c <_strtoul_l.constprop.0+0xc4>
 800f690:	0800f905 	.word	0x0800f905

0800f694 <_strtoul_r>:
 800f694:	f7ff bf90 	b.w	800f5b8 <_strtoul_l.constprop.0>

0800f698 <_malloc_usable_size_r>:
 800f698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f69c:	1f18      	subs	r0, r3, #4
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	bfbc      	itt	lt
 800f6a2:	580b      	ldrlt	r3, [r1, r0]
 800f6a4:	18c0      	addlt	r0, r0, r3
 800f6a6:	4770      	bx	lr

0800f6a8 <_init>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	bf00      	nop
 800f6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ae:	bc08      	pop	{r3}
 800f6b0:	469e      	mov	lr, r3
 800f6b2:	4770      	bx	lr

0800f6b4 <_fini>:
 800f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b6:	bf00      	nop
 800f6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ba:	bc08      	pop	{r3}
 800f6bc:	469e      	mov	lr, r3
 800f6be:	4770      	bx	lr
